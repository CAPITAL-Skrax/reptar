[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "lib/assets/browserify.js",
    "content": "import browserify from 'browserify';\nimport babelify from 'babelify';\nimport uglifyify from 'uglifyify';\n\nexport default {\n  calculateDestination(destination) {\n    return destination;\n  },\n\n  render(file) {\n    const { path: filePath } = file;\n\n    const bundle = browserify();\n    bundle.add(filePath);\n\n    bundle.transform(\n      babelify.configure({\n        presets: [\n          [require.resolve('babel-preset-env'), {\n            targets: {\n              browsers: ['last 2 versions'],\n            },\n            uglify: true,\n          }],\n        ],\n      })\n    );\n\n    bundle.transform(\n      uglifyify\n    );\n\n    return new Promise((resolve, reject) => {\n      bundle.bundle((err, buffer) => {\n        if (err) {\n          const e = new Error(\n            `Unable to browserify ${filePath}.\\n${err}`\n          );\n          e.stack = err.stack;\n          reject(e);\n        } else {\n          resolve(buffer.toString('utf8'));\n        }\n      });\n    });\n  },\n};\n",
    "static": true,
    "longname": "lib/assets/browserify.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "file",
    "name": "lib/assets/less.js",
    "content": "import path from 'path';\nimport fs from 'fs-extra';\nimport less from 'less';\nimport LessPluginAutoPrefix from 'less-plugin-autoprefix';\nimport LessPluginCleanCSS from 'less-plugin-clean-css';\nimport LessPluginNpmImport from 'less-plugin-npm-import';\n\nexport default {\n  calculateDestination(destination) {\n    return destination.replace(\n      /\\.less$/,\n      '.css'\n    );\n  },\n\n  render(file) {\n    const { path: filePath } = file;\n\n    // Derive source path from the input source file.\n    const sourcePath = path.dirname(filePath);\n\n    const lessPlugins = [\n      new LessPluginNpmImport({\n        basedir: sourcePath,\n      }),\n      new LessPluginAutoPrefix({\n        browsers: ['last 2 versions'],\n      }),\n      new LessPluginCleanCSS(),\n    ];\n\n    const rawAsset = fs.readFileSync(filePath, 'utf8');\n\n    return new Promise((resolve, reject) => {\n      less.render(rawAsset, {\n        // Specify search paths for @import directives.\n        paths: [sourcePath],\n        plugins: lessPlugins,\n      }, (e, output) => {\n        if (e) {\n          reject(e);\n          return;\n        }\n\n        resolve(output.css);\n      });\n    });\n  },\n};\n",
    "static": true,
    "longname": "lib/assets/less.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2,
    "kind": "file",
    "name": "lib/assets/sass.js",
    "content": "import sass from 'node-sass';\n\nexport default {\n  calculateDestination(destination) {\n    return destination.replace(\n      /\\.s[ac]ss$/,\n      '.css'\n    );\n  },\n\n  render(file) {\n    const { path: filePath } = file;\n\n    return new Promise((resolve, reject) => {\n      sass.render({\n        file: filePath,\n      }, (e, result) => {\n        if (e) {\n          reject(e);\n          return;\n        }\n\n        resolve(result.css);\n      });\n    });\n  },\n};\n",
    "static": true,
    "longname": "lib/assets/sass.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3,
    "kind": "file",
    "name": "lib/cache.js",
    "content": "import path from 'path';\nimport fs from 'fs-extra';\nimport homeOrTmp from 'home-or-tmp';\nimport log from './log';\n\nlet data = {};\n\n/**\n * Namespace of the Reptar site that we're caching. This is unique for every\n * directory so we can manage cache individually for each local Reptar install.\n * @param {string}\n */\nlet namespace;\n\nfunction createFilename(name = '') {\n  return path.join(homeOrTmp, '.reptar-cache', `${name}.json`);\n}\n\nlet filename = createFilename(namespace);\n\nconst cache = {\n  setNamespace(val) {\n    namespace = val;\n\n    filename = createFilename(namespace);\n  },\n\n  load() {\n    if (this._loaded) {\n      return;\n    }\n    this._loaded = true;\n\n    process.on('exit', cache.save);\n\n    try {\n      data = JSON.parse(fs.readFileSync(filename));\n    } catch (err) { }\n  },\n\n  save() {\n    let content = {};\n\n    // Add information about the namespace for this cache so it's\n    // human readable.\n    data['_namespace'] = namespace;\n\n    try {\n      content = JSON.stringify(data, null, '  ');\n    } catch (err) {\n      if (err.message === 'Invalid string length') {\n        err.message = 'Cache too large so it\\'s been cleared.';\n        log.error(err.stack);\n      } else {\n        throw err;\n      }\n    }\n\n    fs.outputFileSync(filename, content);\n  },\n\n  clear() {\n    data = {};\n  },\n\n  put(cacheKey, cacheValue) {\n    data[cacheKey] = cacheValue;\n  },\n\n  get(cacheKey) {\n    return data[cacheKey];\n  },\n};\n\nexport default cache;\n",
    "static": true,
    "longname": "lib/cache.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "data",
    "memberof": "lib/cache.js",
    "static": true,
    "longname": "lib/cache.js~data",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/cache.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "function",
    "name": "createFilename",
    "memberof": "lib/cache.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/cache.js~createFilename",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/cache.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "name",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "name": "filename",
    "memberof": "lib/cache.js",
    "static": true,
    "longname": "lib/cache.js~filename",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/cache.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "variable",
    "name": "cache",
    "memberof": "lib/cache.js",
    "static": true,
    "longname": "lib/cache.js~cache",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/cache.js",
    "importStyle": "cache",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"setNamespace\": function, \"load\": function, \"save\": function, \"clear\": function, \"put\": function, \"get\": function}"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "file",
    "name": "lib/checksum.js",
    "content": "import crypto from 'crypto';\n\n/**\n * Create checksum hash of input.\n * @example\n *   '50de70409f11f87b430f248daaa94d67'\n * @param {string} input Input to hash.\n * @return {string}\n */\nexport default function createChecksum(input) {\n  return crypto.createHash('md5').update(input, 'utf8').digest('hex');\n}\n",
    "static": true,
    "longname": "lib/checksum.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 9,
    "kind": "function",
    "name": "createChecksum",
    "memberof": "lib/checksum.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/checksum.js~createChecksum",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/checksum.js",
    "importStyle": "createChecksum",
    "description": "Create checksum hash of input.",
    "examples": [
      "  '50de70409f11f87b430f248daaa94d67'"
    ],
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "Input to hash."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 10,
    "kind": "file",
    "name": "lib/cli/build.js",
    "content": "import log from '../log';\nimport Reptar from '../index';\n\nexport default async function build(options) {\n  const id = log.startActivity('building\\t\\t\\t\\t');\n  process.stdout.write('\\n');\n\n  const reptar = new Reptar(options);\n  await reptar.update();\n  await reptar.build();\n\n  process.stdout.write('\\n');\n  log.endActivity(id);\n\n  process.exit(0);\n}\n",
    "static": true,
    "longname": "lib/cli/build.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 11,
    "kind": "function",
    "name": "build",
    "memberof": "lib/cli/build.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/cli/build.js~build",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/cli/build.js",
    "importStyle": "build",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 12,
    "kind": "file",
    "name": "lib/cli/clean.js",
    "content": "import Reptar from '../index';\n\nexport default async function () {\n  const reptar = new Reptar();\n  await reptar.update();\n  await reptar.cleanDestination();\n  process.exit(0);\n}\n",
    "static": true,
    "longname": "lib/cli/clean.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 13,
    "kind": "function",
    "name": "clean",
    "memberof": "lib/cli/clean.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/cli/clean.js~clean",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/cli/clean.js",
    "importStyle": "clean",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 14,
    "kind": "file",
    "name": "lib/cli/init.js",
    "content": "import fs from 'fs-extra';\nimport path from 'path';\nimport inquirer from 'inquirer';\nimport spawn from 'cross-spawn';\nimport log from '../log';\n\nexport default async function init() {\n  log.info('Init a new Reptar site');\n\n  const destination = process.cwd();\n\n  const questions = [\n    {\n      type: 'confirm',\n      name: 'destinationOk',\n      message: `OK to create new Reptar site at path: ${destination}?`,\n      default: true,\n    },\n  ];\n\n  const answers = await inquirer.prompt(questions);\n\n  if (answers.destinationOk === false) {\n    process.exit(1);\n  }\n\n  // Create directory.\n  try {\n    fs.ensureDirSync(destination);\n  } catch (e) {\n    log.error(`Unable to create folder at ${destination}.`);\n    log.error(e);\n  }\n\n  const scaffoldPath = path.join(\n    __dirname,\n    '..',\n    '..',\n    'static',\n    'scaffold'\n  );\n\n  // Copy scaffold files.\n  try {\n    fs.copySync(scaffoldPath, destination);\n  } catch (e) {\n    log.error('Unable to create scaffold files.');\n    log.error(e);\n  }\n\n  function runCmd(cmd, args) {\n    return spawn.sync(cmd, args, {\n      stdio: 'inherit',\n      cwd: destination,\n    });\n  }\n\n  const npmPackages = [\n    'reptar-excerpt',\n    'reptar-html-minifier',\n    'normalize.css',\n  ];\n\n  log.info(`Installing npm packages: ${npmPackages.join(', ')}`);\n\n  runCmd('npm', ['init', '--yes']);\n\n  runCmd('npm', ['install', '--save'].concat(npmPackages));\n\n  log.info(`New Reptar site created at ${destination}`);\n  log.info('Now build your site! Run: `reptar build` ');\n  log.info('Now see your site! Run: `reptar serve`');\n}\n",
    "static": true,
    "longname": "lib/cli/init.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 15,
    "kind": "function",
    "name": "init",
    "memberof": "lib/cli/init.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/cli/init.js~init",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/cli/init.js",
    "importStyle": "init",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 16,
    "kind": "file",
    "name": "lib/cli/new.js",
    "content": "import _ from 'lodash';\nimport path from 'path';\nimport moment from 'moment';\nimport fs from 'fs-extra';\nimport inquirer from 'inquirer';\nimport Config from '../config';\nimport Url from '../url';\nimport log from '../log';\n\nconst newTypes = {\n  file: {\n    prompts: [\n      {\n        name: 'title',\n        type: 'input',\n        message: 'Title of new file.',\n        validate: input => !_.isNil(input),\n      },\n    ],\n    template: data => (\n`---\ntitle: ${data.title}\ndate: ${data.date}\n---\n`\n    ),\n  },\n};\n\nexport default async function (args) {\n  const newTypeKey = args._[1];\n  const newType = newTypes[newTypeKey];\n  if (_.isNil(newType)) {\n    log.error(`Unknown type: '${newTypeKey}'.`);\n    log.error(\n      `Types supported: ${Object.keys(newTypes).join(',')}`\n    );\n    log.error('Use via: reptar new <type>');\n    process.exit(0);\n  }\n\n  log.info(`Create new \"${newTypeKey}\"`);\n\n  const config = new Config();\n  config.update();\n\n  const data = await inquirer.prompt(newType.prompts);\n\n  // Set date to now.\n  data.date = moment().format('YYYY-MM-DD');\n\n  const filePath = Url.interpolatePermalink(\n    config.get('newFilePermalink'),\n    data\n  ).toLowerCase();\n  const fileContent = newType.template(data);\n  const absolutePath = path.join(config.get('path.source'), filePath);\n\n  // Write file!\n  fs.outputFileSync(absolutePath, fileContent, 'utf8');\n\n  log.info(`New ${newTypeKey} created at ${absolutePath}`);\n}\n",
    "static": true,
    "longname": "lib/cli/new.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "name": "newTypes",
    "memberof": "lib/cli/new.js",
    "static": true,
    "longname": "lib/cli/new.js~newTypes",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/cli/new.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"file\": *}"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "function",
    "name": "new",
    "memberof": "lib/cli/new.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/cli/new.js~new",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/cli/new.js",
    "importStyle": "new",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 19,
    "kind": "file",
    "name": "lib/cli/serve.js",
    "content": "import Hapi from 'hapi';\nimport inert from 'inert';\nimport path from 'path';\nimport Config from '../config';\nimport log from '../log';\n\nexport default async function serve() {\n  const config = new Config();\n  config.update();\n\n  const server = new Hapi.Server({\n    connections: {\n      routes: {\n        files: {\n          relativeTo: config.get('path.destination'),\n        },\n      },\n    },\n  });\n\n  server.connection({\n    host: config.get('server.host'),\n    port: config.get('server.port'),\n  });\n\n  await server.register([\n    inert,\n  ]);\n\n  server.route({\n    method: 'GET',\n    path: path.posix.join('/', config.get('server.baseurl'), '/{param*}'),\n    handler: {\n      directory: {\n        path: '.',\n        redirectToSlash: true,\n        index: true,\n      },\n    },\n  });\n\n  server.start();\n\n  log.info(\n    'Server running at:',\n    path.join(server.info.uri, config.get('server.baseurl'))\n  );\n}\n",
    "static": true,
    "longname": "lib/cli/serve.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 20,
    "kind": "function",
    "name": "serve",
    "memberof": "lib/cli/serve.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/cli/serve.js~serve",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/cli/serve.js",
    "importStyle": "serve",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 21,
    "kind": "file",
    "name": "lib/cli/watch.js",
    "content": "import activity from 'activity-logger';\nimport Server from '../server/server';\nimport log from '../log';\nimport Reptar from '../index';\n\nexport default async function watch(options = {}) {\n  const startActivity = activity.start('Starting watch.\\t\\t\\t\\t');\n\n  const reptar = new Reptar({\n    // Turn off caching of templates.\n    noTemplateCache: true,\n    showSpinner: false,\n    ...options,\n  });\n\n  await reptar.update();\n\n  const server = new Server(reptar);\n  await server.start();\n\n  activity.end(startActivity);\n\n  process.stdout.write('\\n');\n  log.info('Server running at:', server.server.info.uri);\n}\n",
    "static": true,
    "longname": "lib/cli/watch.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 22,
    "kind": "function",
    "name": "watch",
    "memberof": "lib/cli/watch.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/cli/watch.js~watch",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/cli/watch.js",
    "importStyle": "watch",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 23,
    "kind": "file",
    "name": "lib/collection/base.js",
    "content": "import Promise from 'bluebird';\nimport path from 'path';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nimport CollectionPage from './page';\n\nexport default class CollectionBase {\n  /**\n   * Create a Collection instance.\n   * @param {string} name The name of the collection.\n   * @param {Object} collectionConfig Config object from config file.\n   * @param {Config} config Config instance.\n   * @param {Renderer} renderer Renderer instance.\n   */\n  constructor(name, collectionConfig = {}, config, renderer) {\n    if (_.isString(name) === false || name.length === 0) {\n      throw new Error('Collection requires a name.');\n    }\n\n    /**\n     * Unique ID of this Collection, currently its given name.\n     * @type {string}\n     */\n    this.id = name;\n\n    /**\n     * The collection name. Must be unique.\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * Data accesible to templates.\n     * @type {Object}\n     */\n    this.data = {};\n\n    /**\n     * @type {Config}\n     * @protected\n     */\n    this._config = config;\n\n    /**\n     * @type {Renderer}\n     * @protected\n     */\n    this._renderer = renderer;\n\n    if (!_.isUndefined(collectionConfig.path)) {\n      /**\n       * Path where items belong within the collection.\n       * @type {string}\n       */\n      this.path = path.resolve(\n        this._config.get('path.source'),\n        collectionConfig.path\n      );\n    }\n\n    if (!_.isUndefined(collectionConfig.metadata)) {\n      /**\n       * Metadata attribute to use to find which items are within the\n       * collection.\n       * @type {string}\n       */\n      this.metadata = collectionConfig.metadata;\n    }\n\n    if (!_.isUndefined(collectionConfig.template)) {\n      /**\n        * What template to use when rendering a CollectionPage.\n       * @type {string}\n       */\n      this.template = collectionConfig.template;\n    }\n\n    if (!_.isUndefined(collectionConfig.pageSize)) {\n      if (!_.isNumber(collectionConfig.pageSize)) {\n        throw new Error('Page size must be a number');\n      }\n\n      /**\n       * Size of each CollectionPage.\n       * @type {number}\n       */\n      this.pageSize = collectionConfig.pageSize;\n    }\n\n    if (!_.isUndefined(collectionConfig.sort)) {\n      /**\n       * Sorting configuration.\n       * @type {Object}\n       */\n      this.sort = {\n        key: collectionConfig.sort.key,\n        order: collectionConfig.sort.order,\n      };\n    }\n\n    if (!_.isUndefined(collectionConfig.permalink)) {\n      const permalinkConfig = collectionConfig.permalink;\n\n      /**\n       * Permalink information.\n       * @type {Object}\n       */\n      this.permalink = {};\n\n      if (!_.isUndefined(permalinkConfig.index)) {\n        /**\n         * Permalink index configuration.\n         * @type {string}\n         */\n        this.permalink.index = permalinkConfig.index;\n      }\n\n      if (!_.isUndefined(permalinkConfig.page)) {\n        /**\n         * Permalink page configuration.\n         * @type {string}\n         */\n        this.permalink.page = permalinkConfig.page;\n      }\n    }\n\n    /**\n     * Array of CollectionPage objects.\n     * @type {Array.<CollectionPage>}\n     */\n    this.pages = [];\n  }\n\n  /**\n   * Whether a File is filtered by the configured filters.\n   * @param {File} file File object.\n   * @return {boolean} Whether this file should be filtered out.\n   */\n  isFiltered(file) { // eslint-disable-line class-methods-use-this\n    return file.filtered === true;\n  }\n\n  /**\n   * Populate the Collection's files via file system path or metadata attribute.\n   * @param {Object.<string, Files>} files All Files.\n   * @param {Object.<string, CollectionBase>} collections Object of all\n   *   collections.\n   * @return {CollectionBase}\n   */\n  populate(files = {}, collections = {}) { // eslint-disable-line no-unused-vars\n    return this;\n  }\n\n  /**\n   * Create a CollectionPage instance.\n   * @param {number} index Index of the page.\n   * @param {string?} pageIdArg Optional custom ID for a CollectionPage.\n   * @return {CollectionPage} CollectionPage instance.\n   */\n  createPage(index, pageIdArg) {\n    if (!_.isNumber(index)) {\n      throw new Error('Must give an index when creating a CollectionPage.');\n    }\n\n    const pageId = _.isUndefined(pageIdArg) ? this.id : pageIdArg;\n\n    const page = new CollectionPage(pageId, index, {\n      config: this._config,\n      renderer: this._renderer,\n    });\n\n    page.permalink = index === 0 ?\n      this.permalink.index :\n      this.permalink.page;\n\n    // Give each CollectionPage what template it should use.\n    page.data.template = this.template;\n\n    return page;\n  }\n\n  _linkPages(shouldLinkPrevious, shouldLinkNext) {\n    if (this.pages.length > 0) {\n      this.pages.forEach((collectionPage, index) => {\n        const previous = this.pages[index - 1];\n\n        if (shouldLinkPrevious(previous, collectionPage)) {\n          collectionPage.setPreviousPage(previous);\n        }\n\n        const next = this.pages[index + 1];\n\n        if (shouldLinkNext(next, collectionPage)) {\n          collectionPage.setNextPage(next);\n        }\n      });\n    }\n\n    // Add data to template accessible object.\n    this.data.pages = this.pages.map(page => page.data);\n\n    return this;\n  }\n\n  /**\n   * Writes every page in this collection.\n   * @param {Object} siteData Site wide data that is shared on all rendered\n   *  pages.\n   * @return {Promise}\n   */\n  write(siteData) {\n    let pagePromises = [];\n\n    // Write CollectionPage files.\n    if (this.pages.length) {\n      pagePromises = this.pages.map(collectionPage =>\n        collectionPage.write(siteData)\n      );\n    }\n\n    return Promise.all(pagePromises);\n  }\n\n\n  /**\n   * Sorts files according to a sort config object.\n   * @param {Array.<File>} files Array of File objects.\n   * @param {Object} sortConfig Sort config object.\n   * @param {string?} dateFormat Optional. File date format from config.\n   * @return {Array.<file>} Sorted files.\n   */\n  static sortFiles(files, sortConfig, dateFormat) {\n    const validSortConfig = sortConfig && sortConfig.key;\n    const hasFiles = files && files.length > 0;\n\n    if (validSortConfig && hasFiles) {\n      // Convert a File's date value to a time stamp for sorting.\n      const getFileDateTime = file =>\n         moment(file.data[sortConfig.key], dateFormat)\n          .toDate()\n          .getTime();\n\n      // Quick sniff to see if the sort value is a date object.\n      const sortIsDate = getFileDateTime(files[0]) > 0;\n\n      // eslint-disable-next-line no-param-reassign\n      files = _.sortBy(files, sortIsDate ?\n        getFileDateTime :\n        `data[${sortConfig.key}]`\n      );\n\n      if (sortConfig.order === 'descending') {\n        files.reverse();\n      }\n    }\n\n    return files;\n  }\n}\n",
    "static": true,
    "longname": "lib/collection/base.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 24,
    "kind": "class",
    "name": "CollectionBase",
    "memberof": "lib/collection/base.js",
    "static": true,
    "longname": "lib/collection/base.js~CollectionBase",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/collection/base.js",
    "importStyle": "CollectionBase",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 25,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/collection/base.js~CollectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#constructor",
    "access": null,
    "description": "Create a Collection instance.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the collection."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "collectionConfig",
        "description": "Config object from config file."
      },
      {
        "nullable": null,
        "types": [
          "Config"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "Config instance."
      },
      {
        "nullable": null,
        "types": [
          "Renderer"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer",
        "description": "Renderer instance."
      }
    ]
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "id",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#id",
    "access": null,
    "description": "Unique ID of this Collection, currently its given name.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 27,
    "kind": "member",
    "name": "name",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#name",
    "access": null,
    "description": "The collection name. Must be unique.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "name": "data",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#data",
    "access": null,
    "description": "Data accesible to templates.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 29,
    "kind": "member",
    "name": "_config",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#_config",
    "access": "protected",
    "description": "",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Config"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 30,
    "kind": "member",
    "name": "_renderer",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#_renderer",
    "access": "protected",
    "description": "",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 31,
    "kind": "member",
    "name": "path",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#path",
    "access": null,
    "description": "Path where items belong within the collection.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 32,
    "kind": "member",
    "name": "metadata",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#metadata",
    "access": null,
    "description": "Metadata attribute to use to find which items are within the\ncollection.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 33,
    "kind": "member",
    "name": "template",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#template",
    "access": null,
    "description": "What template to use when rendering a CollectionPage.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "name": "pageSize",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#pageSize",
    "access": null,
    "description": "Size of each CollectionPage.",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 35,
    "kind": "member",
    "name": "sort",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#sort",
    "access": null,
    "description": "Sorting configuration.",
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 36,
    "kind": "member",
    "name": "permalink",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#permalink",
    "access": null,
    "description": "Permalink information.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 37,
    "kind": "member",
    "name": "pages",
    "memberof": "lib/collection/base.js~CollectionBase",
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#pages",
    "access": null,
    "description": "Array of CollectionPage objects.",
    "lineNumber": 132,
    "type": {
      "nullable": null,
      "types": [
        "Array.<CollectionPage>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 38,
    "kind": "method",
    "name": "isFiltered",
    "memberof": "lib/collection/base.js~CollectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#isFiltered",
    "access": null,
    "description": "Whether a File is filtered by the configured filters.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "File object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether this file should be filtered out."
    }
  },
  {
    "__docId__": 39,
    "kind": "method",
    "name": "populate",
    "memberof": "lib/collection/base.js~CollectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#populate",
    "access": null,
    "description": "Populate the Collection's files via file system path or metadata attribute.",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object.<string, Files>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "All Files."
      },
      {
        "nullable": null,
        "types": [
          "Object.<string, CollectionBase>"
        ],
        "spread": false,
        "optional": false,
        "name": "collections",
        "description": "Object of all\n  collections."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CollectionBase"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 40,
    "kind": "method",
    "name": "createPage",
    "memberof": "lib/collection/base.js~CollectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#createPage",
    "access": null,
    "description": "Create a CollectionPage instance.",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Index of the page."
      },
      {
        "nullable": null,
        "types": [
          "string?"
        ],
        "spread": false,
        "optional": false,
        "name": "pageIdArg",
        "description": "Optional custom ID for a CollectionPage."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CollectionPage"
      ],
      "spread": false,
      "description": "CollectionPage instance."
    }
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "_linkPages",
    "memberof": "lib/collection/base.js~CollectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#_linkPages",
    "access": null,
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "shouldLinkPrevious",
        "types": [
          "*"
        ]
      },
      {
        "name": "shouldLinkNext",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "write",
    "memberof": "lib/collection/base.js~CollectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/base.js~CollectionBase#write",
    "access": null,
    "description": "Writes every page in this collection.",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "siteData",
        "description": "Site wide data that is shared on all rendered\n pages."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "sortFiles",
    "memberof": "lib/collection/base.js~CollectionBase",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/collection/base.js~CollectionBase.sortFiles",
    "access": null,
    "description": "Sorts files according to a sort config object.",
    "lineNumber": 233,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<File>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "Array of File objects."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sortConfig",
        "description": "Sort config object."
      },
      {
        "nullable": null,
        "types": [
          "string?"
        ],
        "spread": false,
        "optional": false,
        "name": "dateFormat",
        "description": "Optional. File date format from config."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<file>"
      ],
      "spread": false,
      "description": "Sorted files."
    }
  },
  {
    "__docId__": 44,
    "kind": "file",
    "name": "lib/collection/index.js",
    "content": "import _ from 'lodash';\nimport FileSystemCollection from './type/file-system';\nimport MetadataCollection from './type/metadata';\n\nexport function createCollection(name, collectionConfig, config, renderer) {\n  if (collectionConfig.metadata) {\n    return new MetadataCollection(name, collectionConfig, config, renderer);\n  }\n\n  return new FileSystemCollection(name, collectionConfig, config, renderer);\n}\n\nexport default function addCollections(reptar) {\n  const { destination } = reptar;\n\n  /**\n   * Mapping of Collection IDs to the instance.\n   * @type {Object.<string, Collection>}\n   */\n  const collections = Object.create(null);\n\n  // Expose collections.\n  reptar.metadata.set('collections', Object.create(null));\n\n  // Update our collection configs.\n  _.forEach(\n    reptar.config.get('collections'),\n    (collectionConfig, collectionName) => {\n      const instance = createCollection(\n        collectionName,\n        collectionConfig,\n        reptar.config,\n        reptar.renderer\n      );\n\n      collections[instance.id] = instance;\n    }\n  );\n\n  // Populate every collection with its files.\n  _.each(collections, (collection) => {\n    collection.populate(reptar.fileSystem.files, collections);\n\n    // Add collection data to our global data object.\n    reptar.metadata.set(`collections.${collection.name}`, collection.data);\n\n    _.forEach(collection.pages, (page) => {\n      destination[page.destination] = page;\n    });\n  });\n\n  // Expose collections.\n  reptar.collections = collections;\n}\n",
    "static": true,
    "longname": "lib/collection/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 45,
    "kind": "function",
    "name": "createCollection",
    "memberof": "lib/collection/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/collection/index.js~createCollection",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/collection/index.js",
    "importStyle": "{createCollection}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "collectionConfig",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "function",
    "name": "addCollections",
    "memberof": "lib/collection/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/collection/index.js~addCollections",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/collection/index.js",
    "importStyle": "addCollections",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "reptar",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 47,
    "kind": "file",
    "name": "lib/collection/page.js",
    "content": "import _ from 'lodash';\nimport path from 'path';\nimport Promise from 'bluebird';\nimport fs from 'fs-extra';\nimport cache from '../cache';\nimport createChecksum from '../checksum';\nimport Url from '../url';\n\nexport default class CollectionPage {\n  /**\n   * Constructor for a CollectionPage.\n   * @param {string} collectionId Collection ID.\n   * @param {number} pageIndex Page index.\n   * @param {Object} options Additional options.\n   * @param {Config} options.config Config instance.\n   * @param {Renderer} options.renderer Renderer instance.\n   * @constructor\n   */\n  constructor(collectionId, pageIndex, { config, renderer } = {}) {\n    if (_.isUndefined(collectionId)) {\n      throw new Error('CollectionPage requires a collection ID as a string.');\n    }\n\n    if (!_.isNumber(pageIndex)) {\n      throw new Error('CollectionPage requires a page index.');\n    }\n\n    /**\n     * Unique ID of this CollectionPage. Comprised of its Collection's ID and\n     * its page index.\n     * @type {string}\n     */\n    this.id = `${collectionId}:${pageIndex}`;\n\n    /**\n     * Collection ID this page is a part of.\n     * @type {string}\n     */\n    this.collectionId = collectionId;\n\n    /**\n     * @type {Config}\n     * @private\n     */\n    this._config = config;\n\n    /**\n     * @type {Renderer}\n     * @private\n     */\n    this._renderer = renderer;\n\n    /**\n     * Page index, 0-indexed.\n     * @type {number}\n     */\n    this.index = pageIndex;\n\n    /**\n     * An array of Files that are in this page.\n     * @type {Array.<string>}\n     */\n    this.files = [];\n\n    /**\n     * The permalink template.\n     * @type {string}\n     */\n    this.permalink = '';\n\n    /**\n     * Data accessible from template.\n     * @type {Object}\n     */\n    this.data = Object.create(null);\n\n    // Current page number, 1-indexed for display purposes.\n    this.data.page = this.index + 1;\n  }\n\n  setData(data = {}) {\n    // Current page number.\n    if (!_.isUndefined(data.page) && !_.isNumber(data.page)) {\n      throw new Error('CollectionPage requires \\'page\\' as a number.');\n    }\n\n    // How many pages in the collection.\n    if (!_.isUndefined(data.total_pages) && !_.isNumber(data.total_pages)) {\n      throw new Error('CollectionPage requires \\'total_pages\\' as a number.');\n    }\n\n    // Posts displayed per page.\n    if (!_.isUndefined(data.per_page) && !_.isNumber(data.per_page)) {\n      throw new Error('CollectionPage requires \\'per_page\\' as a number.');\n    }\n\n    // Total number of posts.\n    if (!_.isUndefined(data.total) && !_.isNumber(data.total)) {\n      throw new Error('CollectionPage requires \\'total\\' as a number.');\n    }\n\n    // Update content that's accessible from template.\n    Object.assign(this.data, data);\n\n    this._calculateDestination();\n  }\n\n  /**\n   * Set what files belong in this page.\n   * @param {Array.<File>} files Array of files.\n   */\n  setFiles(files) {\n    if (!_.isUndefined(files) && !_.isArray(files)) {\n      throw new Error('Files must be an array.');\n    }\n\n    // Save Files in this Page.\n    this.files = files;\n\n    /**\n     * Array of File data in this page.\n     * @type {Array.<File>}\n     */\n    this.data.files = files.map(file => file.data);\n  }\n\n  /**\n   * Generate the checksum of this CollectionPage. It's derived from the Files\n   * that exist in this collection.\n   * @return {string}\n   */\n  getChecksum() {\n    const fileChecksums = this.files.map(file => file.checksum);\n\n    const checksum = createChecksum(fileChecksums.join(''));\n\n    return checksum;\n  }\n\n  /**\n   * Link this page with its previus page, for use in templates.\n   * @param {CollectionPage} previous CollectionPage instance.\n   */\n  setPreviousPage(previous) {\n    Object.assign(this.data, {\n      // Previous page number. 0 if the current page is the first.\n      prev: previous.data.page,\n\n      // The URL of previous page. '' if the current page is the first.\n      prev_link: previous.data.url,\n    });\n  }\n\n  /**\n  * Link this page with its next page, for use in templates.\n  * @param {CollectionPage} next CollectionPage instance.\n   */\n  setNextPage(next) {\n    Object.assign(this.data, {\n      // Next page number. 0 if the current page is the last.\n      next: next.data.page,\n\n      // The URL of next page. '' if the current page is the last.\n      next_link: next.data.url,\n    });\n  }\n\n  /**\n   * Calculate both relative and absolute destination path for where to write\n   * the file.\n   * @private\n   */\n  _calculateDestination() {\n    // Calculate the permalink value.\n    const relativeDestination = Url.interpolatePermalink(\n      this.permalink,\n      this.data\n    );\n\n    /**\n     * Absolute destination path.\n     * @type {string} destination Absolute path to file.\n     */\n    this.destination = Url.makeUrlFileSystemSafe(\n      relativeDestination\n    );\n\n    /**\n     * The URL without the domain, but with a leading slash,\n     * e.g.  /2008/12/14/my-post.html\n     * @type {string} url Relative path to file.\n     */\n    this.data.url = Url.makePretty(this.destination);\n  }\n\n  /**\n   * Update a CollectionPage's content via updating every File's content.\n   */\n  async update() {\n    await Promise.all(this.files.map(file => file.update()));\n\n    this.data.files = this.files.map(file => file.data);\n  }\n\n  render(globalData) {\n    const templateData = {\n      ...globalData,\n      pagination: this.data,\n    };\n\n    const template = this.data.template;\n\n    if (_.isNil(template)) {\n      let errMsg = 'CollectionPage: No template given.\\nData object: ';\n      errMsg += JSON.stringify(this.data);\n      throw new Error(errMsg);\n    }\n\n    return this._renderer.renderTemplate(template, templateData);\n  }\n\n  /**\n   * Writes a given CollectionPage to the file system.\n   * @param {Object} globalData Site wide data.\n   */\n  async write(globalData) {\n    const checksum = this.getChecksum();\n\n    if (this._config.get('incremental') &&\n        cache.get(this.id) === checksum) {\n      return;\n    }\n\n    const content = await this.render(globalData);\n\n    const destinationPath = path.join(\n      this._config.get('path.destination'),\n      this.destination\n    );\n\n    await Promise.fromCallback((cb) => {\n      fs.outputFile(destinationPath, content, 'utf8', cb);\n    });\n\n    // Save checksum to cache for incremental builds.\n    cache.put(this.id, checksum);\n  }\n}\n",
    "static": true,
    "longname": "lib/collection/page.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 48,
    "kind": "class",
    "name": "CollectionPage",
    "memberof": "lib/collection/page.js",
    "static": true,
    "longname": "lib/collection/page.js~CollectionPage",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/collection/page.js",
    "importStyle": "CollectionPage",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 49,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/collection/page.js~CollectionPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#constructor",
    "access": null,
    "description": "Constructor for a CollectionPage.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "collectionId",
        "description": "Collection ID."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pageIndex",
        "description": "Page index."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Additional options."
      },
      {
        "nullable": null,
        "types": [
          "Config"
        ],
        "spread": false,
        "optional": false,
        "name": "options.config",
        "description": "Config instance."
      },
      {
        "nullable": null,
        "types": [
          "Renderer"
        ],
        "spread": false,
        "optional": false,
        "name": "options.renderer",
        "description": "Renderer instance."
      }
    ]
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "id",
    "memberof": "lib/collection/page.js~CollectionPage",
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#id",
    "access": null,
    "description": "Unique ID of this CollectionPage. Comprised of its Collection's ID and\nits page index.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "collectionId",
    "memberof": "lib/collection/page.js~CollectionPage",
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#collectionId",
    "access": null,
    "description": "Collection ID this page is a part of.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_config",
    "memberof": "lib/collection/page.js~CollectionPage",
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#_config",
    "access": "private",
    "description": "",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Config"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_renderer",
    "memberof": "lib/collection/page.js~CollectionPage",
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#_renderer",
    "access": "private",
    "description": "",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "index",
    "memberof": "lib/collection/page.js~CollectionPage",
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#index",
    "access": null,
    "description": "Page index, 0-indexed.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "files",
    "memberof": "lib/collection/page.js~CollectionPage",
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#files",
    "access": null,
    "description": "An array of Files that are in this page.",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "Array.<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "permalink",
    "memberof": "lib/collection/page.js~CollectionPage",
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#permalink",
    "access": null,
    "description": "The permalink template.",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "data",
    "memberof": "lib/collection/page.js~CollectionPage",
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#data",
    "access": null,
    "description": "Data accessible from template.",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "setData",
    "memberof": "lib/collection/page.js~CollectionPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#setData",
    "access": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "data",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "setFiles",
    "memberof": "lib/collection/page.js~CollectionPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#setFiles",
    "access": null,
    "description": "Set what files belong in this page.",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<File>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "Array of files."
      }
    ]
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "files",
    "memberof": "lib/collection/page.js~CollectionPage",
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#files",
    "access": null,
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "getChecksum",
    "memberof": "lib/collection/page.js~CollectionPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#getChecksum",
    "access": null,
    "description": "Generate the checksum of this CollectionPage. It's derived from the Files\nthat exist in this collection.",
    "lineNumber": 132,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "setPreviousPage",
    "memberof": "lib/collection/page.js~CollectionPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#setPreviousPage",
    "access": null,
    "description": "Link this page with its previus page, for use in templates.",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "CollectionPage"
        ],
        "spread": false,
        "optional": false,
        "name": "previous",
        "description": "CollectionPage instance."
      }
    ]
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "setNextPage",
    "memberof": "lib/collection/page.js~CollectionPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#setNextPage",
    "access": null,
    "description": "Link this page with its next page, for use in templates.",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "CollectionPage"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "CollectionPage instance."
      }
    ]
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "_calculateDestination",
    "memberof": "lib/collection/page.js~CollectionPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#_calculateDestination",
    "access": "private",
    "description": "Calculate both relative and absolute destination path for where to write\nthe file.",
    "lineNumber": 173,
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "destination",
    "memberof": "lib/collection/page.js~CollectionPage",
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#destination",
    "access": null,
    "description": "Absolute destination path.",
    "lineNumber": 184,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "update",
    "memberof": "lib/collection/page.js~CollectionPage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#update",
    "access": null,
    "description": "Update a CollectionPage's content via updating every File's content.",
    "lineNumber": 199,
    "params": []
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "render",
    "memberof": "lib/collection/page.js~CollectionPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#render",
    "access": null,
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "globalData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "write",
    "memberof": "lib/collection/page.js~CollectionPage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/collection/page.js~CollectionPage#write",
    "access": null,
    "description": "Writes a given CollectionPage to the file system.",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "globalData",
        "description": "Site wide data."
      }
    ]
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "lib/collection/type/file-system.js",
    "content": "import _ from 'lodash';\n\nimport CollectionBase from '../base';\n\n/**\n * A collection that derives its content from the location of a file in the\n * file system.\n */\nexport default class FileSystemCollection extends CollectionBase {\n  constructor(name, collectionConfig, config, renderer) {\n    super(name, collectionConfig, config, renderer);\n\n    /**\n     * Array of file id's that belong in this collection.\n     * @type {Object.<string, File>}\n     */\n    this.files = {};\n\n    /**\n     * Array of paths to exclude from including in this collection.\n     * @type {Array.<string>}\n     */\n    this.excludePaths = [];\n  }\n\n  /**\n   * Set what paths to exclude from including in this collection.\n   * @param {Object.<string, CollectionBase>} collections Array of Collections.\n   */\n  _setExcludePaths(collections) {\n    this.excludePaths = _.reduce(collections, (allPaths, collection) => {\n      // Only include a collection path if it exists and isn't the app source,\n      // and isn't this collection's path.\n      if (collection.path &&\n          collection.path !== this.path &&\n          collection.path !== this._config.get('path.source')) {\n        allPaths.push(collection.path);\n      }\n\n      return allPaths;\n    }, []);\n  }\n\n  /**\n   * Is this file's path included in this collection's excludePaths.\n   * @param {File} file File object.\n   * @return {boolean} true if the file's path includes an exclude path.\n   * @private\n   */\n  _isFileExcluded(file) {\n    return this.excludePaths.some(path => file.path.includes(path));\n  }\n\n  /**\n   * Checks to see if this file passes all requirements to be considered a part\n   * of this collection.\n   * @param {File} file File object.\n   * @return {boolean} true if the file meets all requirements.\n   */\n  _isFileInCollection(file) {\n    return file.path.includes(this.path) &&\n      !this._isFileExcluded(file) &&\n      !this.isFiltered(file);\n  }\n\n  /**\n   * Add a file to the collection.\n   * @param {File} file File object.\n   * @return {boolean} True if the file was added to the collection.\n   */\n  addFile(file) {\n    if (!this._isFileInCollection(file)) {\n      return false;\n    }\n\n    // Add file.\n    this.files[file.id] = file;\n\n    // Add data to template accessible object.\n    this.data.files.push(file.data);\n\n    return true;\n  }\n\n  /**\n   * Populate the Collection's files via file system path or metadata attribute.\n   * @param {Object.<string, Files>} files All Files.\n   * @param {?Object.<string, CollectionBase>} collections Object of all\n   *   collections.\n   * @return {Collection}\n   */\n  populate(files, collections) {\n    if (!_.isUndefined(collections)) {\n      this._setExcludePaths(collections);\n    }\n\n    // Add data to template accessible object.\n    this.data.files = [];\n\n    _.each(files, (file) => {\n      // Don't return value so we iterate over every file.\n      this.addFile(file);\n    });\n\n    this.createCollectionPages();\n\n    return this;\n  }\n\n  /**\n   * Create CollectionPage objects for our Collection.\n   * @return {boolean} True if we successfully created CollectionPages.\n   */\n  createCollectionPages() {\n    // If no permalink paths are set then we don't render a CollectionPage.\n    if (!(this.permalink && this.permalink.index && this.permalink.page)) {\n      return false;\n    }\n\n    if (!_.isEmpty(this.files)) {\n      this.pages = [];\n\n      // Sort files according to config.\n      const files = CollectionBase.sortFiles(\n        _.values(this.files),\n        this.sort,\n        this._config.get('file.dateFormat')\n      );\n\n      // Break up our array of files into arrays that match our defined\n      // pagination size.\n      const pages = _.chunk(files, this.pageSize);\n\n      pages.forEach((pageFiles, index) => {\n        const collectionPage = this.createPage(index);\n\n        // Files in the page.\n        collectionPage.setFiles(pageFiles);\n\n        // Update CollectionPage template data.\n        collectionPage.setData({\n          // How many pages in the collection.\n          total_pages: pages.length,\n\n          // Posts displayed per page.\n          per_page: this.pageSize,\n\n          // Total number of posts.\n          total: files.length,\n        });\n\n        // Add to our array of pages.\n        this.pages.push(collectionPage);\n      });\n    }\n\n    this._linkPages(\n      // ShouldLinkPrevious\n      previous => previous,\n      // ShouldLinkNext\n      next => next\n    );\n\n    return true;\n  }\n}\n",
    "static": true,
    "longname": "lib/collection/type/file-system.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "FileSystemCollection",
    "memberof": "lib/collection/type/file-system.js",
    "static": true,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/collection/type/file-system.js",
    "importStyle": "FileSystemCollection",
    "description": "A collection that derives its content from the location of a file in the\nfile system.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "lib/collection/base.js~CollectionBase"
    ]
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/collection/type/file-system.js~FileSystemCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "collectionConfig",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderer",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "files",
    "memberof": "lib/collection/type/file-system.js~FileSystemCollection",
    "static": false,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection#files",
    "access": null,
    "description": "Array of file id's that belong in this collection.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, File>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "excludePaths",
    "memberof": "lib/collection/type/file-system.js~FileSystemCollection",
    "static": false,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection#excludePaths",
    "access": null,
    "description": "Array of paths to exclude from including in this collection.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Array.<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "_setExcludePaths",
    "memberof": "lib/collection/type/file-system.js~FileSystemCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection#_setExcludePaths",
    "access": null,
    "description": "Set what paths to exclude from including in this collection.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object.<string, CollectionBase>"
        ],
        "spread": false,
        "optional": false,
        "name": "collections",
        "description": "Array of Collections."
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "excludePaths",
    "memberof": "lib/collection/type/file-system.js~FileSystemCollection",
    "static": false,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection#excludePaths",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_isFileExcluded",
    "memberof": "lib/collection/type/file-system.js~FileSystemCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection#_isFileExcluded",
    "access": "private",
    "description": "Is this file's path included in this collection's excludePaths.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "File object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the file's path includes an exclude path."
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "_isFileInCollection",
    "memberof": "lib/collection/type/file-system.js~FileSystemCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection#_isFileInCollection",
    "access": null,
    "description": "Checks to see if this file passes all requirements to be considered a part\nof this collection.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "File object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the file meets all requirements."
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "addFile",
    "memberof": "lib/collection/type/file-system.js~FileSystemCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection#addFile",
    "access": null,
    "description": "Add a file to the collection.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "File object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the file was added to the collection."
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "populate",
    "memberof": "lib/collection/type/file-system.js~FileSystemCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection#populate",
    "access": null,
    "description": "Populate the Collection's files via file system path or metadata attribute.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object.<string, Files>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "All Files."
      },
      {
        "nullable": true,
        "types": [
          "Object.<string, CollectionBase>"
        ],
        "spread": false,
        "optional": false,
        "name": "collections",
        "description": "Object of all\n  collections."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "createCollectionPages",
    "memberof": "lib/collection/type/file-system.js~FileSystemCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection#createCollectionPages",
    "access": null,
    "description": "Create CollectionPage objects for our Collection.",
    "lineNumber": 114,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if we successfully created CollectionPages."
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "pages",
    "memberof": "lib/collection/type/file-system.js~FileSystemCollection",
    "static": false,
    "longname": "lib/collection/type/file-system.js~FileSystemCollection#pages",
    "access": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "lib/collection/type/metadata.js",
    "content": "import _ from 'lodash';\n\nimport Url from '../../url';\nimport CollectionBase from '../base';\n\n/**\n * A collection that derives its content from a match in a files yaml\n * frontmatter data.\n */\nexport default class MetadataCollection extends CollectionBase {\n  constructor(name, collectionConfig, config, renderer) {\n    super(name, collectionConfig, config, renderer);\n\n    /**\n     * Object which holds a mapping of metadata value to the files that contain\n     * the metadata property.\n     * For example with metadata of 'tags' you'd have:\n     * {\n     *  'tag-name': [file, file],\n     *  'other-tag': [file, file]\n     * }\n     * @type {Object.<string, Array.<File>>}\n     */\n    this.metadataFiles = Object.create(null);\n  }\n\n  /**\n   * Checks to see if this file passes all requirements to be considered a part\n   * of this collection.\n   * @param {File} file File object.\n   * @return {boolean} true if the file meets all requirements.\n   */\n  _isFileInCollection(file) {\n    return !_.isUndefined(file.data[this.metadata]) && !this.isFiltered(file);\n  }\n\n  /**\n   * Add a file to the collection.\n   * @param {File} file File object.\n   * @return {boolean} True if the file was added to the collection.\n   */\n  addFile(file) {\n    if (!this._isFileInCollection(file)) {\n      return false;\n    }\n\n    let metadataValues = file.data[this.metadata];\n    if (!Array.isArray(metadataValues)) {\n      metadataValues = [metadataValues];\n    }\n\n    metadataValues.forEach((rawValue) => {\n      // Slugify each value to make sure there's no collisions when we write\n      // CollectionPages to disk. This prevents `open source` and `open-source`\n      // from being in two different keys but both writing to the same\n      // file-system destination.\n      const value = _.isString(rawValue) ? Url.slug(rawValue) : rawValue;\n      this.metadataFiles[value] = this.metadataFiles[value] || [];\n      this.metadataFiles[value].push(file);\n\n      // Add data to template accessible object.\n      this.data.metadata[value] = this.data.metadata[value] || [];\n      this.data.metadata[value].push(file.data);\n    });\n\n    return true;\n  }\n\n  /**\n   * Populate the Collection's files via file system path or metadata attribute.\n   * @param {Object.<string, Files>} files Object of files.\n   * @return {Collection}\n   */\n  populate(files) {\n    // Create metadata files.\n    this.metadataFiles = {};\n\n    // Initialize template data.\n    this.data.metadata = {};\n\n    // Store files that are in our collection.\n    _.each(files, (file) => {\n      // Don't return value so we iterate over every file.\n      this.addFile(file);\n    });\n\n    this.createCollectionPages();\n\n    return this;\n  }\n\n  /**\n   * Create CollectionPage objects for our Collection.\n   * @return {boolean} True if we successfully created CollectionPages.\n   * @private\n   */\n  createCollectionPages() {\n    // If no permalink paths are set then we don't render a CollectionPage.\n    if (!(this.permalink && this.permalink.index && this.permalink.page)) {\n      return false;\n    }\n\n    if (!_.isEmpty(this.metadataFiles)) {\n      this.pages = [];\n\n      // Create CollectionPage objects to represent our pagination pages.\n      _.each(this.metadataFiles, (rawFiles, metadataKey) => {\n        // Sort files.\n        const files = CollectionBase.sortFiles(\n          rawFiles,\n          this.sort,\n          this._config.get('file.dateFormat')\n        );\n\n        // Break up our array of files into arrays that match our defined\n        // pagination size.\n        const pages = _.chunk(files, this.pageSize);\n\n        pages.forEach((pageFiles, index) => {\n          // Create CollectionPage.\n          const collectionPage = this.createPage(\n            index,\n            `${this.id}:${metadataKey}:${index}` // Custom ID.\n          );\n\n          collectionPage.setData({\n            // Extra template information.\n            metadata: metadataKey,\n\n            // How many pages in the collection.\n            total_pages: pages.length,\n\n            // Posts displayed per page\n            per_page: this.pageSize,\n\n            // Total number of posts\n            total: files.length,\n          });\n\n          // Files in the page.\n          collectionPage.setFiles(pageFiles);\n\n          // Create a map of the metadataKey to its full URL on the file object.\n          // Useful when rendering and wanting to link out to the metadata page.\n          pageFiles.forEach((file) => {\n            file.data.metadataUrls = file.data.metadataUrls || {};\n            file.data.metadataUrls[metadataKey] = collectionPage.data.url;\n          });\n\n          // Add to our array of pages.\n          this.pages.push(collectionPage);\n        });\n      });\n    }\n\n    this._linkPages(\n      // ShouldLinkPrevious\n      (previous, collectionPage) => (\n        // With metadata collections all pages aren't made in the same context.\n        // i.e. for a tag metadata collection you'll have 3 pages with metadata\n        // value of 'review', and 2 pages of value 'tutorial'. These different\n        // metadata values should not be linked.\n        previous && this.metadataFiles &&\n          previous.data.metadata === collectionPage.data.metadata\n      ),\n      // ShouldLinkNext\n      (next, collectionPage) => (\n        // With metadata collections all pages aren't made in the same context.\n        // i.e. for a tag metadata collection you'll have 3 pages with metadata\n        // value of 'review', and 2 pages of value 'tutorial'. These different\n        // metadata values should not be linked.\n        next && this.metadataFiles &&\n          next.data.metadata === collectionPage.data.metadata\n      )\n    );\n\n    return true;\n  }\n}\n",
    "static": true,
    "longname": "lib/collection/type/metadata.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "MetadataCollection",
    "memberof": "lib/collection/type/metadata.js",
    "static": true,
    "longname": "lib/collection/type/metadata.js~MetadataCollection",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/collection/type/metadata.js",
    "importStyle": "MetadataCollection",
    "description": "A collection that derives its content from a match in a files yaml\nfrontmatter data.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "lib/collection/base.js~CollectionBase"
    ]
  },
  {
    "__docId__": 84,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/collection/type/metadata.js~MetadataCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/metadata.js~MetadataCollection#constructor",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "collectionConfig",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderer",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "metadataFiles",
    "memberof": "lib/collection/type/metadata.js~MetadataCollection",
    "static": false,
    "longname": "lib/collection/type/metadata.js~MetadataCollection#metadataFiles",
    "access": null,
    "description": "Object which holds a mapping of metadata value to the files that contain\nthe metadata property.\nFor example with metadata of 'tags' you'd have:\n{\n 'tag-name': [file, file],\n 'other-tag': [file, file]\n}",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, Array.<File>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "_isFileInCollection",
    "memberof": "lib/collection/type/metadata.js~MetadataCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/metadata.js~MetadataCollection#_isFileInCollection",
    "access": null,
    "description": "Checks to see if this file passes all requirements to be considered a part\nof this collection.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "File object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the file meets all requirements."
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "addFile",
    "memberof": "lib/collection/type/metadata.js~MetadataCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/metadata.js~MetadataCollection#addFile",
    "access": null,
    "description": "Add a file to the collection.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "File object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the file was added to the collection."
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "populate",
    "memberof": "lib/collection/type/metadata.js~MetadataCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/metadata.js~MetadataCollection#populate",
    "access": null,
    "description": "Populate the Collection's files via file system path or metadata attribute.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object.<string, Files>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "Object of files."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "metadataFiles",
    "memberof": "lib/collection/type/metadata.js~MetadataCollection",
    "static": false,
    "longname": "lib/collection/type/metadata.js~MetadataCollection#metadataFiles",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "createCollectionPages",
    "memberof": "lib/collection/type/metadata.js~MetadataCollection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/collection/type/metadata.js~MetadataCollection#createCollectionPages",
    "access": "private",
    "description": "Create CollectionPage objects for our Collection.",
    "lineNumber": 97,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if we successfully created CollectionPages."
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "pages",
    "memberof": "lib/collection/type/metadata.js~MetadataCollection",
    "static": false,
    "longname": "lib/collection/type/metadata.js~MetadataCollection#pages",
    "access": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "lib/config/config-example.js",
    "content": "\nconst noopMiddleware = () => {};\n\nmodule.exports = {\n  // Site settings.\n  // This is where you can put site-wide settings.\n  // Any values placed here are globally accessible\n  // from any template context via the `site` key.\n  site: {\n    title: 'My Reptar Title',\n    email: 'your-reptar@email.com',\n    description: \"Your website's description goes here.\\n\",\n    baseurl: '', // the subpath of your site, e.g. /blog\n    url: 'http://yourdomain.com',\n  },\n  // Where things are.\n  // If you have a unique layout for your site and want to\n  // change where Reptar looks for certain files you can change\n  // them here. All files are relative to where this file is found.\n  path: {\n    source: './',\n    destination: './_site',\n    templates: './_templates',\n    data: './_data',\n  },\n  // Individual File configuration.\n  file: {\n    // What key from a File's frontmatter Reptar should use\n    // as the property to grab the URL of the file from.\n    urlKey: 'url',\n    // The format that your date values are formatted as.\n    // This is used when parsing date objects.\n    // This current format supports dates like 2016-2-28\n    // It uses moment.js under the head and its format syntax as well:\n    // http://momentjs.com/docs////displaying/format/\n    dateFormat: 'YYYY-M-D',\n    // Apply frontmatter values to a File based upon a defined scope.\n    // If the scope matches a File then the default values are applied if they\n    // are not already set.\n    defaults: [\n      {\n        // Any file in this path will have the default values applied.\n        scope: { path: './' },\n        values: { template: 'page', permalink: '/:title/' },\n      },\n      {\n        // Any file in this path will have the default values applied.\n        // Because this path is more specific it will over-write the previous\n        // defaults.\n        scope: { path: './_posts' },\n        values: { template: 'post', permalink: '/:title/' },\n      },\n      {\n        // Any file with this matching metadata will have the default values\n        // applied.\n        scope: { metadata: { draft: true } },\n        values: { template: 'draft' },\n      },\n    ],\n    // Filter out Files.\n    filters: {\n      // If any of the metadata values match then the File is filtered out.\n      metadata: { draft: true },\n      // If the date is in the future then it is filtered out.\n      futureDate: {\n        // Customize what key we should use to pull the date value from.\n        key: 'date',\n      },\n    },\n  },\n  // This is where you configure your collections of content.\n  // For more details refer to the Collections documentation.\n  collections: {\n    post: {\n      path: './_posts',\n      template: 'index',\n      pageSize: 6,\n      sort: { key: 'date', order: 'descending' },\n      permalink: { index: '/', page: '/page/:page/' },\n    },\n    tag: {\n      metadata: 'tags',\n      template: 'tag',\n      pageSize: 6,\n      sort: { key: 'date', order: 'descending' },\n      permalink: { index: '/tag/:metadata/', page: '/tag/:metadata/:page/' },\n    },\n  },\n  // Configure how non-markdown files should be processed. This is primarily\n  // for js, less, sass, etc files.\n  //\n  // Reptar will iterate over this array of asset processors and find the first\n  // match using the `test` value, passing in the source file path.\n  // If the test value is a:\n  //  string: it compares the file path from the beginning of the string.\n  //    Example:\n  //      filePath = '/my/file.less', test: 'less' will not match.\n  //      filePath = '/my/file.less', test: '/my/file' will match.\n  //  RegExp: will run filePath.match(regExp) for a match.\n  //  function: will give the function the filePath value and must return\n  //    a boolean.\n  //\n  // The `use` value defines what object to use when processing the asset.\n  // If the value for `use` is:\n  //  string: Reptar will assume is an npm module and attempt to load it.\n  //  object: The object must have two function properties,\n  //    `calculateDestination` to define the destination path for an asset\n  //    `render` to actually render the asset.\n  assets: [\n    {\n      test: 'less',\n      use: 'less',\n    },\n    {\n      test: /\\.js$/,\n      use: 'browserify',\n    },\n    {\n      test: /\\.s[ac]ss$/,\n      use: {\n        calculateDestination(destination) {\n          return destination.replace(\n            /\\.s[ac]ss$/,\n            '.css'\n          );\n        },\n        render(filePath) {\n          return filePath;\n        },\n      },\n    },\n  ],\n  // If we should remove the compile destination folder before writing.\n  cleanDestination: false,\n  // Slug options.\n  // Options passed to node-slug\n  slug: { lower: true },\n  // Markdown.\n  // This lets you customize how markdown is handled.\n  markdown: {\n    // What file extensions we should recognize as a markdown file.\n    extensions: ['markdown', 'mkdown', 'mkdn', 'mkd', 'md'],\n    // Options given directly when creating our markdown parser.\n    // Documentation here:\n    // https://github.com/markdown-it/markdown-it//init-with-presets-and-options\n    options: { preset: 'commonmark', highlight: true },\n  },\n  // Serving.\n  // When running `reptar serve` what settings should be used.\n  server: {\n    port: 8080,\n    host: '127.0.0.1',\n    baseurl: '',\n  },\n  // Only build files that have changed.\n  // This is a performance improvement to the time it takes to build your site.\n  incremental: true,\n  // Where files created via `reptar new` should be placed.\n  newFilePermalink: '/_posts/:date|YYYY-:date|MM-:date|D-:title.md',\n  // What middlewares you want enabled and what configuration settings they\n  // should have. Can be either a string which assumes it's an npm module or\n  // a function which is the middleware itself, or an array of either.\n  middlewares: [\n    'reptar-excerpt',\n    noopMiddleware,\n  ],\n  // Lifecycle methods are called at certain points in the lifecycle of Reptar.\n  // Each value can be either a string or a function or an array of either.\n  lifecycle: {\n    willUpdate: noopMiddleware,\n    didUpdate: noopMiddleware,\n    willBuild: noopMiddleware,\n    didBuild: noopMiddleware,\n  },\n};\n",
    "static": true,
    "longname": "lib/config/config-example.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "noopMiddleware",
    "memberof": "lib/config/config-example.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/config/config-example.js~noopMiddleware",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/config/config-example.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "lib/config/config-schema.js",
    "content": "import Joi from 'joi';\n\nconst middlewareOrLifecycleSchema = Joi.alternatives().try(\n  Joi.string(),\n  Joi.func(),\n  Joi.array().items(Joi.string(), Joi.func())\n).default([]);\n\nconst regExpSchema = Joi.object().type(RegExp);\n\nexport default Joi.object({\n  site: Joi.object().default(),\n  path: Joi.object({\n    source: Joi.string()\n      .default('./'),\n    destination: Joi.string()\n      .default('./_site'),\n    templates: Joi.string()\n      .default('./_templates'),\n    data: Joi.string()\n      .default('./_data'),\n  }).default(),\n  file: Joi.object({\n    urlKey: Joi.string().default('url'),\n    dateFormat: Joi.string().default('YYYY-M-D'),\n    defaults: Joi.array().items(\n      Joi.object({\n        scope: Joi.object({\n          path: Joi.string().allow(''),\n          metadata: Joi.object(),\n        }),\n        values: Joi.object(),\n      })\n    ).default([]),\n    filters: Joi.object({\n      metadata: Joi.object(),\n      futureDate: Joi.object({\n        key: Joi.string().default('date'),\n      }),\n    }).default({}),\n  }).default(),\n  collections: Joi.object().pattern(/\\w/, Joi.object({\n    path: Joi.string(),\n    metadata: Joi.string(),\n    template: Joi.string().default('index'),\n    pageSize: Joi.number().default(6),\n    sort: Joi.object({\n      key: Joi.string().default('date'),\n      order: Joi.string().default('descending'),\n    }),\n    permalink: Joi.object({\n      index: Joi.string().default('/'),\n      page: Joi.string().default('/page/:page/'),\n    }),\n  }).without('path', 'metadata')),\n  assets: Joi.array().items(\n    Joi.object({\n      test: Joi.alternatives().try(\n        Joi.string(),\n        Joi.func(),\n        regExpSchema\n      ),\n      use: Joi.alternatives().try(\n        Joi.string(),\n        Joi.object({\n          calculateDestination: Joi.func().required(),\n          render: Joi.func().required(),\n        })\n      ),\n    })\n  ).default([\n    { test: /\\.less$/, use: 'less' },\n    { test: /\\.js$/, use: 'browserify' },\n    { test: /\\.s[ac]ss$/, use: 'sass' },\n  ]),\n  cleanDestination: Joi.boolean().default(false),\n  slug: Joi.object({\n    lower: Joi.boolean().default(true),\n  }).default(),\n  markdown: Joi.object({\n    extensions: Joi.array().default([\n      'markdown',\n      'mkdown',\n      'mkdn',\n      'mkd',\n      'md',\n    ]),\n    options: Joi.object({\n      preset: Joi.string().default('commonmark'),\n      highlight: Joi.any().valid(\n        'prism',\n        'highlightjs',\n        true,\n        false\n      ).default(true),\n    }).default(),\n  }).default(),\n  server: Joi.object({\n    port: Joi.number().default(8080),\n    host: Joi.string().default('127.0.0.1'),\n    baseurl: Joi.string().allow('').default(''),\n  }).default(),\n  incremental: Joi.boolean().default(true),\n  newFilePermalink: Joi.string()\n    .default('/_posts/:date|YYYY-:date|MM-:date|D-:title.md'),\n  middlewares: middlewareOrLifecycleSchema,\n  lifecycle: Joi.object({\n    willUpdate: middlewareOrLifecycleSchema,\n    didUpdate: middlewareOrLifecycleSchema,\n    willBuild: middlewareOrLifecycleSchema,\n    didBuild: middlewareOrLifecycleSchema,\n  }).default(),\n}).default();\n",
    "static": true,
    "longname": "lib/config/config-schema.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "middlewareOrLifecycleSchema",
    "memberof": "lib/config/config-schema.js",
    "static": true,
    "longname": "lib/config/config-schema.js~middlewareOrLifecycleSchema",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/config/config-schema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "regExpSchema",
    "memberof": "lib/config/config-schema.js",
    "static": true,
    "longname": "lib/config/config-schema.js~regExpSchema",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/config/config-schema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "lib/config/index.js",
    "content": "import path from 'path';\nimport findUp from 'find-up';\nimport _ from 'lodash';\nimport resolve from 'resolve';\nimport Constants from '../constants';\nimport log from '../log';\nimport schema from './config-schema';\nimport less from '../assets/less';\nimport sass from '../assets/sass';\nimport browserify from '../assets/browserify';\n\nconst assetProcessors = {\n  browserify,\n  less,\n  sass,\n};\n\nfunction requireLocalModule(moduleName, { basedir } = {}) {\n  const modulePath = resolve.sync(moduleName, { basedir });\n  // eslint-disable-next-line global-require, import/no-dynamic-require\n  return require(modulePath);\n}\n\n/**\n * Look for a {@link Constants.ConfigFilename} file in this directory or any\n * parent directories.\n * @return {string} Path to the local {@link Constants.ConfigFilename} file.\n */\nfunction findLocal() {\n  // Look up directories to find our file.\n  const configYmlPath = findUp.sync(Constants.ConfigFilename);\n\n  // If we still can't find our file then throw an error.\n  if (!configYmlPath) {\n    throw new Error(`No '${Constants.ConfigFilename}' file found.`);\n  }\n\n  return configYmlPath;\n}\n\n/**\n * Find the directory where our local {@link Constants.ConfigFilename} exists.\n * @return {string} Path to the directory where our\n *   {@link Constants.ConfigFilename} file exists.\n */\nfunction findLocalDir() {\n  return findLocal().replace(Constants.ConfigFilename, '');\n}\n\n/**\n * Loads the local {@link Constants.ConfigFilename} file.\n * @param {string} root Root path of instance.\n * @return {Object} Config file.\n */\nfunction loadConfigFile(root) {\n  // eslint-disable-next-line global-require, import/no-dynamic-require\n  return require(path.join(root, Constants.ConfigFilename));\n}\n\nexport default class Config {\n  constructor(root = findLocalDir()) {\n    /**\n     * Full path to where we're running our app from.\n     * @type {string} Full path.\n     */\n    this.root = root;\n\n    /**\n     * Raw object that holds the config object.\n     * @type {Object}\n     * @private\n     */\n    this._raw = Object.create(null);\n  }\n\n  /**\n   * Update our in-memory representation of the config file from disk.\n   * This load's the YAML file, parses it, validates it, sets defaults,\n   * and then updates our internal instance.\n   */\n  update() {\n    // Load Constants.ConfigFilename.\n    const loadedConfig = loadConfigFile(this.root);\n    const config = _.isFunction(loadedConfig) ? loadedConfig() : loadedConfig;\n\n    // Validate config against schema. Sets defaults where neccessary.\n    const { error, value } = schema.validate(config);\n\n    if (error != null) {\n      log.error(error.annotate());\n      throw new Error(`${Constants.ConfigFilename} validation error: ` +\n        `${error.message}`);\n    }\n\n    // Store config data privately. Assign all default values.\n    this._raw = _.defaultsDeep(\n      value,\n      schema.validate().value\n    );\n\n    // Calculate absolute path of 'paths' keys.\n    this._raw.path[Constants.SourceKey] = path.resolve(\n      this.root, this._raw.path[Constants.SourceKey]\n    );\n    _.each(this._raw.path, (val, key) => {\n      if (key !== Constants.SourceKey) {\n        this._raw.path[key] = path.resolve(\n          this._raw.path.source,\n          this._raw.path[key]\n        );\n      }\n    });\n\n    // Sort our default values. They are sorted by:\n    //   1. Scopes with only metadata are first.\n    //   2. Scopes with paths are sorted from shortest to longest (most\n    //      specific).\n    //   3. Scopes with both metadata and paths are sorted after.\n    //   4. If two objects have the same scope, or if they both have metadata,\n    //      then we sort those values in the order in which they were given.\n    const sortedDefaults = _.sortBy(this._raw.file.defaults, [\n      defaultObj => _.get(defaultObj, 'scope.path', '').length,\n      defaultObj => defaultObj.scope.metadata != null,\n    ]);\n\n    // Update each scope path to be absolute relative to source path.\n    this._raw.file.defaults = sortedDefaults.map((defaultObj) => {\n      if (defaultObj.scope.path != null) {\n        defaultObj.scope.path = path.resolve(\n          this._raw.path.source,\n          defaultObj.scope.path\n        );\n      }\n      return defaultObj;\n    });\n\n    // For a given value if it is a string resolve it as if it's an NPM module.\n    const resolveMiddlewareModules = (moduleVal) => {\n      if (_.isString(moduleVal)) {\n        return requireLocalModule(moduleVal, { basedir: this.root });\n      }\n      return moduleVal;\n    };\n\n    // Make sure all values are arrays.\n    const middlewares = _.flatten(Array.of(this._raw.middlewares));\n    this._raw.middlewares = middlewares.map(resolveMiddlewareModules);\n\n    _.forEach(this._raw.lifecycle, (val, key) => {\n      const newVal = _.flatten(Array.of(val));\n      this._raw.lifecycle[key] = newVal.map(resolveMiddlewareModules);\n    });\n\n    // Convert every config.asset.test value to be a function.\n    this._raw.assets = this._raw.assets.map((asset) => {\n      let testVal = asset.test;\n\n      if (_.isString(testVal)) {\n        // A string test value must match from the beginning of the input value.\n        testVal = new RegExp(`^${testVal}`);\n      }\n\n      if (!_.isFunction(testVal)) {\n        const regExp = testVal;\n        testVal = filePath => filePath.match(regExp) !== null;\n      }\n\n      let useVal = asset.use;\n      if (_.isString(useVal)) {\n        useVal = assetProcessors[useVal] ?\n          assetProcessors[useVal] :\n          requireLocalModule(useVal, { basedir: this.root });\n      }\n\n      return {\n        test: testVal,\n        use: useVal,\n      };\n    });\n  }\n\n  /**\n   * Getter to access config properties. Everything is pushed through here\n   * so we can provide required defaults if they're not set. Also enforces\n   * uniform access to config properties.\n   * @param {[string]} objectPath Path to object property, i.e. 'path.source'.\n   *   If it isn't given then you get the entire config object.\n   * @return {*} Config value.\n   */\n  get(objectPath) {\n    if (objectPath === undefined) {\n      return this._raw;\n    }\n\n    const value = _.get(this._raw, objectPath);\n\n    if (value == null) {\n      throw new Error(`Tried to access config path \"${objectPath}\" ` +\n        'that does not exist.');\n    }\n\n    return value;\n  }\n}\n",
    "static": true,
    "longname": "lib/config/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "assetProcessors",
    "memberof": "lib/config/index.js",
    "static": true,
    "longname": "lib/config/index.js~assetProcessors",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/config/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"browserify\": *, \"less\": *, \"sass\": *}"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "requireLocalModule",
    "memberof": "lib/config/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/config/index.js~requireLocalModule",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/config/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "moduleName",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "optional": true,
        "types": [
          "{\"basedir\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "findLocal",
    "memberof": "lib/config/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/config/index.js~findLocal",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/config/index.js",
    "importStyle": null,
    "description": "Look for a {@link Constants.ConfigFilename} file in this directory or any\nparent directories.",
    "lineNumber": 29,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Path to the local {@link Constants.ConfigFilename} file."
    }
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "findLocalDir",
    "memberof": "lib/config/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/config/index.js~findLocalDir",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/config/index.js",
    "importStyle": null,
    "description": "Find the directory where our local {@link Constants.ConfigFilename} exists.",
    "lineNumber": 46,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Path to the directory where our\n  {@link Constants.ConfigFilename} file exists."
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "loadConfigFile",
    "memberof": "lib/config/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/config/index.js~loadConfigFile",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/config/index.js",
    "importStyle": null,
    "description": "Loads the local {@link Constants.ConfigFilename} file.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "Root path of instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Config file."
    }
  },
  {
    "__docId__": 103,
    "kind": "class",
    "name": "Config",
    "memberof": "lib/config/index.js",
    "static": true,
    "longname": "lib/config/index.js~Config",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/config/index.js",
    "importStyle": "Config",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 104,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/config/index.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/config/index.js~Config#constructor",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "root",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "root",
    "memberof": "lib/config/index.js~Config",
    "static": false,
    "longname": "lib/config/index.js~Config#root",
    "access": null,
    "description": "Full path to where we're running our app from.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "_raw",
    "memberof": "lib/config/index.js~Config",
    "static": false,
    "longname": "lib/config/index.js~Config#_raw",
    "access": "private",
    "description": "Raw object that holds the config object.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "update",
    "memberof": "lib/config/index.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/config/index.js~Config#update",
    "access": null,
    "description": "Update our in-memory representation of the config file from disk.\nThis load's the YAML file, parses it, validates it, sets defaults,\nand then updates our internal instance.",
    "lineNumber": 81,
    "params": []
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "_raw",
    "memberof": "lib/config/index.js~Config",
    "static": false,
    "longname": "lib/config/index.js~Config#_raw",
    "access": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "get",
    "memberof": "lib/config/index.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/config/index.js~Config#get",
    "access": null,
    "description": "Getter to access config properties. Everything is pushed through here\nso we can provide required defaults if they're not set. Also enforces\nuniform access to config properties.",
    "lineNumber": 190,
    "params": [
      {
        "nullable": null,
        "types": [
          "[string]"
        ],
        "spread": false,
        "optional": false,
        "name": "objectPath",
        "description": "Path to object property, i.e. 'path.source'.\n  If it isn't given then you get the entire config object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Config value."
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "lib/constants.js",
    "content": "\nconst Constants = {\n  ConfigFilename: 'reptar.config.js',\n\n  /**\n   * Key used on the config.path object to dictate where to find the site source\n   * path.\n   * @type {string}\n   */\n  SourceKey: 'source',\n\n  /**\n   * Key used on the config.path object to dictate where to find the site\n   * destination path.\n   * @type {string}\n   */\n  DestinationKey: 'destination',\n};\n\nexport default Constants;\n",
    "static": true,
    "longname": "lib/constants.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "Constants",
    "memberof": "lib/constants.js",
    "static": true,
    "longname": "lib/constants.js~Constants",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/constants.js",
    "importStyle": "Constants",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"ConfigFilename\": string, \"SourceKey\": string, \"DestinationKey\": string}"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "lib/data-files.js",
    "content": "import path from 'path';\nimport _ from 'lodash';\nimport Promise from 'bluebird';\nimport glob from 'glob';\nimport Parse from './parse';\n\n/**\n * Load all files in the given dataPath file and parse them into a JS object.\n * Then depending on the directory path structure and the name of the file\n * set the files contents in that path on an object.\n * @param {string} dataPath Path to data files.\n * @return {Object}\n */\nexport async function readDataFiles(dataPath = '') {\n  // Read all files from disk and get their file paths.\n  const filePaths = await Promise.fromCallback((cb) => {\n    glob(`${dataPath}/**/*.{json,yml,yaml}`, {\n      // Do not match directories, only files.\n      nodir: true,\n      // Follow symlinks.\n      follow: true,\n    }, cb);\n  }).map(filePath =>\n    // Correct the filePath created by glob to be compatible with Windows.\n    // Known issue in node-glob https://github.com/isaacs/node-glob/pull/263.\n    // eslint-disable-next-line no-useless-escape\n    path.normalize(filePath.replace(/[\\\\\\/]/g, path.sep))\n  );\n\n  const files = filePaths.map(filePath => ({\n    filePath,\n    // Load and parse file's contents.\n    content: Parse.smartLoadAndParse(filePath),\n    // Create the path where we'll set the file's contents.\n    // This turns something like\n    // /Users/user/reptar/_data/friends/angelica.json\n    // into\n    // ['friends', 'angelica']\n    // So we can use it with _.set.\n    dataPath: path.relative(\n      dataPath,\n      path.join(\n        path.dirname(filePath),\n        path.basename(filePath, path.extname(filePath))\n      )\n    ).split(path.sep),\n  }));\n\n  return files.reduce((acc, file) =>\n    // Set file's contents on the corresponding path.\n    _.set(acc, file.dataPath, file.content),\n    {}\n  );\n}\n\nexport default async function addDataFiles(reptar) {\n  // Read data files.\n  const dataFiles = await readDataFiles(reptar.config.get('path.data'));\n\n  // Expose it on the site object.\n  reptar.metadata.set('site.data', dataFiles);\n}\n",
    "static": true,
    "longname": "lib/data-files.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "readDataFiles",
    "memberof": "lib/data-files.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/data-files.js~readDataFiles",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/data-files.js",
    "importStyle": "{readDataFiles}",
    "description": "Load all files in the given dataPath file and parse them into a JS object.\nThen depending on the directory path structure and the name of the file\nset the files contents in that path on an object.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dataPath",
        "description": "Path to data files."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "addDataFiles",
    "memberof": "lib/data-files.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/data-files.js~addDataFiles",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/data-files.js",
    "importStyle": "addDataFiles",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "reptar",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "lib/file-system.js",
    "content": "import Promise from 'bluebird';\nimport path from 'path';\nimport _ from 'lodash';\nimport glob from 'glob';\nimport Constants from './constants';\nimport File from './file';\n\nexport default class FileSystem {\n  constructor({ config, renderer } = {}) {\n    /**\n     * @type {Config}\n     * @private\n     */\n    this._config = config;\n\n    /**\n     * @type {Renderer}\n     * @private\n     */\n    this._renderer = renderer;\n\n    /**\n     * All files found in our source path.\n     * Key is the full path to the file, value is the actual File object.\n     * @type {Object.<string, File>}\n     */\n    this.files = Object.create(null);\n  }\n\n  async loadIntoMemory() {\n    const configPathSource = this._config.get('path.source');\n\n    // Create an array of patterns that we should ignore when reading the source\n    // files of the Reptar site from disk.\n    // This primarily includes the Constants.ConfigFilename file as well as\n    // every path directory that isn't our source path.\n    const ignorePatterns = [\n      Constants.ConfigFilename,\n      'package.json',\n      'node_modules',\n    ]\n      .concat(\n        _.values(this._config.get('path')).filter(\n          pathVal => pathVal !== configPathSource\n        )\n      )\n      .map(ignorePath => `**/${ignorePath}/**`);\n\n    // Read all files from disk and get their file paths.\n    const files = await Promise.fromCallback((cb) => {\n      glob(`${configPathSource}/**/*`, {\n        // Do not match directories, only files.\n        nodir: true,\n        // Array of glob patterns to exclude from matching.\n        ignore: ignorePatterns,\n        // Follow symlinks.\n        follow: true,\n      }, cb);\n    });\n\n    const filePromises = files.map((rawPath) => {\n      // Correct the filePath created by glob to be compatible with Windows.\n      // Known issue in node-glob https://github.com/isaacs/node-glob/pull/263.\n      const filePath = path.normalize(rawPath.replace(/\\//g, path.sep));\n\n      const sourceFile = new File(filePath, {\n        config: this._config,\n        renderer: this._renderer,\n      });\n      this.files[sourceFile.id] = sourceFile;\n\n      return sourceFile.update();\n    });\n\n    return Promise.all(filePromises);\n  }\n}\n",
    "static": true,
    "longname": "lib/file-system.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "class",
    "name": "FileSystem",
    "memberof": "lib/file-system.js",
    "static": true,
    "longname": "lib/file-system.js~FileSystem",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/file-system.js",
    "importStyle": "FileSystem",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 117,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/file-system.js~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/file-system.js~FileSystem#constructor",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"config\": *, \"renderer\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "_config",
    "memberof": "lib/file-system.js~FileSystem",
    "static": false,
    "longname": "lib/file-system.js~FileSystem#_config",
    "access": "private",
    "description": "",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Config"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "_renderer",
    "memberof": "lib/file-system.js~FileSystem",
    "static": false,
    "longname": "lib/file-system.js~FileSystem#_renderer",
    "access": "private",
    "description": "",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "files",
    "memberof": "lib/file-system.js~FileSystem",
    "static": false,
    "longname": "lib/file-system.js~FileSystem#files",
    "access": null,
    "description": "All files found in our source path.\nKey is the full path to the file, value is the actual File object.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, File>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "loadIntoMemory",
    "memberof": "lib/file-system.js~FileSystem",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/file-system.js~FileSystem#loadIntoMemory",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "lib/file.js",
    "content": "import path from 'path';\nimport Promise from 'bluebird';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport createChecksum from './checksum';\nimport log from './log';\nimport Url from './url';\nimport Parse from './parse';\nimport cache from './cache';\nimport filter from './filter';\n\nexport default class File {\n  constructor(\n    filePath = '',\n    {\n      config,\n      renderer,\n    } = {}\n  ) {\n    /**\n     * Unique ID for this file. Right now an alias for the file's path.\n     * @type {string}\n     */\n    this.id = filePath;\n\n    /**\n     * Absolute path to file location.\n     * @type {string}\n     */\n    this.path = filePath;\n\n    /**\n     * Absolute destination path of where file should be written.\n     * @type {string} destination Absolute path to file.\n     */\n    this.destination = '';\n\n    /**\n     * Frontmatter for this file. Can be undefined if a file has no frontmatter.\n     * @type {object}\n     */\n    this.frontmatter = Object.create(null);\n\n    /**\n     * Template accessible data.\n     * @type {Object.<string, Object>}\n     */\n    this.data = Object.create(null);\n\n    /**\n     * Should we skip processing this file, ignoring templates and markdown\n     * conversion. This is generally only true for images and similar files.\n     * @type {boolean}\n     */\n    this.skipProcessing = false;\n\n    /**\n     * An asset processor that will handle rendering this file.\n     * @type {function?}\n     */\n    this.assetProcessor = null;\n\n    /**\n     * If this File is filtered out of rendering. Filter settings are defined\n     * in the {@link Config.ConfigFilename} file.\n     * @type {boolean}\n     */\n    this.filtered = false;\n\n    /**\n     * @type {Config}\n     * @private\n     */\n    this._config = config;\n\n    /**\n     * @type {Renderer}\n     * @private\n     */\n    this._renderer = renderer;\n  }\n\n  /**\n   * Update's File's data from the file system.\n   */\n  async update() {\n    // Check if a file has frontmatter.\n    const hasFrontmatter = await Parse.fileHasFrontmatter(this.path);\n\n    // If File doesn't have frontmatter then return early.\n    if (!hasFrontmatter) {\n      const assetConfig = this._config.get('assets').find(\n        ({ test }) => test(this.path)\n      );\n\n      if (assetConfig) {\n        this.assetProcessor = assetConfig.use;\n      }\n\n      this.skipProcessing = true;\n      this._calculateDestination();\n      return;\n    }\n\n    /**\n     * Raw contents of file, directly from file system.\n     * @type {string} One long string.\n     */\n    const rawContent = await Promise.fromCallback(cb =>\n      fs.readFile(this.path, 'utf8', cb)\n    );\n\n    /**\n     * Checksum hash of rawContent, for use in seeing if file is different.\n     * @example:\n     *  '50de70409f11f87b430f248daaa94d67'\n     * @type {string}\n     */\n    this.checksum = createChecksum(rawContent);\n\n    // Try to parse File's frontmatter.\n    let parsedContent;\n    try {\n      parsedContent = Parse.fromFrontMatter(rawContent);\n    } catch (e) {\n      // Couldn't parse File's frontmatter.\n    }\n\n    // Ensure we have an object to dereference.\n    if (!_.isObject(parsedContent)) {\n      parsedContent = {};\n    }\n\n    const {\n      data: frontmatter,\n      // The file's text content.\n      content,\n    } = parsedContent;\n\n    // Create new data object.\n    this.data = Object.create(null);\n\n    this.frontmatter = frontmatter;\n\n    this.defaults = this._gatherDefaults();\n\n    // Merge in new data that's accessible from template.\n    _.merge(this.data, this.defaults, this.frontmatter, {\n      // The content of the Page.\n      content,\n    });\n\n    this.filtered = filter.isFileFiltered(\n      this._config.get('file.filters'),\n      this\n    );\n\n    try {\n      this._calculateDestination();\n    } catch (e) {\n      throw new Error(\n        'Unable to calculate destination for file at ' +\n        `${this.path}. Message: ${e.message}`\n      );\n    }\n  }\n\n  /**\n   * Gather default values that should be applied to this file.\n   * @return {Object} Default values applied to this file.\n   */\n  _gatherDefaults() {\n    // Defaults are sorted from least to most specific, so we iterate over them\n    // in the reverse order to allow most specific first chance to apply their\n    // values.\n    return _.reduceRight(\n      this._config.get('file.defaults'),\n      (acc, defaultObj) => {\n        const { scope, values } = defaultObj;\n\n        // If default path property is defined does it exist within this file's\n        // path.\n        const pathMatches = scope.path != null ?\n          this.path.includes(scope.path) :\n          true;\n\n        // If metadata is set the does it match the file's metadata.\n        const metadataMatches = _.isObject(scope.metadata) ?\n          _.isMatch(this.frontmatter, scope.metadata) :\n          true;\n\n        // If we have a match then apply the values.\n        if (pathMatches && metadataMatches) {\n          return _.defaults(acc, values);\n        }\n\n        return acc;\n      },\n      {}\n    );\n  }\n\n  /**\n   * Calculate both relative and absolute destination path for where to write\n   * the file.\n   * @private\n   */\n  _calculateDestination() {\n    let destinationUrl;\n\n    /**\n     * If the file itself wants to customize what its URL is then it will use\n     * the `config.file.urlKey` value of the File's frontmatter as the basis\n     * for which the URL of this file should be.\n     * So if you have a File with a frontmatter that has `url: /pandas/` then\n     * the File's URL will be `/pandas/`.\n     * @type {string?} url Relative path to file.\n     */\n    const url = this.frontmatter[this._config.get('file.urlKey')];\n\n    if (url) {\n      // If the individual File defined its own unique URL that gets first\n      // dibs at setting the official URL for this file.\n      destinationUrl = url;\n    } else if (this.data.permalink) {\n      // If the file has no URL but has a permalink set on it then use it to\n      // find the URL of the File.\n      destinationUrl = Url.interpolatePermalink(\n        this.data.permalink,\n        this.data\n      );\n    } else {\n      // Path to file relative to root of project.\n      const pathRelative = this.path.replace(\n        this._config.get('path.source'),\n        ''\n      );\n\n      // If the file has no URL set and no permalink then use its relative file\n      // path as its url.\n      destinationUrl = Url.replaceMarkdownExtension(\n        pathRelative,\n        this._config.get('markdown.extensions')\n      );\n    }\n\n    if (this.assetProcessor) {\n      destinationUrl = this.assetProcessor.calculateDestination(destinationUrl);\n    }\n\n    this.destination = Url.makeUrlFileSystemSafe(destinationUrl);\n    this.data.url = Url.makePretty(this.destination);\n  }\n\n  /**\n   * Render the markdown into HTML.\n   * If there is an assetProcessor then we delegate render responsibility to\n   * that assetProcessor.\n   * @param {Object} globalData Global site metadata.\n   * @return {string} Rendered content.\n   */\n  render(globalData) {\n    if (this.assetProcessor) {\n      return this.assetProcessor.render(this);\n    }\n\n    const template = this.data.template;\n\n    let result = this.data.content;\n\n    const templateData = {\n      ...globalData,\n      file: this.data,\n    };\n\n    try {\n      // Set result of content to result content.\n      result = this._renderer.renderTemplateString(\n        this.data.content,\n        templateData\n      );\n\n      // Set result to file's contents.\n      this.data.content = result;\n    } catch (e) {\n      log.error(e.message);\n      throw new Error('File: Could not render file\\'s contents.\\n' +\n        `File: ${JSON.stringify(this)}`);\n    }\n\n    // Convert to HTML.\n    // However if the File's frontmatter sets markdown value to false then\n    // skip the markdown conversion.\n    if (this.data.markdown !== false) {\n      result = this._renderer.renderMarkdown(this.data.content);\n      this.data.content = result;\n    }\n\n    if (\n      !_.isNil(template) &&\n      !(_.isString(template) && template.length === 0)\n    ) {\n      result = this._renderer.renderTemplate(template, templateData);\n    }\n\n    return result;\n  }\n\n  /**\n   * Writes a given File object to the file system.\n   * @param {Object} globalData Site wide data.\n   */\n  async write(globalData) {\n    const destinationPath = path.join(\n      this._config.get('path.destination'),\n      this.destination\n    );\n\n    if (this.assetProcessor) {\n      const content = await this.render(this);\n      await Promise.fromCallback((cb) => {\n        fs.outputFile(destinationPath, content, 'utf8', cb);\n      });\n      return;\n    }\n\n    // If this File is a static asset then we don't process it at all, and just\n    // copy it to its destination path.\n    // This typically applies to images and other similar files.\n    if (this.skipProcessing) {\n      await Promise.fromCallback(cb =>\n        fs.copy(this.path, destinationPath, cb)\n      );\n      return;\n    }\n\n    // Don't write File if it is filtered.\n    if (this.filtered) {\n      return;\n    }\n\n    const content = await this.render(globalData);\n\n    if (this._config.get('incremental') &&\n        cache.get(this.path) === this.checksum) {\n      return;\n    }\n\n    await Promise.fromCallback((cb) => {\n      fs.outputFile(destinationPath, content, 'utf8', cb);\n    });\n\n    // Save checksum to cache for incremental builds.\n    cache.put(this.path, this.checksum);\n  }\n}\n",
    "static": true,
    "longname": "lib/file.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "class",
    "name": "File",
    "memberof": "lib/file.js",
    "static": true,
    "longname": "lib/file.js~File",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/file.js",
    "importStyle": "File",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 124,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/file.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/file.js~File#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "filePath",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "objectPattern1",
        "optional": true,
        "types": [
          "{\"config\": *, \"renderer\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "id",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#id",
    "access": null,
    "description": "Unique ID for this file. Right now an alias for the file's path.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "path",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#path",
    "access": null,
    "description": "Absolute path to file location.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "destination",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#destination",
    "access": null,
    "description": "Absolute destination path of where file should be written.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "frontmatter",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#frontmatter",
    "access": null,
    "description": "Frontmatter for this file. Can be undefined if a file has no frontmatter.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "data",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#data",
    "access": null,
    "description": "Template accessible data.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, Object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "skipProcessing",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#skipProcessing",
    "access": null,
    "description": "Should we skip processing this file, ignoring templates and markdown\nconversion. This is generally only true for images and similar files.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "assetProcessor",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#assetProcessor",
    "access": null,
    "description": "An asset processor that will handle rendering this file.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "function?"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "filtered",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#filtered",
    "access": null,
    "description": "If this File is filtered out of rendering. Filter settings are defined\nin the {@link Config.ConfigFilename} file.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "_config",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#_config",
    "access": "private",
    "description": "",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "Config"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "_renderer",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#_renderer",
    "access": "private",
    "description": "",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "update",
    "memberof": "lib/file.js~File",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/file.js~File#update",
    "access": null,
    "description": "Update's File's data from the file system.",
    "lineNumber": 86,
    "params": []
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "assetProcessor",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#assetProcessor",
    "access": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "skipProcessing",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#skipProcessing",
    "access": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "checksum",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#checksum",
    "access": null,
    "description": "Checksum hash of rawContent, for use in seeing if file is different.\n@example:\n '50de70409f11f87b430f248daaa94d67'",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "data",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#data",
    "access": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "frontmatter",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#frontmatter",
    "access": null,
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "defaults",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#defaults",
    "access": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "filtered",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#filtered",
    "access": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "_gatherDefaults",
    "memberof": "lib/file.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/file.js~File#_gatherDefaults",
    "access": null,
    "description": "Gather default values that should be applied to this file.",
    "lineNumber": 172,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Default values applied to this file."
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "_calculateDestination",
    "memberof": "lib/file.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/file.js~File#_calculateDestination",
    "access": "private",
    "description": "Calculate both relative and absolute destination path for where to write\nthe file.",
    "lineNumber": 208,
    "params": []
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "destination",
    "memberof": "lib/file.js~File",
    "static": false,
    "longname": "lib/file.js~File#destination",
    "access": null,
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "render",
    "memberof": "lib/file.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/file.js~File#render",
    "access": null,
    "description": "Render the markdown into HTML.\nIf there is an assetProcessor then we delegate render responsibility to\nthat assetProcessor.",
    "lineNumber": 262,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "globalData",
        "description": "Global site metadata."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rendered content."
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "write",
    "memberof": "lib/file.js~File",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/file.js~File#write",
    "access": null,
    "description": "Writes a given File object to the file system.",
    "lineNumber": 313,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "globalData",
        "description": "Site wide data."
      }
    ]
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "lib/filter/future-date.js",
    "content": "\n/**\n * Future date filter. Checks if a file's date occurs in the future.\n * @param {File} file File we're checking.\n * @param {Object} filterConfig Filter config object.\n * @return {boolean} If the File's date is in the future\n */\nexport default function futureDatesFilter(file, filterConfig = {}) {\n  const dateKey = filterConfig.key || 'date';\n  const fileDate = new Date(file.data[dateKey]).getTime();\n\n  // If the date is in the future we have a positive number.\n  return (fileDate - Date.now()) > 0;\n}\n",
    "static": true,
    "longname": "lib/filter/future-date.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "futureDatesFilter",
    "memberof": "lib/filter/future-date.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/filter/future-date.js~futureDatesFilter",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/filter/future-date.js",
    "importStyle": "futureDatesFilter",
    "description": "Future date filter. Checks if a file's date occurs in the future.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "File we're checking."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "filterConfig",
        "description": "Filter config object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If the File's date is in the future"
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "lib/filter/index.js",
    "content": "import _ from 'lodash';\nimport metadata from './metadata';\nimport futureDate from './future-date';\n\nconst filters = {\n  metadata,\n  futureDate,\n};\n\nexport default {\n  /**\n   * Whether a File is filtered by the applied filters.\n   * @param {Object} appliedFilters Filters to apply to File.\n   * @param {File} file File object.\n   * @return {boolean} True if this file is filtered.\n   */\n  isFileFiltered(appliedFilters, file) {\n    if (_.isEmpty(appliedFilters)) {\n      return false;\n    }\n\n    return _.some(appliedFilters, (filterConfig, filterName) =>\n      filters[filterName](file, filterConfig)\n    );\n  },\n};\n",
    "static": true,
    "longname": "lib/filter/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "filters",
    "memberof": "lib/filter/index.js",
    "static": true,
    "longname": "lib/filter/index.js~filters",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/filter/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"metadata\": *, \"futureDate\": *}"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "lib/filter/metadata.js",
    "content": "import _ from 'lodash';\n\n/**\n * Metadata filter. Checks if a file.data object matches all the configured\n * filter options.\n * @example\n * let filterConfig = {\n *   draft: true\n * };\n * file.data = {\n *   title: 'foo',\n *   draft: true\n * };\n * metadataFilter(filterConfig, file); // true\n * @param {File} file File we're checking.\n * @param {Object} filterConfig Filter config object.\n * @return {boolean} If the File matches the filterConfig object.\n */\nexport default function metadataFilter(file, filterConfig) {\n  return _.isMatch(file.data, filterConfig);\n}\n",
    "static": true,
    "longname": "lib/filter/metadata.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "metadataFilter",
    "memberof": "lib/filter/metadata.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/filter/metadata.js~metadataFilter",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/filter/metadata.js",
    "importStyle": "metadataFilter",
    "description": "Metadata filter. Checks if a file.data object matches all the configured\nfilter options.",
    "examples": [
      "let filterConfig = {\n  draft: true\n};\nfile.data = {\n  title: 'foo',\n  draft: true\n};\nmetadataFilter(filterConfig, file); // true"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "File we're checking."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "filterConfig",
        "description": "Filter config object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If the File matches the filterConfig object."
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "lib/index.js",
    "content": "import Promise from 'bluebird';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport ora from 'ora';\nimport ware from 'ware';\nimport cache from './cache';\nimport createChecksum from './checksum';\nimport Config from './config';\nimport FileSystem from './file-system';\nimport Url from './url';\nimport Metadata from './metadata';\nimport Renderer from './renderer';\nimport addCollections from './collection';\nimport addDataFiles from './data-files';\n\n/**\n * Helper function to wrap commands with a log.startActivity command so we can\n * see how long a command takes.\n * @param {string} label A label to use for this command.\n * @param {Function} cmd A function to run as the command.\n */\nasync function wrapCommand(label, cmd) {\n  const startTime = Date.now();\n  const spinner = ora({\n    text: label,\n    spinner: 'dot4',\n  }).start();\n\n  try {\n    await cmd();\n    spinner.text = `${label} (${Date.now() - startTime}ms)`;\n    spinner.succeed();\n  } catch (e) {\n    spinner.fail();\n    throw e;\n  }\n}\n\n/**\n * Process middleware functions.\n * @param {Array.<function>} options.middlewares Middleware functions.\n * @param {Reptar} options.reptar Reptar instance.\n * @return {Promise} Returns a Promise.\n */\nfunction processMiddlewares({ middlewares, reptar }) {\n  return new Promise((resolve, reject) => {\n    ware(middlewares).run(reptar, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n}\n\nexport default class Reptar {\n  /**\n   * Create a new Reptar instance.\n   * @param {Object} options Options object.\n   * @param {string} options.rootPath Where the root path of this Reptar\n   *   instance points to.\n   * @param {boolean} options.incremental If we should incremental build files.\n   * @param {boolean} options.noTemplateCache Should templates be cached.\n   *   Typically this is only off when developing or in watch mode.\n   */\n  constructor(options = {}) {\n    /**\n     * Save options passed into instance.\n     * @type {Object}\n     */\n    this.options = _.defaults(options, {\n      noTemplateCache: false,\n      clean: false,\n      incremental: undefined,\n      rootPath: undefined,\n      showSpinner: true,\n    });\n\n    this._wrapCommand = this.options.showSpinner ?\n      wrapCommand :\n      (label, fn) => fn();\n\n    /**\n     * Expose config object on instance.\n     * @type {Config}\n     */\n    this.config = new Config(this.options.rootPath);\n\n    /**\n     * @type {Renderer}\n     */\n    this.renderer = new Renderer({\n      config: this.config,\n    });\n\n    /**\n     * Create backing FileSystem instance.\n     * @type {FileSystem}\n     */\n    this.fileSystem = new FileSystem({\n      config: this.config,\n      renderer: this.renderer,\n    });\n\n    /**\n     * Create metadata that will be accessible within every template.\n     * @type {Metadata}\n     */\n    this.metadata = new Metadata();\n\n    /**\n     * Our destination object of where our files will be written.\n     * @type {Object.<string, File>}\n     */\n    this.destination = Object.create(null);\n  }\n\n  async update({ skipFiles = false } = {}) {\n    this.config.update();\n\n    await this._processMiddlewares({\n      middlewaresKey: 'lifecycle.willUpdate',\n    });\n\n    const { base, dir } = path.parse(this.config.root);\n    cache.setNamespace(`${base}-${createChecksum(dir).slice(0, 10)}`);\n\n    // Options passed into constructor take precedence over the config value.\n    // We default to loading cache, unless explicitly set to false.\n    const shouldLoadCache = !_.isNil(this.options.incremental) ?\n      this.options.incremental !== false :\n      this.config.get('incremental') !== false;\n    if (shouldLoadCache) {\n      cache.load();\n    }\n\n    Url.setSlugOptions(this.config.get('slug'));\n\n    this.renderer.update({\n      noTemplateCache: this.options.noTemplateCache,\n    });\n\n    // Expose site data from config file.\n    this.metadata.set('site', this.config.get('site'));\n\n    if (!skipFiles) {\n      await this._wrapCommand(\n        'Reading files.\\t\\t\\t',\n        this.fileSystem.loadIntoMemory.bind(this.fileSystem)\n      );\n    }\n\n    _.forEach(this.fileSystem.files, (file) => {\n      this.destination[file.destination] = file;\n    });\n\n    this.metadata.set('reptar', Reptar.getReptarData());\n\n    addCollections(this);\n    addDataFiles(this);\n\n    await this._processMiddlewares({\n      middlewaresKey: 'lifecycle.didUpdate',\n    });\n\n    await this._processMiddlewares({\n      middlewaresKey: 'middlewares',\n    });\n  }\n\n  /**\n   * Removes configured destination directory and all files contained.\n   * @return {Promise} Promise object.\n   */\n  cleanDestination() {\n    return this._wrapCommand(\n      'Cleaning destination.\\t\\t\\t',\n      async () => {\n        await Promise.fromCallback((cb) => {\n          rimraf(this.config.get('path.destination'), cb);\n        });\n\n        // Clear cache.\n        cache.clear();\n      }\n    );\n  }\n\n  /**\n   * Builds the Reptar site in its entirety.\n   */\n  async build() {\n    await this._processMiddlewares({\n      middlewaresKey: 'lifecycle.willBuild',\n    });\n\n    if (this.config.get('cleanDestination') || this.options.clean) {\n      await this.cleanDestination();\n    }\n\n    const metadata = this.metadata.get();\n\n    await this._wrapCommand(\n      'Writing destination.\\t\\t\\t',\n      () =>\n        Promise.all(\n          _.map(this.destination, file => file.write(metadata))\n        )\n    );\n\n    await this._processMiddlewares({\n      middlewaresKey: 'lifecycle.didBuild',\n    });\n  }\n\n  async _processMiddlewares({ middlewaresKey }) {\n    const middlewares = this.config.get(middlewaresKey);\n\n    if (middlewares.length === 0) {\n      return;\n    }\n\n    const tabs = middlewaresKey.length > 11 ? '\\t\\t' : '\\t\\t';\n\n    await this._wrapCommand(\n      `Running \"${middlewaresKey}\".${tabs}`,\n      () => processMiddlewares({ middlewares, reptar: this })\n    );\n  }\n\n  /**\n   * Get information about the Reptar installation from its package.json.\n   * @return {Object}\n   */\n  static getReptarData() {\n    let packageJson = {};\n    try {\n      // eslint-disable-next-line\n      packageJson = require(Url.pathFromRoot('./package.json'));\n    } catch (e) { /* ignore */ }\n\n    return {\n      version: packageJson.version,\n      time: moment((new Date()).getTime()).format(),\n    };\n  }\n}\n",
    "static": true,
    "longname": "lib/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "wrapCommand",
    "memberof": "lib/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/index.js~wrapCommand",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/index.js",
    "importStyle": null,
    "description": "Helper function to wrap commands with a log.startActivity command so we can\nsee how long a command takes.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "A label to use for this command."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "cmd",
        "description": "A function to run as the command."
      }
    ]
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "processMiddlewares",
    "memberof": "lib/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~processMiddlewares",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/index.js",
    "importStyle": null,
    "description": "Process middleware functions.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<function>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.middlewares",
        "description": "Middleware functions."
      },
      {
        "nullable": null,
        "types": [
          "Reptar"
        ],
        "spread": false,
        "optional": false,
        "name": "options.reptar",
        "description": "Reptar instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a Promise."
    }
  },
  {
    "__docId__": 157,
    "kind": "class",
    "name": "Reptar",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Reptar",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/index.js",
    "importStyle": "Reptar",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 158,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/index.js~Reptar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Reptar#constructor",
    "access": null,
    "description": "Create a new Reptar instance.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rootPath",
        "description": "Where the root path of this Reptar\n  instance points to."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.incremental",
        "description": "If we should incremental build files."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.noTemplateCache",
        "description": "Should templates be cached.\n  Typically this is only off when developing or in watch mode."
      }
    ]
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "options",
    "memberof": "lib/index.js~Reptar",
    "static": false,
    "longname": "lib/index.js~Reptar#options",
    "access": null,
    "description": "Save options passed into instance.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "_wrapCommand",
    "memberof": "lib/index.js~Reptar",
    "static": false,
    "longname": "lib/index.js~Reptar#_wrapCommand",
    "access": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "config",
    "memberof": "lib/index.js~Reptar",
    "static": false,
    "longname": "lib/index.js~Reptar#config",
    "access": null,
    "description": "Expose config object on instance.",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "Config"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "renderer",
    "memberof": "lib/index.js~Reptar",
    "static": false,
    "longname": "lib/index.js~Reptar#renderer",
    "access": null,
    "description": "",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "fileSystem",
    "memberof": "lib/index.js~Reptar",
    "static": false,
    "longname": "lib/index.js~Reptar#fileSystem",
    "access": null,
    "description": "Create backing FileSystem instance.",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "FileSystem"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "metadata",
    "memberof": "lib/index.js~Reptar",
    "static": false,
    "longname": "lib/index.js~Reptar#metadata",
    "access": null,
    "description": "Create metadata that will be accessible within every template.",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "Metadata"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "destination",
    "memberof": "lib/index.js~Reptar",
    "static": false,
    "longname": "lib/index.js~Reptar#destination",
    "access": null,
    "description": "Our destination object of where our files will be written.",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, File>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "update",
    "memberof": "lib/index.js~Reptar",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/index.js~Reptar#update",
    "access": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"skipFiles\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "cleanDestination",
    "memberof": "lib/index.js~Reptar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Reptar#cleanDestination",
    "access": null,
    "description": "Removes configured destination directory and all files contained.",
    "lineNumber": 178,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise object."
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "build",
    "memberof": "lib/index.js~Reptar",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/index.js~Reptar#build",
    "access": null,
    "description": "Builds the Reptar site in its entirety.",
    "lineNumber": 195,
    "params": []
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "_processMiddlewares",
    "memberof": "lib/index.js~Reptar",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/index.js~Reptar#_processMiddlewares",
    "access": null,
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"middlewaresKey\": *}"
        ],
        "defaultRaw": {
          "middlewaresKey": null
        },
        "defaultValue": "{\"middlewaresKey\":null}"
      }
    ]
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "getReptarData",
    "memberof": "lib/index.js~Reptar",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~Reptar.getReptarData",
    "access": null,
    "description": "Get information about the Reptar installation from its package.json.",
    "lineNumber": 238,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "lib/log.js",
    "content": "/* eslint-disable no-console */\nimport chalk from 'chalk';\nimport activity from 'activity-logger';\n\nlet verboseMode = true;\nlet isSilent = false;\n\nexport default {\n  setLogLevel(logLevel) {\n    verboseMode = logLevel === 'verbose';\n  },\n\n  setSilent(newSilent = false) {\n    isSilent = newSilent;\n  },\n\n  info(...args) {\n    const prefix = `${chalk.green('info')}:\\t`;\n    args.unshift(prefix);\n    console.log(...args);\n  },\n\n  warn(...args) {\n    if (!verboseMode) {\n      return;\n    }\n    const prefix = `${chalk.yellow('warn')}:\\t`;\n    args.unshift(prefix);\n    console.log(...args);\n  },\n\n  error(...args) {\n    const prefix = `${chalk.red('error')}:\\t`;\n    args.unshift(prefix);\n    console.log(...args);\n  },\n\n  startActivity(name) {\n    if (isSilent) {\n      return -1;\n    }\n    return activity.start(name);\n  },\n\n  endActivity(id) {\n    if (isSilent) {\n      return true;\n    }\n    return activity.end(id);\n  },\n};\n",
    "static": true,
    "longname": "lib/log.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "verboseMode",
    "memberof": "lib/log.js",
    "static": true,
    "longname": "lib/log.js~verboseMode",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "isSilent",
    "memberof": "lib/log.js",
    "static": true,
    "longname": "lib/log.js~isSilent",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "lib/metadata.js",
    "content": "import _ from 'lodash';\n\n/**\n * Handles all metadata about your site that will be accessible within every\n * render context.\n */\nexport default class Metadata {\n  constructor() {\n    /**\n     * Site wide data available in all templates.\n     * @type {Object.<string, Object>}\n     */\n    this.metadata = Object.create(null);\n  }\n\n  /**\n   * Gets either the entire metadata object or a part of it.\n   * @param {[objPath]} objPath Property path of value we want back.\n   * @return {*}\n   */\n  get(objPath) {\n    if (!objPath) {\n      return this.metadata;\n    }\n\n    return _.get(this.metadata, objPath);\n  }\n\n  /**\n   * Set a value on our metadata.\n   * @param {string|Array} objPath Path where we're setting our value.\n   * @param {*} value Value we're setting.\n   */\n  set(objPath, value) {\n    _.set(this.metadata, objPath, value);\n  }\n}\n",
    "static": true,
    "longname": "lib/metadata.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "class",
    "name": "Metadata",
    "memberof": "lib/metadata.js",
    "static": true,
    "longname": "lib/metadata.js~Metadata",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/metadata.js",
    "importStyle": "Metadata",
    "description": "Handles all metadata about your site that will be accessible within every\nrender context.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 176,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/metadata.js~Metadata",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/metadata.js~Metadata#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "metadata",
    "memberof": "lib/metadata.js~Metadata",
    "static": false,
    "longname": "lib/metadata.js~Metadata#metadata",
    "access": null,
    "description": "Site wide data available in all templates.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, Object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "get",
    "memberof": "lib/metadata.js~Metadata",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/metadata.js~Metadata#get",
    "access": null,
    "description": "Gets either the entire metadata object or a part of it.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "[objPath]"
        ],
        "spread": false,
        "optional": false,
        "name": "objPath",
        "description": "Property path of value we want back."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "set",
    "memberof": "lib/metadata.js~Metadata",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/metadata.js~Metadata#set",
    "access": null,
    "description": "Set a value on our metadata.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "objPath",
        "description": "Path where we're setting our value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value we're setting."
      }
    ]
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "lib/parse/front-matter.js",
    "content": "/**\n * Interface to gray-matter for parsing files with YAML frontmatter.\n */\nimport Promise from 'bluebird';\nimport fs from 'fs';\nimport matter from 'gray-matter';\nimport jsYaml from 'js-yaml';\n\n/**\n * The frontmatter delimiter character.\n * @type {string}\n */\nconst FRONTMATTER_DELIMITER = '-';\n\nconst frontMatterOptions = {\n  parser: jsYaml.safeLoad,\n};\n\n/**\n * Parse a file with front matter.\n * @param {string} str String to parse.\n * @param {Object} options Additional options.\n * @return {JSON} JSON object.\n */\nexport function parse(str = '', options = {}) {\n  return matter(str, Object.assign({}, frontMatterOptions, options));\n}\n\n/**\n * Stringify a document.\n * @param  {string} str Content to append to YAML.\n * @param  {Object} data Data to convert to YAML and prepend to document.\n * @return {string} Content with prepended YAML data.\n */\nexport function stringify(str = '', data = {}) {\n  return matter.stringify(str, data);\n}\n\n/**\n * This is a fast way to check if a file has frontmatter without reading all of\n * its contents into memory.\n * @param {string} filePath Path to file on the file system.\n * @return {Promise.<boolean>} Promise which resolves to true if the file has\n *   frontmatter.\n */\nexport function fileHasFrontmatter(filePath) {\n  return new Promise((resolve, reject) => {\n    let chunks = '';\n    fs\n      .createReadStream(filePath, {\n        encoding: 'utf8',\n        start: 0,\n        // Only read the first 3 characters from the file, as those are the ones\n        // which must match frontmatter delimiter.\n        end: 2,\n      })\n      .on('data', (chunk) => { chunks += chunk; })\n      .on('close', () => {\n        for (const char of chunks) {\n          // If one character doesn't match then this file doesn't have\n          // frontmatter.\n          if (char !== FRONTMATTER_DELIMITER) {\n            resolve(false);\n            return;\n          }\n        }\n\n        // If every character matches then this file has frontmatter.\n        resolve(true);\n      })\n      .on('error', reject);\n  });\n}\n",
    "static": true,
    "longname": "lib/parse/front-matter.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "FRONTMATTER_DELIMITER",
    "memberof": "lib/parse/front-matter.js",
    "static": true,
    "longname": "lib/parse/front-matter.js~FRONTMATTER_DELIMITER",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/parse/front-matter.js",
    "importStyle": null,
    "description": "The frontmatter delimiter character.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "frontMatterOptions",
    "memberof": "lib/parse/front-matter.js",
    "static": true,
    "longname": "lib/parse/front-matter.js~frontMatterOptions",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/parse/front-matter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"parser\": *}"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "parse",
    "memberof": "lib/parse/front-matter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/parse/front-matter.js~parse",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/parse/front-matter.js",
    "importStyle": "{parse}",
    "description": "Parse a file with front matter.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "String to parse."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Additional options."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSON"
      ],
      "spread": false,
      "description": "JSON object."
    }
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "stringify",
    "memberof": "lib/parse/front-matter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/parse/front-matter.js~stringify",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/parse/front-matter.js",
    "importStyle": "{stringify}",
    "description": "Stringify a document.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "Content to append to YAML."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data to convert to YAML and prepend to document."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Content with prepended YAML data."
    }
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "fileHasFrontmatter",
    "memberof": "lib/parse/front-matter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/parse/front-matter.js~fileHasFrontmatter",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/parse/front-matter.js",
    "importStyle": "{fileHasFrontmatter}",
    "description": "This is a fast way to check if a file has frontmatter without reading all of\nits contents into memory.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "Path to file on the file system."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<boolean>"
      ],
      "spread": false,
      "description": "Promise which resolves to true if the file has\n  frontmatter."
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "lib/parse/index.js",
    "content": "import fs from 'fs';\nimport path from 'path';\nimport {\n  parse as fromFrontMatter,\n  stringify as toFrontMatter,\n  fileHasFrontmatter,\n} from './front-matter';\n\nimport {\n  parse as fromYaml,\n  stringify as toYaml,\n} from './yaml';\n\n// Supported extension parsers.\nconst ExtensionParser = {\n  json(filePath) {\n    const content = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(content);\n  },\n  yaml(filePath) {\n    const content = fs.readFileSync(filePath, 'utf8');\n    return fromYaml(content);\n  },\n};\n// Alias yml to yaml.\nExtensionParser.yml = ExtensionParser.yaml;\n\nexport default {\n  fromFrontMatter,\n  toFrontMatter,\n  fileHasFrontmatter,\n\n  fromYaml,\n  toYaml,\n\n  /**\n   * Intelligently parses a file and returns a JS object. It checks the\n   * extension and uses the correct mechanism for parsing the file.\n   * @param {string} filePath Full path to file.\n   * @return {Object} POJO.\n   */\n  smartLoadAndParse(filePath) {\n    const extension = path.extname(filePath).replace('.', '');\n    const parser = ExtensionParser[extension];\n    if (parser == null) {\n      return {};\n    }\n    return parser(filePath);\n  },\n};\n",
    "static": true,
    "longname": "lib/parse/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "ExtensionParser",
    "memberof": "lib/parse/index.js",
    "static": true,
    "longname": "lib/parse/index.js~ExtensionParser",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/parse/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"json\": function, \"yaml\": function}"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "lib/parse/yaml.js",
    "content": "/**\n * YAML operations, parse or stringify.\n */\nimport jsYaml from 'js-yaml';\n\n/**\n * Parse a YAML string into an object.\n * @param {string} str String containing YAML information.\n * @return {Object} Parsed YAML object.\n */\nexport function parse(str) {\n  return jsYaml.safeLoad(str);\n}\n\n/**\n * Stringify an object to a YAML string.\n * @param {Object} obj JavaScript object.\n * @return {string} YAML document.\n */\nexport function stringify(obj) {\n  return jsYaml.safeDump(obj);\n}\n",
    "static": true,
    "longname": "lib/parse/yaml.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "parse",
    "memberof": "lib/parse/yaml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/parse/yaml.js~parse",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/parse/yaml.js",
    "importStyle": "{parse}",
    "description": "Parse a YAML string into an object.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "String containing YAML information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Parsed YAML object."
    }
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "stringify",
    "memberof": "lib/parse/yaml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/parse/yaml.js~stringify",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/parse/yaml.js",
    "importStyle": "{stringify}",
    "description": "Stringify an object to a YAML string.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "JavaScript object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "YAML document."
    }
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "lib/renderer/markdown.js",
    "content": "/**\n * Methods for interacting with our Markdown engine.\n * Supports rendering Markdown text and configure the engine.\n */\nimport MarkdownIt from 'markdown-it';\nimport prism from 'markdown-it-prism';\nimport highlightjs from 'highlight.js';\n\n/**\n * Default options used for Markdown engine.\n * @type {Object}\n */\nconst DEFAULT_OPTIONS = {\n  highlight(str, lang) {\n    if (lang && highlightjs.getLanguage(lang)) {\n      try {\n        return highlightjs.highlight(lang, str).value;\n      } catch (e) { /* noop */ }\n    }\n\n    try {\n      return highlightjs.highlightAuto(str).value;\n    } catch (e) { /* noop */ }\n\n    // use external default escaping\n    return '';\n  },\n};\n\n/**\n * Render a piece of string from Markdown to HTML.\n * @param {Object} md Markdown engine instance.\n * @param {string} str String to parse.\n * @return {string} Parsed Markdown.\n */\nexport function renderMarkdown(md, str = '') {\n  return md.render(str);\n}\n\n/**\n * Create our Markdown engine.\n * @param {Object} options Configuration object.\n * @return {Object} Returns markdown engine instance.\n */\nexport function createMarkdownEngine(options = { preset: 'commonmark' }) {\n  // If highlight is set to true then attach the highlight function handler.\n  if (options.highlight === true || options.highlight === 'highlightjs') {\n    options.highlight = DEFAULT_OPTIONS.highlight;\n  }\n\n  // Create markdown instance.\n  const md = new MarkdownIt(options.preset, {\n    ...options,\n  });\n\n  if (options.highlight === 'prism') {\n    md.use(prism);\n  }\n\n  return md;\n}\n",
    "static": true,
    "longname": "lib/renderer/markdown.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "DEFAULT_OPTIONS",
    "memberof": "lib/renderer/markdown.js",
    "static": true,
    "longname": "lib/renderer/markdown.js~DEFAULT_OPTIONS",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/renderer/markdown.js",
    "importStyle": null,
    "description": "Default options used for Markdown engine.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "renderMarkdown",
    "memberof": "lib/renderer/markdown.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/renderer/markdown.js~renderMarkdown",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/renderer/markdown.js",
    "importStyle": "{renderMarkdown}",
    "description": "Render a piece of string from Markdown to HTML.",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "md",
        "description": "Markdown engine instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "String to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Parsed Markdown."
    }
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "createMarkdownEngine",
    "memberof": "lib/renderer/markdown.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/renderer/markdown.js~createMarkdownEngine",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/renderer/markdown.js",
    "importStyle": "{createMarkdownEngine}",
    "description": "Create our Markdown engine.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Configuration object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns markdown engine instance."
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "lib/renderer/renderer.js",
    "content": "import {\n  renderMarkdown,\n  createMarkdownEngine,\n} from './markdown';\nimport {\n  renderTemplate,\n  renderTemplateString,\n  addTemplateFilter,\n  configureTemplateEngine,\n} from './template';\n\nexport default class Renderer {\n  constructor({ config } = {}) {\n    /**\n     * @type {Config}\n     * @private\n     */\n    this._config = config;\n  }\n\n  update({ noTemplateCache }) {\n    // Create markdown engine.\n    this._md = createMarkdownEngine(this._config.get('markdown.options'));\n\n    this.renderMarkdown = renderMarkdown.bind(undefined, this._md);\n\n    // Configure template engine.\n    this._nunjucksEnv = configureTemplateEngine({\n      config: this._config,\n      paths: this._config.get('path.templates'),\n      noCache: noTemplateCache,\n    });\n\n    this.renderTemplate = renderTemplate\n      .bind(undefined, this._nunjucksEnv);\n    this.renderTemplateString = renderTemplateString\n      .bind(undefined, this._nunjucksEnv);\n    this.addTemplateFilter = addTemplateFilter\n      .bind(undefined, this._nunjucksEnv);\n  }\n\n  getMarkdownEngine() {\n    return this._md;\n  }\n}\n",
    "static": true,
    "longname": "lib/renderer/renderer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "class",
    "name": "Renderer",
    "memberof": "lib/renderer/renderer.js",
    "static": true,
    "longname": "lib/renderer/renderer.js~Renderer",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/renderer/renderer.js",
    "importStyle": "Renderer",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 197,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/renderer/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/renderer/renderer.js~Renderer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"config\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "_config",
    "memberof": "lib/renderer/renderer.js~Renderer",
    "static": false,
    "longname": "lib/renderer/renderer.js~Renderer#_config",
    "access": "private",
    "description": "",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Config"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "update",
    "memberof": "lib/renderer/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/renderer/renderer.js~Renderer#update",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"noTemplateCache\": *}"
        ],
        "defaultRaw": {
          "noTemplateCache": null
        },
        "defaultValue": "{\"noTemplateCache\":null}"
      }
    ]
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "_md",
    "memberof": "lib/renderer/renderer.js~Renderer",
    "static": false,
    "longname": "lib/renderer/renderer.js~Renderer#_md",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "renderMarkdown",
    "memberof": "lib/renderer/renderer.js~Renderer",
    "static": false,
    "longname": "lib/renderer/renderer.js~Renderer#renderMarkdown",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "_nunjucksEnv",
    "memberof": "lib/renderer/renderer.js~Renderer",
    "static": false,
    "longname": "lib/renderer/renderer.js~Renderer#_nunjucksEnv",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "renderTemplate",
    "memberof": "lib/renderer/renderer.js~Renderer",
    "static": false,
    "longname": "lib/renderer/renderer.js~Renderer#renderTemplate",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "renderTemplateString",
    "memberof": "lib/renderer/renderer.js~Renderer",
    "static": false,
    "longname": "lib/renderer/renderer.js~Renderer#renderTemplateString",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "addTemplateFilter",
    "memberof": "lib/renderer/renderer.js~Renderer",
    "static": false,
    "longname": "lib/renderer/renderer.js~Renderer#addTemplateFilter",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "getMarkdownEngine",
    "memberof": "lib/renderer/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/renderer/renderer.js~Renderer#getMarkdownEngine",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "lib/renderer/template.js",
    "content": "/**\n * Methods for rendering a template.\n */\nimport _ from 'lodash';\nimport nunjucks from 'nunjucks';\nimport moment from 'moment';\nimport Url from '../url';\n\nconst TemplateErrorMessage = {\n  NO_TEMPLATE: 'template not found',\n};\n\n/**\n * Render a template with given context variables.\n * @param {Object} env Nunjucks instance;\n * @param {string} template  Template name, excluding the extension.\n * @param {object} variables Object of variables to interpolate in the\n *   template.\n * @return {string} Rendered template.\n */\nexport function renderTemplate(env, template, variables) {\n  if (!env) {\n    return '';\n  }\n\n  let result = '';\n  try {\n    result = env.render(`${template}.html`, variables);\n  } catch (e) {\n    if (e.message.includes(TemplateErrorMessage.NO_TEMPLATE)) {\n      // The message given from nunjucks looks like:\n      //   Template render error: (/reptar/templates/page.html)\n      //   Template render error: (/reptar/templates/page.html)\n      //   Error: template not found: mistake.html\n      // This takes the multi line message and just grabs the last line.\n      const message = _.last(e.message.split('\\n'))\n        .trim()\n        // Format the last line of `Error: template` to remove anything\n        // preceding our known error message. (Basically remove `Error: `)\n        .replace(\n          new RegExp(`.*${TemplateErrorMessage.NO_TEMPLATE}`),\n          TemplateErrorMessage.NO_TEMPLATE\n        );\n\n      // Re-throw formatted error message.\n      throw new Error(message);\n    } else {\n      throw e;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Render a string template with given context variables.\n * @param {Object} env Nunjucks instance;\n * @param {string} str  Template string.\n * @param {object} variables Object of variables to interpolate in the\n *   template.\n * @return {string} Rendered template.\n */\nexport function renderTemplateString(env, str, variables) {\n  if (!env) {\n    return '';\n  }\n\n  return env.renderString(str, variables);\n}\n\n/**\n * Allow adding custom filters to the template engine.\n * @see {@link http://mozilla.github.io/nunjucks/api#custom-filters}\n * @param {Object} env Nunjucks instance;\n * @param {string} name Filter name.\n * @param {Function} func Filter function.\n * @param {boolean} async Whether the filter should be async.\n */\nexport function addTemplateFilter(env, name, func, async = false) {\n  env.addFilter(name, func, async);\n}\n\n/**\n * Adds built in filters to template renderer.\n * @param {Object} env Nunjucks instance;\n * @param {Object} config Config instance.\n */\nfunction addBuiltinFilters(env, config) {\n  function dateFilter(date, momentTemplate) {\n    if (date == null) {\n      return '';\n    }\n\n    return moment(date, config.get('file.dateFormat'))\n      .format(momentTemplate);\n  }\n\n  [\n    [\n      'date',\n      dateFilter,\n    ],\n    [\n      'groupbydate',\n      // Group items by formating their date via momentjs.\n      // Useful for creating archive pages:\n      // eslint-disable-next-line\n      // {% for date, files in collections.post.files | reverse | groupbydate('MMMM YYYY') %}\n      function groupbydate(data, momentTemplate, dateKey = 'date') {\n        return _.groupBy(data, datum =>\n          dateFilter(datum[dateKey], momentTemplate)\n        );\n      },\n    ],\n    [\n      'slug',\n      function slug(str) {\n        return Url.slug(str);\n      },\n    ],\n    [\n      'absolute_url',\n      function absoluteUrl(relativePath, basePath) {\n        let base = basePath || '';\n        const baseLength = base.length - 1;\n        base = base[baseLength] === '/' ? base.substr(0, baseLength) : base;\n\n        let input = relativePath || '';\n        const inputLength = input.length - 1;\n        if (input[inputLength] !== '/') {\n          input = `${input}/`;\n        }\n        if (input[0] !== '/') {\n          input = `/${input}`;\n        }\n\n        return base + input;\n      },\n    ],\n    [\n      'limit',\n      function limit(arr, length) {\n        return arr.slice(0, length);\n      },\n    ],\n  ].forEach((filter) => {\n    addTemplateFilter(env, ...filter);\n  });\n}\n\n/**\n * Exposed method to configure template engine.\n * @param {Object} options Options object with following properties:\n * @param {Object} options.config Config object.\n * @param {string|Array.<string>} options.paths Either an array of paths or a\n *   singular path that we can load templates from.\n * @param {boolean} options.noCache Whether our template engine should cache\n *   its templates. Only set to true when in watch mode.\n * @return {Object} Nunjucks instance.\n */\nexport function configureTemplateEngine({\n  config,\n  paths,\n  noCache = false,\n}) {\n  const fileSystemLoader = new nunjucks.FileSystemLoader(paths, {\n    noCache,\n  });\n\n  const env = new nunjucks.Environment(fileSystemLoader, {\n    autoescape: false,\n  });\n\n  addBuiltinFilters(env, config);\n\n  return env;\n}\n",
    "static": true,
    "longname": "lib/renderer/template.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "TemplateErrorMessage",
    "memberof": "lib/renderer/template.js",
    "static": true,
    "longname": "lib/renderer/template.js~TemplateErrorMessage",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/renderer/template.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"NO_TEMPLATE\": string}"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "renderTemplate",
    "memberof": "lib/renderer/template.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/renderer/template.js~renderTemplate",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/renderer/template.js",
    "importStyle": "{renderTemplate}",
    "description": "Render a template with given context variables.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "env",
        "description": "Nunjucks instance;"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": "Template name, excluding the extension."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "variables",
        "description": "Object of variables to interpolate in the\n  template."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rendered template."
    }
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "renderTemplateString",
    "memberof": "lib/renderer/template.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/renderer/template.js~renderTemplateString",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/renderer/template.js",
    "importStyle": "{renderTemplateString}",
    "description": "Render a string template with given context variables.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "env",
        "description": "Nunjucks instance;"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "Template string."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "variables",
        "description": "Object of variables to interpolate in the\n  template."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rendered template."
    }
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "addTemplateFilter",
    "memberof": "lib/renderer/template.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/renderer/template.js~addTemplateFilter",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/renderer/template.js",
    "importStyle": "{addTemplateFilter}",
    "description": "Allow adding custom filters to the template engine.",
    "see": [
      "{@link http://mozilla.github.io/nunjucks/api#custom-filters}"
    ],
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "env",
        "description": "Nunjucks instance;"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Filter name."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "Filter function."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "async",
        "description": "Whether the filter should be async."
      }
    ]
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "addBuiltinFilters",
    "memberof": "lib/renderer/template.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/renderer/template.js~addBuiltinFilters",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/renderer/template.js",
    "importStyle": null,
    "description": "Adds built in filters to template renderer.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "env",
        "description": "Nunjucks instance;"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "Config instance."
      }
    ]
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "configureTemplateEngine",
    "memberof": "lib/renderer/template.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/renderer/template.js~configureTemplateEngine",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/renderer/template.js",
    "importStyle": "{configureTemplateEngine}",
    "description": "Exposed method to configure template engine.",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options object with following properties:"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.config",
        "description": "Config object."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.paths",
        "description": "Either an array of paths or a\n  singular path that we can load templates from."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.noCache",
        "description": "Whether our template engine should cache\n  its templates. Only set to true when in watch mode."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Nunjucks instance."
    }
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "lib/server/api.js",
    "content": "import path from 'path';\nimport _ from 'lodash';\nimport fp from 'lodash/fp';\nimport prunePrivateProperties from './prune-private-properties';\n\nexport function ApiService(reptar) {\n  return {\n    config: {\n      get: (request, reply) => reply(reptar.config.get()),\n    },\n    files: {\n      get(request, reply) {\n        const files = reptar.fileSystem.files;\n        const { query } = request;\n\n        function sanitizeFile(file) {\n          if (!file) {\n            return [];\n          }\n          return [prunePrivateProperties(file)];\n        }\n\n        if (query.path) {\n          const pathSource = reptar.config.get('path.source');\n          const value = query.path;\n          const file = files[value] || files[path.join(pathSource, value)];\n          return reply(sanitizeFile(file));\n        }\n\n        if (query.destination) {\n          const value = query.destination;\n          const file = reptar.destination[value] ||\n            reptar.destination[`/${value}`];\n          return reply(sanitizeFile(file));\n        }\n\n        const response = _.flow([\n          fp.filter(\n            [\n              'filtered',\n              'skipProcessing',\n            ].reduce((acc, key) => {\n              if (query[key]) {\n                acc[key] = query[key] !== 'false';\n              }\n\n              return acc;\n            }, {})\n          ),\n          fp.filter((file) => {\n            if (!query.assetProcessor) {\n              return true;\n            }\n            if (query.assetProcessor !== 'false') {\n              return file.assetProcessor != null;\n            }\n            return file.assetProcessor == null;\n          }),\n          fp.map((file) => {\n            const result = prunePrivateProperties(file);\n            if (query.excludeContent) {\n              result.data.content = '[...omitted..]';\n            }\n            return result;\n          }),\n        ])(files);\n\n        return reply(response);\n      },\n    },\n    collections: {\n      get(request, reply) {\n        const { params, query } = request;\n\n        if (!params.id) {\n          return reply(Object.keys(reptar.collections));\n        }\n\n        const collection = reptar.collections[params.id];\n\n        if (!collection) {\n          return reply({});\n        }\n\n        const response = prunePrivateProperties(collection);\n\n        const includes = query.include ? query.include.split(',') : [];\n\n        const sanitize = f => prunePrivateProperties(f);\n        response.pages = response.pages.map(sanitize);\n        response.data.pages = response.data.pages.map(sanitize);\n        response.files = _.mapValues(response.files, sanitize);\n        response.data.files = _.mapValues(response.data.files, sanitize);\n\n        const defaultExcludes = [\n          'pages',\n          'files',\n          'data',\n        ];\n\n        _.difference(defaultExcludes, includes).forEach((prop) => {\n          delete response[prop];\n        });\n\n        return reply(response);\n      },\n    },\n  };\n}\n\nconst ApiPlugin = {\n  register: (server, { reptar }, next) => {\n    const apiService = ApiService(reptar);\n\n    server.route({\n      method: 'GET',\n      path: '/api/config',\n      config: {\n        cors: true,\n      },\n      handler: apiService.config.get,\n    });\n\n    server.route({\n      method: 'GET',\n      path: '/api/files',\n      config: {\n        cors: true,\n      },\n      handler: apiService.files.get,\n    });\n\n    server.route({\n      method: 'GET',\n      path: '/api/collections/{id?}',\n      config: {\n        cors: true,\n      },\n      handler: apiService.collections.get,\n    });\n\n    next();\n  },\n};\n\nApiPlugin.register.attributes = {\n  name: 'api',\n};\n\nexport default ApiPlugin;\n",
    "static": true,
    "longname": "lib/server/api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "ApiService",
    "memberof": "lib/server/api.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/server/api.js~ApiService",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/server/api.js",
    "importStyle": "{ApiService}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "reptar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "name": "ApiPlugin",
    "memberof": "lib/server/api.js",
    "static": true,
    "longname": "lib/server/api.js~ApiPlugin",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/server/api.js",
    "importStyle": "ApiPlugin",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"register\": *}"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "file",
    "name": "lib/server/prune-private-properties.js",
    "content": "import _ from 'lodash';\n\n/**\n * Given an obj it'll prune any properites that start with `_`.\n * @param {Object} obj POJO.\n * @param {Function} isPrivate Function that prunes properties.\n * @return {Object} Pruned object.\n */\nexport default function prunePrivateProperties(\n  obj,\n  isPrivate = (val, key) => key[0] === '_'\n) {\n  return _.reduce(obj, (acc, val, key) => {\n    if (!isPrivate(val, key)) {\n      acc[key] = val;\n    }\n    return acc;\n  }, {});\n}\n",
    "static": true,
    "longname": "lib/server/prune-private-properties.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "prunePrivateProperties",
    "memberof": "lib/server/prune-private-properties.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/server/prune-private-properties.js~prunePrivateProperties",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/server/prune-private-properties.js",
    "importStyle": "prunePrivateProperties",
    "description": "Given an obj it'll prune any properites that start with `_`.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "POJO."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "isPrivate",
        "description": "Function that prunes properties."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Pruned object."
    }
  },
  {
    "__docId__": 219,
    "kind": "file",
    "name": "lib/server/server.js",
    "content": "import path from 'path';\nimport Hapi from 'hapi';\nimport Boom from 'boom';\nimport inert from 'inert';\nimport chokidar from 'chokidar';\nimport Constants from '../constants';\nimport log from '../log';\nimport prunePrivateProperties from './prune-private-properties';\nimport api from './api';\n\nfunction debounceFunction(fn) {\n  return (...args) => {\n    if (fn.running) {\n      return;\n    }\n    fn.running = true;\n    fn(...args).then(() => {\n      fn.running = false;\n    });\n  };\n}\n\nexport default class Server {\n  constructor(reptar) {\n    this.reptar = reptar;\n\n    this.server = new Hapi.Server();\n\n    this.server.connection({\n      host: reptar.config.get('server.host'),\n      port: reptar.config.get('server.port'),\n    });\n  }\n\n  /**\n   * Starts the Hapi server.\n   * @return {Promise}\n   */\n  async start() {\n    await this.server.register([\n      inert,\n      { register: api, options: { reptar: this.reptar } },\n    ]);\n\n    this.server.route({\n      method: 'GET',\n      path: '/{p*}',\n      handler: (request, reply) => {\n        this.routeHandler(request, reply).catch((e) => {\n          reply(Boom.badData(e.message));\n        });\n      },\n    });\n\n    this.createFsWatchers();\n\n    // Start the server\n    return this.server.start();\n  }\n\n  /**\n   * Get File/CollectionPage based on request.path.\n   * @param {string} requestPath Request path to server.\n   * @return {File|CollectionPage}\n   */\n  getFile(requestPath) {\n    let file = this.reptar.destination[requestPath];\n    if (!file) {\n      file = this.reptar.destination[path.join(requestPath, 'index.html')];\n    }\n    return file;\n  }\n\n  /**\n   * Our default route handler for every request.\n   * @param {Object} request Hapi Request object.\n   * @param {Object} reply Hapi Response object.\n   * @return {Promise}\n   */\n  routeHandler = async (request, reply) => {\n    const isDebug = request.query.debug != null;\n\n    const file = this.getFile(request.path);\n\n    if (file.assetProcessor) {\n      const content = await file.render();\n      const contentType = request.server.mime.path(request.path).type;\n      return reply(content).type(contentType);\n    }\n\n    // If this File does not require any processing then it's a static asset\n    // and we can just render it.\n    if (file.skipProcessing) {\n      return reply.file(file.path);\n    }\n\n    // Update the File/CollectionPage from disk.\n    await file.update(this.reptar.metadata.get());\n\n    // We need to make sure we run all middleware and lifecycle hooks on\n    // every render to ensure you get an accurate representation of your site.\n    await this.reptar.update({ skipFiles: true });\n\n    // Render the File/CollectionPage.\n    const content = await file.render(this.reptar.metadata.get());\n\n    // If we want debug information then render the JSON version.\n    if (isDebug) {\n      // Exclude private fields from being returned.\n      const debugFile = prunePrivateProperties(file);\n      return reply(JSON.stringify(debugFile)).type('application/json');\n    }\n\n    log.info(`Rendering ${file.id}`);\n\n    return reply(content);\n  }\n\n  /**\n   * Create file system watchers to update Reptar state according to when a\n   * user updates files.\n   */\n  createFsWatchers() {\n    chokidar.watch([\n      path.join(this.reptar.config.root, Constants.ConfigFilename),\n    ]).on('change', debounceFunction(async (changePath) => {\n      log.info(`${Constants.ConfigFilename} updated at ${changePath}`);\n\n      try {\n        await this.reptar.update();\n      } catch (e) {\n        log.error(e);\n      }\n    }));\n\n    chokidar.watch([\n      this.reptar.config.get('path.data'),\n    ]).on('change', debounceFunction(async (changePath) => {\n      log.info(`Data updated at ${changePath}`);\n\n      try {\n        await this.reptar.update();\n      } catch (e) {\n        log.error(e);\n      }\n    }));\n  }\n}\n",
    "static": true,
    "longname": "lib/server/server.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 220,
    "kind": "function",
    "name": "debounceFunction",
    "memberof": "lib/server/server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/server/server.js~debounceFunction",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "class",
    "name": "Server",
    "memberof": "lib/server/server.js",
    "static": true,
    "longname": "lib/server/server.js~Server",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/server/server.js",
    "importStyle": "Server",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 222,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/server/server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/server/server.js~Server#constructor",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "reptar",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "reptar",
    "memberof": "lib/server/server.js~Server",
    "static": false,
    "longname": "lib/server/server.js~Server#reptar",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "server",
    "memberof": "lib/server/server.js~Server",
    "static": false,
    "longname": "lib/server/server.js~Server#server",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "start",
    "memberof": "lib/server/server.js~Server",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/server/server.js~Server#start",
    "access": null,
    "description": "Starts the Hapi server.",
    "lineNumber": 39,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "getFile",
    "memberof": "lib/server/server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/server/server.js~Server#getFile",
    "access": null,
    "description": "Get File/CollectionPage based on request.path.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "requestPath",
        "description": "Request path to server."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File",
        "CollectionPage"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "routeHandler",
    "memberof": "lib/server/server.js~Server",
    "static": false,
    "longname": "lib/server/server.js~Server#routeHandler",
    "access": null,
    "description": "Our default route handler for every request.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "Hapi Request object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "Hapi Response object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "createFsWatchers",
    "memberof": "lib/server/server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/server/server.js~Server#createFsWatchers",
    "access": null,
    "description": "Create file system watchers to update Reptar state according to when a\nuser updates files.",
    "lineNumber": 123,
    "params": []
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "lib/url.js",
    "content": "import moment from 'moment';\nimport slug from 'slug';\nimport path from 'path';\n\n/**\n * Are we running within a dist build (i.e. pre-compiled)?\n * @type {boolean} True if we're running in the dist folder.\n */\nconst isDistBuild = __dirname.indexOf('dist') > -1;\n\n// Cached slug options.\nlet slugOptions;\n\nconst Url = {\n  /**\n   * Interpolates variables into a permalink structure.\n   * @example\n   * // returns '/hello-world/'\n   * interpolatePermalink('/:title/', {\n   *   title: 'hello-world'\n   * });\n   * @param {string} permalink A permalink template.\n   * @param {Object} context An object with keys that if matched to the\n   *   permalink will have the value interpolated to the string.\n   * @return {string} Actual permalink value.\n   */\n  interpolatePermalink(permalink, context) {\n    // eslint-disable-next-line no-useless-escape\n    const PERMALINK_REGEX = /:(\\w+[\\|A-Z]*)/g;\n\n    const params = permalink.match(PERMALINK_REGEX);\n\n    // If we found no tags in the permalink then just return the given string.\n    if (!params) {\n      return permalink;\n    }\n\n    let result = permalink;\n\n    params.forEach((param) => {\n      // Replace ':title' -> 'title'.\n      let paramKey = param.substr(1);\n\n      let paramPipe;\n      if (paramKey.includes('|')) {\n        [paramKey, paramPipe] = paramKey.split('|');\n      }\n\n      let paramValue = context[paramKey];\n\n      if (paramValue) {\n        if (paramPipe) {\n          paramValue = moment(paramValue).format(paramPipe);\n        }\n        const sanitized = Url.slug(paramValue);\n        result = result.replace(param, sanitized);\n      } else {\n        throw new Error(`${'interpolatePermalink: could not find param value ' +\n          'for key: '}${paramKey}`);\n      }\n    });\n\n    return result;\n  },\n\n  /**\n   * Wrapper around the slug module. Handles taking a string and making it\n   * into a slug, a URL safe string.\n   * @param {string} str String to slugify.\n   * @param {Object} options Slug options.\n   * @return {string} Slugified string.\n   */\n  slug(str, options) {\n    return slug(str, {\n      ...slugOptions,\n      options,\n    });\n  },\n\n  /**\n   * Set slug options to be used by Url.slug.\n   * @param {Object} options Options\n   */\n  setSlugOptions(options) {\n    slugOptions = options;\n  },\n\n  /**\n   * Replaces a markdown file path with `.html` if it's a known markdown file.\n   * @param {string} filePath A file path.\n   * @param {Array.<string>} markdownExtensions Array of known markdown file\n   *   extensions.\n   * @return {string} Modified file path.\n   */\n  replaceMarkdownExtension(filePath, markdownExtensions) {\n    // Get file extension of file. i.e. 'post.md' would give 'md'.\n    const fileExtension = path.extname(filePath).replace(/^\\./, '');\n    const index = markdownExtensions.indexOf(fileExtension);\n\n    let result = filePath;\n\n    // Is this file's extension one of our known markdown extensions?\n    if (index > -1) {\n      const foundExtension = markdownExtensions[index];\n      result = filePath.replace(\n        new RegExp(`.${foundExtension}$`),\n        '.html'\n      );\n    }\n\n    return result;\n  },\n\n  /**\n   * When writing to the file system update the permalink so that it renders\n   * correctly.\n   * @example\n   * // returns '/hello-world/index.html'\n   * Url.makeUrlFileSystemSafe('/hello-world');\n   * @param {string} url Url to make file system safe.\n   * @return {string} Safe url.\n   */\n  makeUrlFileSystemSafe(url) {\n    let result = url;\n\n    // If the url does not end with an extension then we need to modify the URL.\n    if (!path.extname(url)) {\n      // If we don't have a leading / then add it.\n      if (!url.startsWith('/')) {\n        result = `/${url}`;\n      }\n\n      // If we don't have a trailing / then add it.\n      if (!url.endsWith('/')) {\n        result += '/';\n      }\n\n      // Append the default file name.\n      result += 'index.html';\n    }\n\n    return result;\n  },\n\n  /**\n   * Given a URL that ends with 'index.html' it'll strip it off and return the\n   * resulting value. Useful when creating URLs in a template.\n   * @param {string} url Url to augment.\n   * @return {string} Augmented url.\n   */\n  makePretty(url) {\n    const makePrettyRegEx = /\\/index.html$/;\n    return url.replace(makePrettyRegEx, '/');\n  },\n\n  /**\n   * Resolve a path from the root of the project, taking into account\n   * the relative depth we need to go to get to the root of the project,\n   * depending if we're in a pre-compiled build or not.\n   * @param {...string} args Splat of strings.\n   * @return {string} Full path.\n   */\n  pathFromRoot(...args) {\n    // Push relative distance from root of project.\n    args.unshift(\n      isDistBuild ? '../../' : '../'\n    );\n\n    // Add dirname relative from.\n    args.unshift(__dirname);\n\n    return path.resolve(...args);\n  },\n};\n\nexport default Url;\n",
    "static": true,
    "longname": "lib/url.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "name": "isDistBuild",
    "memberof": "lib/url.js",
    "static": true,
    "longname": "lib/url.js~isDistBuild",
    "access": null,
    "export": false,
    "importPath": "reptar/lib/url.js",
    "importStyle": null,
    "description": "Are we running within a dist build (i.e. pre-compiled)?",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "name": "Url",
    "memberof": "lib/url.js",
    "static": true,
    "longname": "lib/url.js~Url",
    "access": null,
    "export": true,
    "importPath": "reptar/lib/url.js",
    "importStyle": "Url",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"interpolatePermalink\": function, \"slug\": function, \"setSlugOptions\": function, \"replaceMarkdownExtension\": function, \"makeUrlFileSystemSafe\": function, \"makePretty\": function, \"pathFromRoot\": function}"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 238,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 239,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 240,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 241,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 242,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 243,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 244,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 245,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 246,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 247,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 248,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 249,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 250,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 251,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 252,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 253,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 254,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 255,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 256,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 257,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 258,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 259,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 260,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 261,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 262,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 263,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 264,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 265,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 267,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 268,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 269,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 270,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 271,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 274,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 275,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 276,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 277,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 278,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 279,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 281,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 282,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 283,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 284,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 285,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 286,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 287,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 288,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  },
  {
    "__docId__": 289,
    "kind": "testFile",
    "name": "test/e2e/api.spec.js",
    "content": "import path from 'path';\nimport assert from 'assert';\nimport sinon from 'sinon';\nimport fs from 'fs-extra';\n\nimport {\n  simpleSite,\n} from '../utils';\n\nimport Reptar from '../../lib/index';\nimport { ApiService } from '../../lib/server/api';\nimport cache from '../../lib/cache';\nimport Config from '../../lib/config/index';\nimport log from '../../lib/log';\n\nlog.setSilent(true);\n\ndescribe('api', function test() {\n  this.timeout(5000);\n\n  const generatedOutputDir = path.join(simpleSite.src, '_site');\n\n  let sandbox;\n  let instance;\n  let apiService;\n  let request;\n  let reply;\n\n  before(async () => {\n    sandbox = sinon.sandbox.create();\n\n    // Don't actually save cache to file system.\n    sandbox.stub(cache, 'save');\n\n    fs.removeSync(generatedOutputDir);\n\n    sandbox.spy(Reptar.prototype, 'update');\n    sandbox.spy(Config.prototype, 'update');\n\n    instance = new Reptar({\n      rootPath: simpleSite.src,\n      showSpinner: false,\n    });\n    await instance.update();\n\n    apiService = ApiService(instance);\n  });\n\n  beforeEach(() => {\n    request = {\n      query: {},\n      payload: {},\n      params: {},\n    };\n    reply = sandbox.spy();\n  });\n\n  afterEach(() => {\n    reply.reset();\n  });\n\n  after(() => {\n    sandbox.restore();\n  });\n\n  describe('config handlers', () => {\n    beforeEach(() =>\n      apiService.config.get(request, reply)\n    );\n\n    it('returns the config object', () => {\n      assert(reply.firstCall.calledWith(instance.config.get()));\n    });\n  });\n\n  describe('files.get handler', () => {\n    let response;\n\n    function commonAssertions({\n      expectedLength,\n    }) {\n      it('returns an array', () => {\n        assert.equal(typeof response.length, 'number');\n      });\n\n      it(`returns ${expectedLength} items`, () => {\n        assert.equal(response.length, expectedLength);\n      });\n    }\n\n    afterEach(() => {\n      response = undefined;\n    });\n\n    describe('without any query params', () => {\n      beforeEach(async () => {\n        await apiService.files.get(request, reply);\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 12,\n      });\n    });\n\n    describe('when filtered=true', () => {\n      beforeEach(async () => {\n        request.query = {\n          filtered: 'true',\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 1,\n      });\n\n      it('every item is filtered', () => {\n        response.forEach(file =>\n          assert.equal(file.filtered, true)\n        );\n      });\n    });\n\n    describe('when filtered=false', () => {\n      beforeEach(async () => {\n        request.query = {\n          filtered: 'false',\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 11,\n      });\n\n      it('every item is not filtered', () => {\n        response.forEach(file =>\n          assert.equal(file.filtered, false)\n        );\n      });\n    });\n\n    describe('when skipProcessing=true', () => {\n      beforeEach(async () => {\n        request.query = {\n          skipProcessing: 'true',\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 4,\n      });\n\n      it('every item is skipProcessing', () => {\n        response.forEach(file =>\n          assert.equal(file.skipProcessing, true)\n        );\n      });\n    });\n\n    describe('when skipProcessing=false', () => {\n      beforeEach(async () => {\n        request.query = {\n          skipProcessing: 'false',\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 8,\n      });\n\n      it('every item is skipProcessing', () => {\n        response.forEach(file =>\n          assert.equal(file.skipProcessing, false)\n        );\n      });\n    });\n\n    describe('when assetProcessor=true', () => {\n      beforeEach(async () => {\n        request.query = {\n          assetProcessor: 'true',\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 3,\n      });\n\n      it('every item is assetProcessor', () => {\n        response.forEach(file =>\n          assert(file.assetProcessor)\n        );\n      });\n    });\n\n    describe('when assetProcessor=false', () => {\n      beforeEach(async () => {\n        request.query = {\n          assetProcessor: 'false',\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 9,\n      });\n\n      it('every item is assetProcessor', () => {\n        response.forEach(file =>\n          assert.equal(file.assetProcessor, null)\n        );\n      });\n    });\n\n    describe('when path does not match a file', () => {\n      beforeEach(async () => {\n        request.query = {\n          path: 'badabada',\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 0,\n      });\n    });\n\n    describe('when path does match a file', () => {\n      let filePath;\n\n      beforeEach(async () => {\n        filePath = path.join(instance.config.get('path.source'), 'about.md');\n\n        request.query = {\n          path: filePath,\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 1,\n      });\n\n      it('the file returned is the one we requested', () => {\n        assert.equal(response[0].path, filePath);\n      });\n    });\n\n    describe('when the path is relative and matches', () => {\n      const filePath = 'about.md';\n      let fullPath;\n\n      beforeEach(async () => {\n        fullPath = path.join(instance.config.get('path.source'), filePath);\n\n        request.query = {\n          path: filePath,\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 1,\n      });\n\n      it('the file returned is the one we requested', () => {\n        assert.equal(response[0].path, fullPath);\n      });\n    });\n\n    //\n    //\n    describe('when destination does not match a file', () => {\n      beforeEach(async () => {\n        request.query = {\n          destination: 'badabada',\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 0,\n      });\n    });\n\n    describe('when destination does match a file', () => {\n      const filePath = '/about.html';\n\n      beforeEach(async () => {\n        request.query = {\n          destination: filePath,\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 1,\n      });\n\n      it('the file returned is the one we requested', () => {\n        assert.equal(response[0].destination, filePath);\n      });\n    });\n\n    describe('when the destination is relative and matches', () => {\n      const filePath = 'about.html';\n\n      beforeEach(async () => {\n        request.query = {\n          destination: filePath,\n        };\n\n        await apiService.files.get(request, reply);\n\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 1,\n      });\n\n      it('the file returned is the one we requested', () => {\n        assert.equal(response[0].destination, `/${filePath}`);\n      });\n    });\n  });\n\n  describe('collections.get handler', () => {\n    let response;\n\n    function commonAssertions({\n      expectedLength,\n    }) {\n      it('returns an array', () => {\n        assert.equal(typeof response.length, 'number');\n      });\n\n      it(`returns ${expectedLength} items`, () => {\n        assert.equal(response.length, expectedLength);\n      });\n    }\n\n    afterEach(() => {\n      response = undefined;\n    });\n\n    describe('without any query params', () => {\n      beforeEach(async () => {\n        await apiService.collections.get(request, reply);\n        response = reply.firstCall.args[0];\n      });\n\n      commonAssertions({\n        expectedLength: 2,\n      });\n\n      it('returns an array of just collection names', () => {\n        assert.deepEqual(response, ['post', 'tag']);\n      });\n    });\n\n    function commonOneCollection({ id }) {\n      it('returns an object', () => {\n        assert.equal(typeof response, 'object');\n      });\n\n      it('the object matches the request id', () => {\n        assert.equal(response.id, id);\n      });\n    }\n\n    describe('when requesting one collection', () => {\n      const id = 'post';\n\n      beforeEach(async () => {\n        request.params.id = id;\n        await apiService.collections.get(request, reply);\n        response = reply.firstCall.args[0];\n      });\n\n      commonOneCollection({ id });\n\n      it('the object does not have properties that excluded by default', () => {\n        [\n          'pages',\n          'files',\n          'data',\n        ].forEach(prop =>\n          assert.equal(typeof response[prop], 'undefined')\n        );\n      });\n    });\n\n    describe('when requesting one collection with include param', () => {\n      const id = 'post';\n\n      beforeEach(async () => {\n        request.params.id = id;\n        request.query.include = 'pages';\n        await apiService.collections.get(request, reply);\n        response = reply.firstCall.args[0];\n      });\n\n      commonOneCollection({ id });\n\n      it('the object has a pages property which is an array', () => {\n        assert.equal(typeof response.pages.length, 'number');\n      });\n\n      it('pages has expected length', () => {\n        assert.equal(response.pages.length, 1);\n      });\n\n      it('the object does not have properties that excluded by default', () => {\n        [\n          'files',\n          'data',\n        ].forEach(prop =>\n          assert.equal(typeof response[prop], 'undefined')\n        );\n      });\n    });\n\n    describe(\n      'when requesting one collection with multiple include values',\n    () => {\n      const id = 'post';\n\n      beforeEach(async () => {\n        request.params.id = id;\n        request.query.include = 'pages,files';\n        await apiService.collections.get(request, reply);\n        response = reply.firstCall.args[0];\n      });\n\n      commonOneCollection({ id });\n\n      it('the object has a pages property which is an array', () => {\n        assert.equal(typeof response.pages.length, 'number');\n      });\n\n      it('pages has expected length', () => {\n        assert.equal(response.pages.length, 1);\n      });\n\n      it('files is an object', () => {\n        assert.equal(typeof response.files, 'object');\n      });\n\n      it('files is not an array object', () => {\n        assert.equal(typeof response.files.length, 'undefined');\n      });\n\n      it('the object does not have properties that excluded by default', () => {\n        [\n          'data',\n        ].forEach(prop =>\n          assert.equal(typeof response[prop], 'undefined')\n        );\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/e2e/api.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 290,
    "kind": "testDescribe",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/e2e/api.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0",
    "access": null,
    "description": "api",
    "lineNumber": 18
  },
  {
    "__docId__": 291,
    "kind": "testDescribe",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/e2e/api.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe1",
    "access": null,
    "description": "config handlers",
    "lineNumber": 66
  },
  {
    "__docId__": 292,
    "kind": "testIt",
    "name": "it2",
    "testId": 2,
    "memberof": "test/e2e/api.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe1.it2",
    "access": null,
    "description": "returns the config object",
    "lineNumber": 71
  },
  {
    "__docId__": 293,
    "kind": "testDescribe",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/e2e/api.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3",
    "access": null,
    "description": "files.get handler",
    "lineNumber": 76
  },
  {
    "__docId__": 294,
    "kind": "testIt",
    "name": "it4",
    "testId": 4,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.it4",
    "access": null,
    "description": "returns an array",
    "lineNumber": 82
  },
  {
    "__docId__": 295,
    "kind": "testIt",
    "name": "it5",
    "testId": 5,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.it5",
    "access": null,
    "lineNumber": 86
  },
  {
    "__docId__": 296,
    "kind": "testDescribe",
    "name": "describe6",
    "testId": 6,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe6",
    "access": null,
    "description": "without any query params",
    "lineNumber": 95
  },
  {
    "__docId__": 297,
    "kind": "testDescribe",
    "name": "describe7",
    "testId": 7,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe7",
    "access": null,
    "description": "when filtered=true",
    "lineNumber": 106
  },
  {
    "__docId__": 298,
    "kind": "testIt",
    "name": "it8",
    "testId": 8,
    "memberof": "test/e2e/api.spec.js~describe0.describe3.describe7",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe7.it8",
    "access": null,
    "description": "every item is filtered",
    "lineNumber": 121
  },
  {
    "__docId__": 299,
    "kind": "testDescribe",
    "name": "describe9",
    "testId": 9,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe9",
    "access": null,
    "description": "when filtered=false",
    "lineNumber": 128
  },
  {
    "__docId__": 300,
    "kind": "testIt",
    "name": "it10",
    "testId": 10,
    "memberof": "test/e2e/api.spec.js~describe0.describe3.describe9",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe9.it10",
    "access": null,
    "description": "every item is not filtered",
    "lineNumber": 143
  },
  {
    "__docId__": 301,
    "kind": "testDescribe",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe11",
    "access": null,
    "description": "when skipProcessing=true",
    "lineNumber": 150
  },
  {
    "__docId__": 302,
    "kind": "testIt",
    "name": "it12",
    "testId": 12,
    "memberof": "test/e2e/api.spec.js~describe0.describe3.describe11",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe11.it12",
    "access": null,
    "description": "every item is skipProcessing",
    "lineNumber": 165
  },
  {
    "__docId__": 303,
    "kind": "testDescribe",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe13",
    "access": null,
    "description": "when skipProcessing=false",
    "lineNumber": 172
  },
  {
    "__docId__": 304,
    "kind": "testIt",
    "name": "it14",
    "testId": 14,
    "memberof": "test/e2e/api.spec.js~describe0.describe3.describe13",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe13.it14",
    "access": null,
    "description": "every item is skipProcessing",
    "lineNumber": 187
  },
  {
    "__docId__": 305,
    "kind": "testDescribe",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe15",
    "access": null,
    "description": "when assetProcessor=true",
    "lineNumber": 194
  },
  {
    "__docId__": 306,
    "kind": "testIt",
    "name": "it16",
    "testId": 16,
    "memberof": "test/e2e/api.spec.js~describe0.describe3.describe15",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe15.it16",
    "access": null,
    "description": "every item is assetProcessor",
    "lineNumber": 209
  },
  {
    "__docId__": 307,
    "kind": "testDescribe",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe17",
    "access": null,
    "description": "when assetProcessor=false",
    "lineNumber": 216
  },
  {
    "__docId__": 308,
    "kind": "testIt",
    "name": "it18",
    "testId": 18,
    "memberof": "test/e2e/api.spec.js~describe0.describe3.describe17",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe17.it18",
    "access": null,
    "description": "every item is assetProcessor",
    "lineNumber": 231
  },
  {
    "__docId__": 309,
    "kind": "testDescribe",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe19",
    "access": null,
    "description": "when path does not match a file",
    "lineNumber": 238
  },
  {
    "__docId__": 310,
    "kind": "testDescribe",
    "name": "describe20",
    "testId": 20,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe20",
    "access": null,
    "description": "when path does match a file",
    "lineNumber": 254
  },
  {
    "__docId__": 311,
    "kind": "testIt",
    "name": "it21",
    "testId": 21,
    "memberof": "test/e2e/api.spec.js~describe0.describe3.describe20",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe20.it21",
    "access": null,
    "description": "the file returned is the one we requested",
    "lineNumber": 273
  },
  {
    "__docId__": 312,
    "kind": "testDescribe",
    "name": "describe22",
    "testId": 22,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe22",
    "access": null,
    "description": "when the path is relative and matches",
    "lineNumber": 278
  },
  {
    "__docId__": 313,
    "kind": "testIt",
    "name": "it23",
    "testId": 23,
    "memberof": "test/e2e/api.spec.js~describe0.describe3.describe22",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe22.it23",
    "access": null,
    "description": "the file returned is the one we requested",
    "lineNumber": 298
  },
  {
    "__docId__": 314,
    "kind": "testDescribe",
    "name": "describe24",
    "testId": 24,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe24",
    "access": null,
    "description": "when destination does not match a file",
    "lineNumber": 305
  },
  {
    "__docId__": 315,
    "kind": "testDescribe",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe25",
    "access": null,
    "description": "when destination does match a file",
    "lineNumber": 321
  },
  {
    "__docId__": 316,
    "kind": "testIt",
    "name": "it26",
    "testId": 26,
    "memberof": "test/e2e/api.spec.js~describe0.describe3.describe25",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe25.it26",
    "access": null,
    "description": "the file returned is the one we requested",
    "lineNumber": 338
  },
  {
    "__docId__": 317,
    "kind": "testDescribe",
    "name": "describe27",
    "testId": 27,
    "memberof": "test/e2e/api.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe27",
    "access": null,
    "description": "when the destination is relative and matches",
    "lineNumber": 343
  },
  {
    "__docId__": 318,
    "kind": "testIt",
    "name": "it28",
    "testId": 28,
    "memberof": "test/e2e/api.spec.js~describe0.describe3.describe27",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe3.describe27.it28",
    "access": null,
    "description": "the file returned is the one we requested",
    "lineNumber": 360
  },
  {
    "__docId__": 319,
    "kind": "testDescribe",
    "name": "describe29",
    "testId": 29,
    "memberof": "test/e2e/api.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29",
    "access": null,
    "description": "collections.get handler",
    "lineNumber": 366
  },
  {
    "__docId__": 320,
    "kind": "testIt",
    "name": "it30",
    "testId": 30,
    "memberof": "test/e2e/api.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.it30",
    "access": null,
    "description": "returns an array",
    "lineNumber": 372
  },
  {
    "__docId__": 321,
    "kind": "testIt",
    "name": "it31",
    "testId": 31,
    "memberof": "test/e2e/api.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.it31",
    "access": null,
    "lineNumber": 376
  },
  {
    "__docId__": 322,
    "kind": "testDescribe",
    "name": "describe32",
    "testId": 32,
    "memberof": "test/e2e/api.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe32",
    "access": null,
    "description": "without any query params",
    "lineNumber": 385
  },
  {
    "__docId__": 323,
    "kind": "testIt",
    "name": "it33",
    "testId": 33,
    "memberof": "test/e2e/api.spec.js~describe0.describe29.describe32",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe32.it33",
    "access": null,
    "description": "returns an array of just collection names",
    "lineNumber": 395
  },
  {
    "__docId__": 324,
    "kind": "testIt",
    "name": "it34",
    "testId": 34,
    "memberof": "test/e2e/api.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.it34",
    "access": null,
    "description": "returns an object",
    "lineNumber": 401
  },
  {
    "__docId__": 325,
    "kind": "testIt",
    "name": "it35",
    "testId": 35,
    "memberof": "test/e2e/api.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.it35",
    "access": null,
    "description": "the object matches the request id",
    "lineNumber": 405
  },
  {
    "__docId__": 326,
    "kind": "testDescribe",
    "name": "describe36",
    "testId": 36,
    "memberof": "test/e2e/api.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe36",
    "access": null,
    "description": "when requesting one collection",
    "lineNumber": 410
  },
  {
    "__docId__": 327,
    "kind": "testIt",
    "name": "it37",
    "testId": 37,
    "memberof": "test/e2e/api.spec.js~describe0.describe29.describe36",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe36.it37",
    "access": null,
    "description": "the object does not have properties that excluded by default",
    "lineNumber": 421
  },
  {
    "__docId__": 328,
    "kind": "testDescribe",
    "name": "describe38",
    "testId": 38,
    "memberof": "test/e2e/api.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe38",
    "access": null,
    "description": "when requesting one collection with include param",
    "lineNumber": 432
  },
  {
    "__docId__": 329,
    "kind": "testIt",
    "name": "it39",
    "testId": 39,
    "memberof": "test/e2e/api.spec.js~describe0.describe29.describe38",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe38.it39",
    "access": null,
    "description": "the object has a pages property which is an array",
    "lineNumber": 444
  },
  {
    "__docId__": 330,
    "kind": "testIt",
    "name": "it40",
    "testId": 40,
    "memberof": "test/e2e/api.spec.js~describe0.describe29.describe38",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe38.it40",
    "access": null,
    "description": "pages has expected length",
    "lineNumber": 448
  },
  {
    "__docId__": 331,
    "kind": "testIt",
    "name": "it41",
    "testId": 41,
    "memberof": "test/e2e/api.spec.js~describe0.describe29.describe38",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe38.it41",
    "access": null,
    "description": "the object does not have properties that excluded by default",
    "lineNumber": 452
  },
  {
    "__docId__": 332,
    "kind": "testDescribe",
    "name": "describe42",
    "testId": 42,
    "memberof": "test/e2e/api.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe42",
    "access": null,
    "description": "when requesting one collection with multiple include values",
    "lineNumber": 462
  },
  {
    "__docId__": 333,
    "kind": "testIt",
    "name": "it43",
    "testId": 43,
    "memberof": "test/e2e/api.spec.js~describe0.describe29.describe42",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe42.it43",
    "access": null,
    "description": "the object has a pages property which is an array",
    "lineNumber": 476
  },
  {
    "__docId__": 334,
    "kind": "testIt",
    "name": "it44",
    "testId": 44,
    "memberof": "test/e2e/api.spec.js~describe0.describe29.describe42",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe42.it44",
    "access": null,
    "description": "pages has expected length",
    "lineNumber": 480
  },
  {
    "__docId__": 335,
    "kind": "testIt",
    "name": "it45",
    "testId": 45,
    "memberof": "test/e2e/api.spec.js~describe0.describe29.describe42",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe42.it45",
    "access": null,
    "description": "files is an object",
    "lineNumber": 484
  },
  {
    "__docId__": 336,
    "kind": "testIt",
    "name": "it46",
    "testId": 46,
    "memberof": "test/e2e/api.spec.js~describe0.describe29.describe42",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe42.it46",
    "access": null,
    "description": "files is not an array object",
    "lineNumber": 488
  },
  {
    "__docId__": 337,
    "kind": "testIt",
    "name": "it47",
    "testId": 47,
    "memberof": "test/e2e/api.spec.js~describe0.describe29.describe42",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/api.spec.js~describe0.describe29.describe42.it47",
    "access": null,
    "description": "the object does not have properties that excluded by default",
    "lineNumber": 492
  },
  {
    "__docId__": 338,
    "kind": "testFile",
    "name": "test/e2e/yarn.spec.js",
    "content": "import path from 'path';\nimport assert from 'assert';\nimport sinon from 'sinon';\nimport _ from 'lodash';\nimport fs from 'fs-extra';\n\nimport {\n  getAllFilePaths,\n  simpleSite,\n} from '../utils';\n\nimport Reptar from '../../lib/index';\nimport cache from '../../lib/cache';\nimport Config from '../../lib/config/index';\nimport log from '../../lib/log';\n\nlog.setSilent(true);\n\ndescribe('reptar Reptar', function test() {\n  this.timeout(5000);\n\n  const generatedOutputDir = path.join(simpleSite.src, '_site');\n\n  let sandbox;\n  let instance;\n\n  before(async () => {\n    sandbox = sinon.sandbox.create();\n\n    // Don't actually save cache to file system.\n    sandbox.stub(cache, 'save');\n\n    fs.removeSync(generatedOutputDir);\n\n    sandbox.spy(Reptar.prototype, 'update');\n    sandbox.spy(Config.prototype, 'update');\n\n    instance = new Reptar({\n      rootPath: simpleSite.src,\n      showSpinner: false,\n    });\n\n    instance._test = {\n      middlewares: [],\n      lifecycle: {\n        willUpdate: [],\n        didUpdate: [],\n        willBuild: [],\n        didBuild: [],\n      },\n    };\n  });\n\n  after(() => {\n    sandbox.restore();\n  });\n\n  it('does not call update', async () => {\n    assert.equal(instance.update.callCount, 0);\n  });\n\n  it('has not called any middleware functions', () => {\n    assert(_.isArray(instance._test.middlewares));\n    assert.equal(instance._test.middlewares.length, 0);\n  });\n\n  it('has not called any lifecycle functions', () => {\n    _.forEach(instance._test.lifecycle, (val) => {\n      assert(_.isArray(val));\n      assert.equal(val.length, 0);\n    });\n  });\n\n  describe('when updated', () => {\n    before(async () => {\n      await instance.update();\n    });\n\n    it('creates expected instances', async () => {\n      assert.equal(instance.update.callCount, 1);\n\n      assert(instance.config instanceof Config);\n      assert.equal(instance.config.update.callCount, 1);\n\n      assert(_.isObject(instance.fileSystem.files));\n      assert(_.isObject(instance.metadata.get()));\n      assert(_.isObject(instance.metadata.get('collections')));\n    });\n\n    it('calls every middleware function', () => {\n      assert.equal(\n        instance._test.middlewares.length,\n        instance.config.get('middlewares').length\n      );\n    });\n\n    it('calls every middleware function in the expected order', () => {\n      _.reduce(instance._test.middlewares, (prevValue, nextValue) => {\n        assert(nextValue > prevValue);\n        return nextValue;\n      });\n    });\n\n    it('willUpdate is called before didUpdate', () => {\n      const {\n        willUpdate,\n        didUpdate,\n      } = instance._test.lifecycle;\n\n      assert(willUpdate[0] < didUpdate[0]);\n    });\n\n    it('didUpdate is called before the first middleware', () => {\n      const {\n        didUpdate,\n      } = instance._test.lifecycle;\n\n      assert(didUpdate[0] < instance._test.middlewares[0]);\n    });\n\n    it('willBuild is not called', () => {\n      assert.equal(instance._test.lifecycle.willBuild, 0);\n    });\n\n    it('didBuild is not called', () => {\n      assert.equal(instance._test.lifecycle.didBuild, 0);\n    });\n\n    describe('and when build is called', () => {\n      function makePathsRelative(basePath) {\n        return allPaths => allPaths.reduce((acc, absPath) => {\n          const relativePath = absPath.replace(basePath, '');\n          acc[relativePath] = absPath;\n          return acc;\n        }, {});\n      }\n\n      let expectedFiles;\n      let generatedFiles;\n\n      before(async () => {\n        await instance.build();\n\n        expectedFiles = await getAllFilePaths(simpleSite.expected)\n          .then(makePathsRelative(simpleSite.expected));\n\n        generatedFiles = await getAllFilePaths(generatedOutputDir)\n          .then(makePathsRelative(generatedOutputDir));\n      });\n\n      it('has the same number of files generated', () => {\n        assert.deepEqual(\n          Object.keys(expectedFiles),\n          Object.keys(generatedFiles)\n        );\n        assert.equal(expectedFiles.length, generatedFiles.length);\n      });\n\n      it('builds site correctly', async () => {\n        _.forEach(expectedFiles, (absolutePath, relativePath) => {\n          const generatedAbsolutePath = generatedFiles[relativePath];\n\n          const expectedFile = fs.readFileSync(absolutePath, 'utf8');\n          const generatedFile = fs.readFileSync(generatedAbsolutePath, 'utf8');\n\n          assert.equal(\n            generatedFile,\n            expectedFile,\n            `${generatedAbsolutePath} generated incorrectly`\n          );\n        });\n      });\n\n      it('last middleware is called before willBuild', () => {\n        const {\n          willBuild,\n        } = instance._test.lifecycle;\n\n        const lastMiddleware = instance._test.middlewares[\n          instance._test.middlewares.length - 1\n        ];\n\n        assert(lastMiddleware < willBuild[0]);\n      });\n\n      it('willBuild is called before didBuild', () => {\n        const {\n          willBuild,\n          didBuild,\n        } = instance._test.lifecycle;\n\n        assert(willBuild[0] < didBuild[0]);\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/e2e/yarn.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 339,
    "kind": "testDescribe",
    "name": "describe48",
    "testId": 48,
    "memberof": "test/e2e/yarn.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48",
    "access": null,
    "description": "reptar Reptar",
    "lineNumber": 19
  },
  {
    "__docId__": 340,
    "kind": "testIt",
    "name": "it49",
    "testId": 49,
    "memberof": "test/e2e/yarn.spec.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.it49",
    "access": null,
    "description": "does not call update",
    "lineNumber": 58
  },
  {
    "__docId__": 341,
    "kind": "testIt",
    "name": "it50",
    "testId": 50,
    "memberof": "test/e2e/yarn.spec.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.it50",
    "access": null,
    "description": "has not called any middleware functions",
    "lineNumber": 62
  },
  {
    "__docId__": 342,
    "kind": "testIt",
    "name": "it51",
    "testId": 51,
    "memberof": "test/e2e/yarn.spec.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.it51",
    "access": null,
    "description": "has not called any lifecycle functions",
    "lineNumber": 67
  },
  {
    "__docId__": 343,
    "kind": "testDescribe",
    "name": "describe52",
    "testId": 52,
    "memberof": "test/e2e/yarn.spec.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52",
    "access": null,
    "description": "when updated",
    "lineNumber": 74
  },
  {
    "__docId__": 344,
    "kind": "testIt",
    "name": "it53",
    "testId": 53,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.it53",
    "access": null,
    "description": "creates expected instances",
    "lineNumber": 79
  },
  {
    "__docId__": 345,
    "kind": "testIt",
    "name": "it54",
    "testId": 54,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.it54",
    "access": null,
    "description": "calls every middleware function",
    "lineNumber": 90
  },
  {
    "__docId__": 346,
    "kind": "testIt",
    "name": "it55",
    "testId": 55,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.it55",
    "access": null,
    "description": "calls every middleware function in the expected order",
    "lineNumber": 97
  },
  {
    "__docId__": 347,
    "kind": "testIt",
    "name": "it56",
    "testId": 56,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.it56",
    "access": null,
    "description": "willUpdate is called before didUpdate",
    "lineNumber": 104
  },
  {
    "__docId__": 348,
    "kind": "testIt",
    "name": "it57",
    "testId": 57,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.it57",
    "access": null,
    "description": "didUpdate is called before the first middleware",
    "lineNumber": 113
  },
  {
    "__docId__": 349,
    "kind": "testIt",
    "name": "it58",
    "testId": 58,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.it58",
    "access": null,
    "description": "willBuild is not called",
    "lineNumber": 121
  },
  {
    "__docId__": 350,
    "kind": "testIt",
    "name": "it59",
    "testId": 59,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.it59",
    "access": null,
    "description": "didBuild is not called",
    "lineNumber": 125
  },
  {
    "__docId__": 351,
    "kind": "testDescribe",
    "name": "describe60",
    "testId": 60,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.describe60",
    "access": null,
    "description": "and when build is called",
    "lineNumber": 129
  },
  {
    "__docId__": 352,
    "kind": "testIt",
    "name": "it61",
    "testId": 61,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52.describe60",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.describe60.it61",
    "access": null,
    "description": "has the same number of files generated",
    "lineNumber": 151
  },
  {
    "__docId__": 353,
    "kind": "testIt",
    "name": "it62",
    "testId": 62,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52.describe60",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.describe60.it62",
    "access": null,
    "description": "builds site correctly",
    "lineNumber": 159
  },
  {
    "__docId__": 354,
    "kind": "testIt",
    "name": "it63",
    "testId": 63,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52.describe60",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.describe60.it63",
    "access": null,
    "description": "last middleware is called before willBuild",
    "lineNumber": 174
  },
  {
    "__docId__": 355,
    "kind": "testIt",
    "name": "it64",
    "testId": 64,
    "memberof": "test/e2e/yarn.spec.js~describe48.describe52.describe60",
    "testDepth": 3,
    "static": true,
    "longname": "test/e2e/yarn.spec.js~describe48.describe52.describe60.it64",
    "access": null,
    "description": "willBuild is called before didBuild",
    "lineNumber": 186
  },
  {
    "__docId__": 356,
    "kind": "testFile",
    "name": "test/unit/collection/base.spec.js",
    "content": "/* eslint-disable no-new */\nimport assert from 'assert';\nimport sinon from 'sinon';\nimport _ from 'lodash';\n\nimport fixture from '../../fixture';\n\nimport CollectionBase from '../../../lib/collection/base';\n\ndescribe('collection/base CollectionBase', () => {\n  let sandbox;\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  describe('constructor', () => {\n    it('throws when no collection name is given', () => {\n      assert.throws(() => {\n        new CollectionBase();\n      }, /requires a name/);\n\n      assert.throws(() => {\n        new CollectionBase('');\n      }, /requires a name/);\n    });\n\n    it('accepts a name and no config object', () => {\n      const instance = new CollectionBase('name');\n\n      assert.equal(instance.name, 'name');\n      assert(_.isUndefined(instance.path));\n      assert(_.isUndefined(instance.metadata));\n      assert(_.isUndefined(instance.template));\n      assert(_.isUndefined(instance.permalink));\n      assert(_.isUndefined(instance.sort));\n      assert(_.isUndefined(instance.pagination));\n      assert(_.isUndefined(instance.files));\n      assert(_.isUndefined(instance.excludePaths));\n      assert(_.isUndefined(instance.metadataFiles));\n      assert(_.isArray(instance.pages));\n      assert.equal(instance.pages.length, 0);\n      assert(_.isObject(instance.data));\n    });\n  });\n\n  describe('isFiltered', () => {\n    it('returns if a file in collection is filtered', () => {\n      const instance = new CollectionBase('name');\n      const file = {\n        filtered: undefined,\n      };\n\n      assert.equal(instance.isFiltered(file), false);\n\n      file.filtered = false;\n      assert.equal(instance.isFiltered(file), false);\n\n      file.filtered = true;\n      assert.equal(instance.isFiltered(file), true);\n    });\n  });\n\n  describe('sortFiles', () => {\n    let files;\n\n    const additionalData = [\n      {\n        number: 10,\n        date: '2017-03-28',\n      },\n      {\n        number: 1,\n        date: '2013-09-08',\n      },\n      {\n        number: 5,\n        date: '2016-05-01',\n      },\n    ];\n    beforeEach(() => {\n      files = fixture.collectionFiles().map((file, index) => {\n        _.extend(file.data, additionalData[index]);\n        return file;\n      });\n    });\n\n    it('sorts integer value descending', () => {\n      const sortConfig = {\n        key: 'number',\n        order: 'descending',\n      };\n\n      assert.deepEqual(\n        CollectionBase.sortFiles(files, sortConfig),\n        [files[0], files[2], files[1]]\n      );\n    });\n\n    it('sorts integer value ascending', () => {\n      const sortConfig = {\n        key: 'number',\n        order: 'ascending',\n      };\n\n      assert.deepEqual(\n        CollectionBase.sortFiles(files, sortConfig),\n        [files[1], files[2], files[0]]\n      );\n    });\n\n    it('sorts date value descending', () => {\n      const sortConfig = {\n        key: 'date',\n        order: 'descending',\n      };\n\n      assert.deepEqual(\n        CollectionBase.sortFiles(files, sortConfig),\n        [files[0], files[2], files[1]]\n      );\n    });\n\n    it('sorts date value ascending', () => {\n      const sortConfig = {\n        key: 'date',\n        order: 'ascending',\n      };\n\n      assert.deepEqual(\n        CollectionBase.sortFiles(files, sortConfig),\n        [files[1], files[2], files[0]]\n      );\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/collection/base.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 357,
    "kind": "testDescribe",
    "name": "describe65",
    "testId": 65,
    "memberof": "test/unit/collection/base.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/collection/base.spec.js~describe65",
    "access": null,
    "description": "collection/base CollectionBase",
    "lineNumber": 10
  },
  {
    "__docId__": 358,
    "kind": "testDescribe",
    "name": "describe66",
    "testId": 66,
    "memberof": "test/unit/collection/base.spec.js~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/base.spec.js~describe65.describe66",
    "access": null,
    "description": "constructor",
    "lineNumber": 20
  },
  {
    "__docId__": 359,
    "kind": "testIt",
    "name": "it67",
    "testId": 67,
    "memberof": "test/unit/collection/base.spec.js~describe65.describe66",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/base.spec.js~describe65.describe66.it67",
    "access": null,
    "description": "throws when no collection name is given",
    "lineNumber": 21
  },
  {
    "__docId__": 360,
    "kind": "testIt",
    "name": "it68",
    "testId": 68,
    "memberof": "test/unit/collection/base.spec.js~describe65.describe66",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/base.spec.js~describe65.describe66.it68",
    "access": null,
    "description": "accepts a name and no config object",
    "lineNumber": 31
  },
  {
    "__docId__": 361,
    "kind": "testDescribe",
    "name": "describe69",
    "testId": 69,
    "memberof": "test/unit/collection/base.spec.js~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/base.spec.js~describe65.describe69",
    "access": null,
    "description": "isFiltered",
    "lineNumber": 50
  },
  {
    "__docId__": 362,
    "kind": "testIt",
    "name": "it70",
    "testId": 70,
    "memberof": "test/unit/collection/base.spec.js~describe65.describe69",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/base.spec.js~describe65.describe69.it70",
    "access": null,
    "description": "returns if a file in collection is filtered",
    "lineNumber": 51
  },
  {
    "__docId__": 363,
    "kind": "testDescribe",
    "name": "describe71",
    "testId": 71,
    "memberof": "test/unit/collection/base.spec.js~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/base.spec.js~describe65.describe71",
    "access": null,
    "description": "sortFiles",
    "lineNumber": 67
  },
  {
    "__docId__": 364,
    "kind": "testIt",
    "name": "it72",
    "testId": 72,
    "memberof": "test/unit/collection/base.spec.js~describe65.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/base.spec.js~describe65.describe71.it72",
    "access": null,
    "description": "sorts integer value descending",
    "lineNumber": 91
  },
  {
    "__docId__": 365,
    "kind": "testIt",
    "name": "it73",
    "testId": 73,
    "memberof": "test/unit/collection/base.spec.js~describe65.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/base.spec.js~describe65.describe71.it73",
    "access": null,
    "description": "sorts integer value ascending",
    "lineNumber": 103
  },
  {
    "__docId__": 366,
    "kind": "testIt",
    "name": "it74",
    "testId": 74,
    "memberof": "test/unit/collection/base.spec.js~describe65.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/base.spec.js~describe65.describe71.it74",
    "access": null,
    "description": "sorts date value descending",
    "lineNumber": 115
  },
  {
    "__docId__": 367,
    "kind": "testIt",
    "name": "it75",
    "testId": 75,
    "memberof": "test/unit/collection/base.spec.js~describe65.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/base.spec.js~describe65.describe71.it75",
    "access": null,
    "description": "sorts date value ascending",
    "lineNumber": 127
  },
  {
    "__docId__": 368,
    "kind": "testFile",
    "name": "test/unit/collection/index.spec.js",
    "content": "import assert from 'assert';\n\nimport FileSystemCollection from\n  '../../../lib/collection/type/file-system';\nimport MetadataCollection from '../../../lib/collection/type/metadata';\nimport {\n  createCollection,\n} from '../../../lib/collection/index';\n\ndescribe('collection/index', () => {\n  describe('create', () => {\n    it('creates the right Collection class', () => {\n      assert(createCollection('name', {\n      }) instanceof FileSystemCollection);\n\n      assert(createCollection('name', {\n        metadata: 'whee',\n      }) instanceof MetadataCollection);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/collection/index.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 369,
    "kind": "testDescribe",
    "name": "describe76",
    "testId": 76,
    "memberof": "test/unit/collection/index.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/collection/index.spec.js~describe76",
    "access": null,
    "description": "collection/index",
    "lineNumber": 10
  },
  {
    "__docId__": 370,
    "kind": "testDescribe",
    "name": "describe77",
    "testId": 77,
    "memberof": "test/unit/collection/index.spec.js~describe76",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/index.spec.js~describe76.describe77",
    "access": null,
    "description": "create",
    "lineNumber": 11
  },
  {
    "__docId__": 371,
    "kind": "testIt",
    "name": "it78",
    "testId": 78,
    "memberof": "test/unit/collection/index.spec.js~describe76.describe77",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/index.spec.js~describe76.describe77.it78",
    "access": null,
    "description": "creates the right Collection class",
    "lineNumber": 12
  },
  {
    "__docId__": 372,
    "kind": "testFile",
    "name": "test/unit/collection/page.spec.js",
    "content": "import assert from 'assert';\nimport sinon from 'sinon';\n\nimport fixture from '../../fixture';\nimport {\n  createMockConfig,\n} from '../../utils';\n\nimport Url from '../../../lib/url';\n\nimport CollectionPage from '../../../lib/collection/page';\n\ndescribe('collection/page CollectionPage', () => {\n  const config = createMockConfig();\n\n  let sandbox;\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  const collectionPageData = {\n    page: 2,\n\n    // How many pages in the collection.\n    total_pages: 3,\n\n    // Posts displayed per page\n    per_page: 1,\n\n    // Total number of posts\n    total: 3,\n  };\n\n  describe('constructor', () => {\n    it('throws an error if it doesn\\'t get expected values', () => {\n      assert.throws(() => {\n        // eslint-disable-next-line no-new\n        new CollectionPage();\n      }, /ID as a string.$/);\n\n      assert.throws(() => {\n        // eslint-disable-next-line no-new\n        new CollectionPage('idHere');\n      }, /index.$/);\n    });\n\n    it('creates a unique id', () => {\n      const id = 'idHere';\n      const index = 4;\n\n      const instance = new CollectionPage(id, index);\n\n      assert.equal(instance.id, `${id}:${index}`);\n      assert.equal(instance.collectionId, id);\n      assert.equal(instance.index, index);\n      assert.equal(instance.data.page, index + 1);\n    });\n  });\n\n  describe('setData', () => {\n    it('saves passed in values', () => {\n      const data = collectionPageData;\n      const files = fixture.collectionFiles();\n\n      const instance = new CollectionPage('id', 2, {\n        config,\n      });\n      instance.permalink = 'ok';\n\n      instance.setData(data);\n      instance.setFiles(files);\n\n      data.files = files.map(file => file.data);\n      data.url = Url.makePretty(Url.makeUrlFileSystemSafe(instance.permalink));\n\n      assert.deepEqual(instance.data, data);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/collection/page.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 373,
    "kind": "testDescribe",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/unit/collection/page.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/collection/page.spec.js~describe79",
    "access": null,
    "description": "collection/page CollectionPage",
    "lineNumber": 13
  },
  {
    "__docId__": 374,
    "kind": "testDescribe",
    "name": "describe80",
    "testId": 80,
    "memberof": "test/unit/collection/page.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/page.spec.js~describe79.describe80",
    "access": null,
    "description": "constructor",
    "lineNumber": 38
  },
  {
    "__docId__": 375,
    "kind": "testIt",
    "name": "it81",
    "testId": 81,
    "memberof": "test/unit/collection/page.spec.js~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/page.spec.js~describe79.describe80.it81",
    "access": null,
    "description": "throws an error if it doesn't get expected values",
    "lineNumber": 39
  },
  {
    "__docId__": 376,
    "kind": "testIt",
    "name": "it82",
    "testId": 82,
    "memberof": "test/unit/collection/page.spec.js~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/page.spec.js~describe79.describe80.it82",
    "access": null,
    "description": "creates a unique id",
    "lineNumber": 51
  },
  {
    "__docId__": 377,
    "kind": "testDescribe",
    "name": "describe83",
    "testId": 83,
    "memberof": "test/unit/collection/page.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/page.spec.js~describe79.describe83",
    "access": null,
    "description": "setData",
    "lineNumber": 64
  },
  {
    "__docId__": 378,
    "kind": "testIt",
    "name": "it84",
    "testId": 84,
    "memberof": "test/unit/collection/page.spec.js~describe79.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/page.spec.js~describe79.describe83.it84",
    "access": null,
    "description": "saves passed in values",
    "lineNumber": 65
  },
  {
    "__docId__": 379,
    "kind": "testFile",
    "name": "test/unit/collection/type/file-system.spec.js",
    "content": "import assert from 'assert';\nimport sinon from 'sinon';\nimport _ from 'lodash';\n\nimport fixture from '../../../fixture';\nimport {\n  createMockConfig,\n} from '../../../utils';\n\nimport CollectionPage from '../../../../lib/collection/page';\n\nimport CollectionBase from '../../../../lib/collection/base';\nimport FileSystemCollection\n  from '../../../../lib/collection/type/file-system';\n\ndescribe('collection/type/file-system FileSystemCollection', () => {\n  const config = createMockConfig();\n\n  let sandbox;\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  describe('_isFileInCollection', () => {\n    it('is false if file\\'s path is not within collection\\'s path', () => {\n      const path = 'my/file/path';\n      const instance = new FileSystemCollection('name');\n      instance.path = path;\n\n      let file = {\n        path: 'my/file',\n      };\n\n      assert.equal(instance._isFileInCollection(file), false);\n\n      file = {\n        path: 'my/file/pat',\n      };\n\n      assert.equal(instance._isFileInCollection(file), false);\n\n      file = {\n        path: 'your/file/path/is/close',\n      };\n\n      assert.equal(instance._isFileInCollection(file), false);\n    });\n\n    it('is true if file\\'s path includes collection\\'s path', () => {\n      const path = 'my/file/path';\n      const instance = new FileSystemCollection('name');\n      instance.path = path;\n      sinon.stub(instance, '_isFileExcluded').returns(false);\n\n      let file = {\n        path: 'my/file/path',\n      };\n\n      assert.equal(instance._isFileInCollection(file), true);\n\n      file = {\n        path: 'my/file/path/is/deeper',\n      };\n\n      assert.equal(instance._isFileInCollection(file), true);\n    });\n\n    it('is false if file\\'s path is excluded from collection', () => {\n      const path = 'my/file/path';\n      const instance = new FileSystemCollection('name');\n      instance.path = path;\n      sinon.stub(instance, '_isFileExcluded').returns(true);\n\n      let file = {\n        path: 'my/file/path',\n      };\n\n      assert.equal(instance._isFileInCollection(file), false);\n\n      file = {\n        path: 'my/file/path/is/deeper',\n      };\n\n      assert.equal(instance._isFileInCollection(file), false);\n    });\n  });\n\n  describe('populate', () => {\n    it('adds files to collection', () => {\n      const instance = new FileSystemCollection('name');\n      instance.path = 'ok';\n      instance.permalink = '/my/:permalink';\n      sinon.spy(instance, 'addFile');\n      sinon.stub(instance, 'createCollectionPages').returns(sinon.spy());\n      sinon.stub(instance, '_isFileInCollection').returns(true);\n      sandbox.spy(CollectionBase, 'sortFiles');\n      assert(_.isObject(instance.files));\n\n      const files = fixture.collectionFiles();\n      assert.deepEqual(instance.populate(files), instance);\n      assert.equal(instance.addFile.callCount, 3);\n      assert.equal(instance.createCollectionPages.calledOnce, true);\n      assert.equal(CollectionBase.sortFiles.calledOnce, false);\n      assert(_.isUndefined(instance.metadataFiles));\n\n      files.forEach((file, index) => {\n        assert.equal(file.data, instance.data.files[index]);\n      });\n    });\n\n    it('does not add files to collection', () => {\n      const instance = new FileSystemCollection('name');\n      instance.path = 'ok';\n      instance.permalink = '/my/:permalink';\n      sinon.spy(instance, 'addFile');\n      sinon.stub(instance, 'createCollectionPages').returns(sinon.spy());\n      sinon.stub(instance, '_isFileInCollection').returns(false);\n      sandbox.spy(CollectionBase, 'sortFiles');\n      assert(_.isObject(instance.files));\n\n      const files = fixture.collectionFiles();\n      assert.deepEqual(instance.populate(files), instance);\n      assert.equal(instance.addFile.callCount, 3);\n      assert.equal(instance.createCollectionPages.calledOnce, true);\n      assert.equal(CollectionBase.sortFiles.calledOnce, false);\n\n      files.forEach((file) => {\n        assert(_.isUndefined(file.permalink));\n      });\n\n      assert(_.isUndefined(instance.metadataFiles));\n      assert.equal(_.isEmpty(instance.files), true);\n\n      assert(_.isArray(instance.data.files));\n      assert.equal(instance.data.files.length, 0);\n    });\n  });\n\n  describe('createCollectionPages', () => {\n    it('adds files to collectionPages', () => {\n      const pageSize = 1;\n\n      const instance = new FileSystemCollection('name', undefined, config);\n      const filesArray = fixture.collectionFiles();\n      filesArray.forEach((file, index) => {\n        instance.files[index] = file;\n      });\n      instance.pageSize = pageSize;\n      instance.permalink = {};\n      instance.permalink.index = 'index.html';\n      instance.permalink.page = '/page.html';\n      sinon.spy(instance, 'createPage');\n      sinon.spy(instance, '_linkPages');\n      sandbox.spy(CollectionBase, 'sortFiles');\n      assert.equal(instance.pages.length, 0);\n\n      assert.equal(instance.createCollectionPages(), true);\n\n      assert.equal(instance.pages.length, 3);\n      assert.equal(instance.createPage.callCount, 3);\n      assert.equal(instance._linkPages.calledOnce, true);\n      assert.equal(CollectionBase.sortFiles.calledOnce, true);\n\n      instance.pages.forEach((page, index) => {\n        assert(page instanceof CollectionPage);\n        assert.deepEqual(page.data.files, [instance.files[index].data]);\n\n        const expectedPermalink = index === 0 ?\n          instance.permalink.index :\n          instance.permalink.page;\n\n        assert.equal(page.permalink, expectedPermalink);\n\n        assert.equal(page.data.total_pages, filesArray.length / pageSize);\n        assert.equal(page.data.per_page, pageSize);\n        assert.equal(page.data.total, filesArray.length);\n\n        if (index === 0) {\n          assert(_.isUndefined(page.data.prev));\n          assert(_.isUndefined(page.data.prev_link));\n        } else {\n          const previous = instance.pages[index - 1];\n          assert.equal(page.data.prev, previous.data.page);\n          assert.equal(page.data.prev_link, previous.data.url);\n        }\n\n        if (index === (instance.pages.length - 1)) {\n          assert(_.isUndefined(page.data.next));\n          assert(_.isUndefined(page.data.next_link));\n        } else {\n          const next = instance.pages[index + 1];\n          assert.equal(page.data.next, next.data.page);\n          assert.equal(page.data.next_link, next.data.url);\n        }\n\n        assert.deepEqual(instance.data.pages[index], page.data);\n      });\n    });\n  });\n\n  describe('createCollectionPages', () => {\n    it('returns early if no pagination permalinks are set', () => {\n      sandbox.spy(CollectionBase, 'sortFiles');\n      const instance = new FileSystemCollection('name');\n      assert.equal(instance.createCollectionPages(), false);\n\n      instance.permalink = {};\n      instance.permalink.index = 'index.html';\n      instance.permalink.page = undefined;\n      assert.equal(instance.createCollectionPages(), false);\n      assert.equal(CollectionBase.sortFiles.calledOnce, false);\n\n      instance.permalink.index = undefined;\n      instance.permalink.page = '/page.html';\n      assert.equal(instance.createCollectionPages(), false);\n      assert.equal(CollectionBase.sortFiles.calledOnce, false);\n    });\n  });\n\n  describe('_setExcludePaths', () => {\n    const excludeCollections = [\n      {\n        path: '/my/path',\n      },\n      {\n        path: 'your/path',\n      },\n    ];\n\n    const excludePaths = excludeCollections.map(coll => coll.path);\n\n    it('can set exclude paths', () => {\n      const instance = new FileSystemCollection('name', undefined, config);\n      assert(_.isUndefined(instance.path));\n      assert(_.isArray(instance.excludePaths));\n      assert.equal(instance.excludePaths.length, 0);\n\n      instance._setExcludePaths(Array.from(excludeCollections));\n      assert.deepEqual(instance.excludePaths, excludePaths);\n    });\n\n    it('does not add its own path to the exclude path array', () => {\n      const instance = new FileSystemCollection('name', undefined, config);\n      instance.path = excludePaths[0];\n      assert(_.isArray(instance.excludePaths));\n      assert.equal(instance.excludePaths.length, 0);\n\n      instance._setExcludePaths(Array.from(excludeCollections));\n      assert.deepEqual(instance.excludePaths, [excludePaths[1]]);\n    });\n  });\n\n  describe('_isFileExcluded', () => {\n    it('is false when FileSystemCollection has no path', () => {\n      const instance = new FileSystemCollection('name');\n      assert(_.isUndefined(instance.path));\n\n      assert.equal(instance._isFileExcluded(), false);\n      assert.equal(instance._isFileExcluded({}), false);\n    });\n\n    it('is false when FileSystemCollection has metadata', () => {\n      const instance = new FileSystemCollection('name');\n      instance.metadata = 'dummy/path';\n      instance.metadata = 'fixture.collectionMetadataKey';\n\n      assert.equal(instance._isFileExcluded(), false);\n      assert.equal(instance._isFileExcluded({}), false);\n      assert.equal(instance._isFileExcluded({}), false);\n    });\n\n    it('is false when no excludePaths are set', () => {\n      const instance = new FileSystemCollection('name');\n      instance.path = '/dummy/path';\n      assert(_.isArray(instance.excludePaths));\n      assert.equal(instance.excludePaths.length, 0);\n\n      assert.equal(instance._isFileExcluded(), false);\n      assert.equal(instance._isFileExcluded({}), false);\n\n      instance.excludePaths = [];\n\n      assert.equal(instance._isFileExcluded(), false);\n      assert.equal(instance._isFileExcluded({}), false);\n    });\n\n    it('is true if the file path is contained in our excludePaths', () => {\n      const path = '/dummy/path';\n      const instance = new FileSystemCollection('name');\n      instance.path = path;\n      instance.excludePaths = [\n        'another/path',\n        path,\n      ];\n\n      const file = {\n        path: `a/long${path}`,\n      };\n\n      assert.equal(instance._isFileExcluded(file), true);\n    });\n\n    it('is false if the file path is not in our excludePaths', () => {\n      const path = '/dummy/path';\n      const instance = new FileSystemCollection('name');\n      instance.path = path;\n      instance.excludePaths = [\n        'another/path',\n        path,\n      ];\n\n      const file = {\n        path: 'a/long/time/ago',\n      };\n\n      assert.equal(instance._isFileExcluded(file), false);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 380,
    "kind": "testDescribe",
    "name": "describe85",
    "testId": 85,
    "memberof": "test/unit/collection/type/file-system.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85",
    "access": null,
    "description": "collection/type/file-system FileSystemCollection",
    "lineNumber": 16
  },
  {
    "__docId__": 381,
    "kind": "testDescribe",
    "name": "describe86",
    "testId": 86,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe86",
    "access": null,
    "description": "_isFileInCollection",
    "lineNumber": 28
  },
  {
    "__docId__": 382,
    "kind": "testIt",
    "name": "it87",
    "testId": 87,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe86.it87",
    "access": null,
    "description": "is false if file's path is not within collection's path",
    "lineNumber": 29
  },
  {
    "__docId__": 383,
    "kind": "testIt",
    "name": "it88",
    "testId": 88,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe86.it88",
    "access": null,
    "description": "is true if file's path includes collection's path",
    "lineNumber": 53
  },
  {
    "__docId__": 384,
    "kind": "testIt",
    "name": "it89",
    "testId": 89,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe86.it89",
    "access": null,
    "description": "is false if file's path is excluded from collection",
    "lineNumber": 72
  },
  {
    "__docId__": 385,
    "kind": "testDescribe",
    "name": "describe90",
    "testId": 90,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe90",
    "access": null,
    "description": "populate",
    "lineNumber": 92
  },
  {
    "__docId__": 386,
    "kind": "testIt",
    "name": "it91",
    "testId": 91,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe90.it91",
    "access": null,
    "description": "adds files to collection",
    "lineNumber": 93
  },
  {
    "__docId__": 387,
    "kind": "testIt",
    "name": "it92",
    "testId": 92,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe90.it92",
    "access": null,
    "description": "does not add files to collection",
    "lineNumber": 115
  },
  {
    "__docId__": 388,
    "kind": "testDescribe",
    "name": "describe93",
    "testId": 93,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe93",
    "access": null,
    "description": "createCollectionPages",
    "lineNumber": 143
  },
  {
    "__docId__": 389,
    "kind": "testIt",
    "name": "it94",
    "testId": 94,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe93.it94",
    "access": null,
    "description": "adds files to collectionPages",
    "lineNumber": 144
  },
  {
    "__docId__": 390,
    "kind": "testDescribe",
    "name": "describe95",
    "testId": 95,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe95",
    "access": null,
    "description": "createCollectionPages",
    "lineNumber": 205
  },
  {
    "__docId__": 391,
    "kind": "testIt",
    "name": "it96",
    "testId": 96,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe95",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe95.it96",
    "access": null,
    "description": "returns early if no pagination permalinks are set",
    "lineNumber": 206
  },
  {
    "__docId__": 392,
    "kind": "testDescribe",
    "name": "describe97",
    "testId": 97,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe97",
    "access": null,
    "description": "_setExcludePaths",
    "lineNumber": 224
  },
  {
    "__docId__": 393,
    "kind": "testIt",
    "name": "it98",
    "testId": 98,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe97.it98",
    "access": null,
    "description": "can set exclude paths",
    "lineNumber": 236
  },
  {
    "__docId__": 394,
    "kind": "testIt",
    "name": "it99",
    "testId": 99,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe97.it99",
    "access": null,
    "description": "does not add its own path to the exclude path array",
    "lineNumber": 246
  },
  {
    "__docId__": 395,
    "kind": "testDescribe",
    "name": "describe100",
    "testId": 100,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe100",
    "access": null,
    "description": "_isFileExcluded",
    "lineNumber": 257
  },
  {
    "__docId__": 396,
    "kind": "testIt",
    "name": "it101",
    "testId": 101,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe100.it101",
    "access": null,
    "description": "is false when FileSystemCollection has no path",
    "lineNumber": 258
  },
  {
    "__docId__": 397,
    "kind": "testIt",
    "name": "it102",
    "testId": 102,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe100.it102",
    "access": null,
    "description": "is false when FileSystemCollection has metadata",
    "lineNumber": 266
  },
  {
    "__docId__": 398,
    "kind": "testIt",
    "name": "it103",
    "testId": 103,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe100.it103",
    "access": null,
    "description": "is false when no excludePaths are set",
    "lineNumber": 276
  },
  {
    "__docId__": 399,
    "kind": "testIt",
    "name": "it104",
    "testId": 104,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe100.it104",
    "access": null,
    "description": "is true if the file path is contained in our excludePaths",
    "lineNumber": 291
  },
  {
    "__docId__": 400,
    "kind": "testIt",
    "name": "it105",
    "testId": 105,
    "memberof": "test/unit/collection/type/file-system.spec.js~describe85.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/file-system.spec.js~describe85.describe100.it105",
    "access": null,
    "description": "is false if the file path is not in our excludePaths",
    "lineNumber": 307
  },
  {
    "__docId__": 401,
    "kind": "testFile",
    "name": "test/unit/collection/type/metadata.spec.js",
    "content": "import assert from 'assert';\nimport sinon from 'sinon';\nimport _ from 'lodash';\n\nimport fixture from '../../../fixture';\nimport {\n  createMockConfig,\n} from '../../../utils';\n\nimport CollectionPage from '../../../../lib/collection/page';\n\nimport CollectionBase from '../../../../lib/collection/base';\nimport MetadataCollection from\n  '../../../../lib/collection/type/metadata';\n\ndescribe('collection/type/metadata MetadataCollection', () => {\n  const config = createMockConfig();\n\n  let sandbox;\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  describe('_isFileInCollection', () => {\n    it('is false if file does not have collection\\'s metadata key', () => {\n      const instance = new MetadataCollection('name');\n      instance.metadata = 'soMeta';\n\n      const file = {\n        data: {},\n      };\n\n      file.data.someMeta = 'ok';\n      assert.equal(instance._isFileInCollection(file), false);\n\n      file.data[instance.metadata] = undefined;\n      assert.equal(instance._isFileInCollection(file), false);\n    });\n\n    it('is true if file has collection\\'s metadata key', () => {\n      const instance = new MetadataCollection('name');\n      instance.metadata = 'soMeta';\n\n      const file = {\n        data: {},\n      };\n\n      file.data[instance.metadata] = null;\n      assert.equal(instance._isFileInCollection(file), true);\n\n      file.data[instance.metadata] = '';\n      assert.equal(instance._isFileInCollection(file), true);\n\n      file.data[instance.metadata] = [];\n      assert.equal(instance._isFileInCollection(file), true);\n    });\n  });\n\n  describe('populate', () => {\n    it('adds files to collection', () => {\n      const instance = new MetadataCollection('name');\n      instance.metadata = fixture.collectionMetadataKey;\n      sinon.stub(instance, 'createCollectionPages').returns(sinon.spy());\n      sinon.stub(instance, '_isFileInCollection').returns(true);\n      sandbox.spy(CollectionBase, 'sortFiles');\n      assert(_.isUndefined(instance.files));\n      assert(_.isEmpty(instance.metadataFiles));\n\n      const files = fixture.collectionFiles();\n      assert.deepEqual(instance.populate(files), instance);\n      assert.equal(instance.createCollectionPages.calledOnce, true);\n      assert.equal(CollectionBase.sortFiles.called, false);\n\n      assert(_.isUndefined(instance.files));\n      assert(typeof instance.metadataFiles === 'object');\n\n      assert.equal(\n        Object.keys(instance.metadataFiles).length,\n        files.length\n      );\n\n      assert.equal(instance.metadataFiles['norman'].length, 2);\n      assert.equal(instance.metadataFiles['rockwell'].length, 1);\n      assert.equal(instance.metadataFiles['null'].length, 1);\n\n      assert(_.isEqual(\n        instance.metadataFiles['norman'],\n        [files[0], files[1]]\n      ));\n\n      assert(_.isEqual(\n        Object.keys(instance.metadataFiles),\n        Object.keys(instance.data.metadata)\n      ));\n    });\n\n    it('does not add files to collection', () => {\n      const instance = new MetadataCollection('name');\n      instance.metadata = fixture.collectionMetadataKey;\n      sinon.stub(instance, 'createCollectionPages').returns(sinon.spy());\n      sinon.stub(instance, '_isFileInCollection').returns(false);\n      sandbox.spy(CollectionBase, 'sortFiles');\n      assert(_.isUndefined(instance.files));\n      assert(_.isEmpty(instance.metadataFiles));\n\n      const files = fixture.collectionFiles();\n      assert.deepEqual(instance.populate(files), instance);\n      assert.equal(instance.createCollectionPages.calledOnce, true);\n      assert.equal(CollectionBase.sortFiles.called, false);\n\n      assert(_.isUndefined(instance.files));\n      assert(typeof instance.metadataFiles === 'object');\n\n      assert.equal(\n        Object.keys(instance.metadataFiles).length,\n        0\n      );\n\n      assert.equal(\n        Object.keys(instance.data.metadata).length,\n        0\n      );\n    });\n  });\n\n\n  describe('createCollectionPages', () => {\n    it('returns early if no pagination permalinks are set', () => {\n      const instance = new MetadataCollection('name', undefined, config);\n      assert.equal(instance.createCollectionPages(), false);\n\n      instance.permalink = {};\n      instance.permalink.index = 'index.html';\n      instance.permalink.page = undefined;\n      assert.equal(instance.createCollectionPages(), false);\n\n      instance.permalink.index = undefined;\n      instance.permalink.page = '/page.html';\n      assert.equal(instance.createCollectionPages(), false);\n    });\n\n    const pageSize = 1;\n    it('adds files to collectionPages', () => {\n      const files = fixture.collectionFiles();\n      const instance = new MetadataCollection('name', undefined, config);\n      instance.metadata = fixture.collectionMetadataKey;\n      instance.permalink = {};\n      instance.pageSize = pageSize;\n      instance.permalink.index = 'index.html';\n      instance.permalink.page = '/page/:metadata/:page.html';\n      assert.equal(instance.pages.length, 0);\n      assert(_.isEmpty(instance.metadataFiles));\n      sinon.spy(instance, 'createCollectionPages');\n      sandbox.spy(CollectionBase, 'sortFiles');\n\n      // Use instance.populate so we have proper instance.metadataFiles\n      // structure.\n      instance.populate(files);\n      assert.ok(instance.createCollectionPages.returned(true));\n\n      assert(typeof instance.metadataFiles === 'object');\n      assert.equal(CollectionBase.sortFiles.callCount, 3);\n      assert.equal(instance.pages.length, 4);\n\n      instance.pages.forEach((page, realIndex) => {\n        // Since we have two files with same tag, they're in multiple pages.\n        // This if statement just moves the pointer so we're interacting with\n        // the right page data.\n        let index = realIndex;\n        let expectedPermalink = index === 0 ?\n          instance.permalink.index :\n          instance.permalink.page;\n        if (realIndex === 2) {\n          index = 0;\n          expectedPermalink = instance.permalink.index;\n        } else if (realIndex === 3) {\n          index = 0;\n          expectedPermalink = instance.permalink.index;\n        }\n\n        // eslint-disable-next-line no-shadow\n        const files = instance.metadataFiles[page.data.metadata];\n\n        assert(page instanceof CollectionPage);\n\n        assert.deepEqual(page.data.files, [files[index].data]);\n\n        assert.equal(page.permalink, expectedPermalink);\n        assert.equal(page.data.total_pages, files.length / pageSize);\n        assert.equal(page.data.per_page, pageSize);\n        assert.equal(page.data.total, files.length);\n\n        if (index === 0) {\n          assert(_.isUndefined(page.data.prev));\n          assert(_.isUndefined(page.data.prev_link));\n        } else {\n          assert(_.isUndefined(page.data.next));\n          assert(_.isUndefined(page.data.next_link));\n\n          const previous = instance.pages[index - 1];\n          assert.equal(page.data.prev, previous.data.page);\n          assert.equal(page.data.prev_link, previous.data.url);\n\n          assert(_.isUndefined(page.data.next));\n          assert(_.isUndefined(page.data.next_link));\n        }\n\n        assert.deepEqual(instance.data.pages[realIndex], page.data);\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/collection/type/metadata.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 402,
    "kind": "testDescribe",
    "name": "describe106",
    "testId": 106,
    "memberof": "test/unit/collection/type/metadata.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/collection/type/metadata.spec.js~describe106",
    "access": null,
    "description": "collection/type/metadata MetadataCollection",
    "lineNumber": 16
  },
  {
    "__docId__": 403,
    "kind": "testDescribe",
    "name": "describe107",
    "testId": 107,
    "memberof": "test/unit/collection/type/metadata.spec.js~describe106",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/type/metadata.spec.js~describe106.describe107",
    "access": null,
    "description": "_isFileInCollection",
    "lineNumber": 28
  },
  {
    "__docId__": 404,
    "kind": "testIt",
    "name": "it108",
    "testId": 108,
    "memberof": "test/unit/collection/type/metadata.spec.js~describe106.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/metadata.spec.js~describe106.describe107.it108",
    "access": null,
    "description": "is false if file does not have collection's metadata key",
    "lineNumber": 29
  },
  {
    "__docId__": 405,
    "kind": "testIt",
    "name": "it109",
    "testId": 109,
    "memberof": "test/unit/collection/type/metadata.spec.js~describe106.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/metadata.spec.js~describe106.describe107.it109",
    "access": null,
    "description": "is true if file has collection's metadata key",
    "lineNumber": 44
  },
  {
    "__docId__": 406,
    "kind": "testDescribe",
    "name": "describe110",
    "testId": 110,
    "memberof": "test/unit/collection/type/metadata.spec.js~describe106",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/type/metadata.spec.js~describe106.describe110",
    "access": null,
    "description": "populate",
    "lineNumber": 63
  },
  {
    "__docId__": 407,
    "kind": "testIt",
    "name": "it111",
    "testId": 111,
    "memberof": "test/unit/collection/type/metadata.spec.js~describe106.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/metadata.spec.js~describe106.describe110.it111",
    "access": null,
    "description": "adds files to collection",
    "lineNumber": 64
  },
  {
    "__docId__": 408,
    "kind": "testIt",
    "name": "it112",
    "testId": 112,
    "memberof": "test/unit/collection/type/metadata.spec.js~describe106.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/metadata.spec.js~describe106.describe110.it112",
    "access": null,
    "description": "does not add files to collection",
    "lineNumber": 101
  },
  {
    "__docId__": 409,
    "kind": "testDescribe",
    "name": "describe113",
    "testId": 113,
    "memberof": "test/unit/collection/type/metadata.spec.js~describe106",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/collection/type/metadata.spec.js~describe106.describe113",
    "access": null,
    "description": "createCollectionPages",
    "lineNumber": 131
  },
  {
    "__docId__": 410,
    "kind": "testIt",
    "name": "it114",
    "testId": 114,
    "memberof": "test/unit/collection/type/metadata.spec.js~describe106.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/metadata.spec.js~describe106.describe113.it114",
    "access": null,
    "description": "returns early if no pagination permalinks are set",
    "lineNumber": 132
  },
  {
    "__docId__": 411,
    "kind": "testIt",
    "name": "it115",
    "testId": 115,
    "memberof": "test/unit/collection/type/metadata.spec.js~describe106.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/collection/type/metadata.spec.js~describe106.describe113.it115",
    "access": null,
    "description": "adds files to collectionPages",
    "lineNumber": 147
  },
  {
    "__docId__": 412,
    "kind": "testFile",
    "name": "test/unit/config/index.spec.js",
    "content": "import assert from 'assert';\nimport rewire from 'rewire';\nimport sinon from 'sinon';\nimport path from 'path';\nimport _ from 'lodash';\n\nimport fixture from '../../fixture';\nimport {\n  simpleSite,\n} from '../../utils';\n\nconst ConfigRewire = rewire('../../../lib/config/index.js');\nconst Config = ConfigRewire.default;\n\ndescribe('config/index Config', () => {\n  let sandbox;\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  describe('constructor', () => {\n    it('can create an instance', () => {\n      sandbox.spy(Config.prototype, 'update');\n\n      const instance = new Config('');\n\n      assert.ok(instance);\n      assert(typeof instance._raw === 'object');\n\n      assert(instance.update.calledOnce === false);\n    });\n  });\n\n  describe('update', () => {\n    let revert;\n\n    afterEach(() => {\n      if (_.isFunction(revert)) {\n        revert();\n        revert = null;\n      }\n    });\n\n    function calculatePathsCorrectly({ instance, rootPath }) {\n      const expectedConfig = fixture.configDefault();\n\n      assert.equal(\n        instance._raw.path.source,\n        path.resolve(\n          rootPath + expectedConfig.path.source\n        )\n      );\n\n      assert.equal(\n        instance._raw.path.destination,\n        path.resolve(\n          rootPath + expectedConfig.path.source +\n            expectedConfig.path.destination\n        )\n      );\n\n      _.each(instance.path, (val, key) => {\n        assert.equal(instance.path[key], instance._raw.path[key]);\n      });\n    }\n\n    it('can load a config file that exports a function', () => {\n      const rootPath = '/root/';\n\n      const instance = new Config('');\n      instance.root = rootPath;\n\n      revert = ConfigRewire.__set__(\n        'loadConfigFile',\n        sinon.stub().returns(() => fixture.configDefault())\n      );\n\n      instance.update();\n\n      calculatePathsCorrectly({ instance, rootPath });\n    });\n\n    it('calculates paths correctly', () => {\n      const rootPath = '/root/';\n\n      const instance = new Config('');\n      instance.root = rootPath;\n\n      revert = ConfigRewire.__set__(\n        'loadConfigFile',\n        sinon.stub().returns(fixture.configDefault())\n      );\n\n      instance.update();\n\n      calculatePathsCorrectly({ instance, rootPath });\n    });\n\n    it('throws when given an invalid config object', () => {\n      const root = '/root/';\n\n      const instance = new Config('');\n      instance.root = root;\n\n      const invalidConfigs = [\n        {\n          path: false,\n        },\n        {\n          site: 'Test',\n        },\n      ];\n\n      invalidConfigs.forEach((config) => {\n        revert = ConfigRewire.__set__(\n          'loadConfigFile',\n          sinon.stub().returns(config)\n        );\n\n        assert.throws(() => instance.update(), JSON.stringify(config));\n      });\n    });\n\n    it('sorts file defaults in correct precedence order', () => {\n      const root = '/root/';\n\n      const instance = new Config('');\n      instance.root = root;\n\n      const expectedFileDefaultsOrder = [\n        {\n          scope: {\n            metadata: {\n              foo: 'bar',\n            },\n          },\n          values: {},\n        },\n        {\n          scope: {\n            path: './',\n          },\n          values: {},\n        },\n        {\n          scope: {\n            path: './_posts/',\n          },\n          values: {},\n        },\n        {\n          scope: {\n            path: './_posts/',\n            metadata: {\n              foo: 'bar',\n            },\n          },\n          values: {},\n        },\n        {\n          scope: {\n            path: './_posts/',\n            metadata: {\n              draft: true,\n            },\n          },\n          values: {},\n        },\n        {\n          scope: {\n            path: './_posts/2016',\n          },\n          values: {},\n        },\n      ];\n\n      // Test 3 random orderings.\n      _.times(3, () => {\n        revert = ConfigRewire.__set__(\n          'loadConfigFile',\n          sinon.stub().returns({\n            ...fixture.configDefault(),\n            path: {\n              source: './',\n            },\n            file: {\n              defaults: _.shuffle(expectedFileDefaultsOrder),\n            },\n          })\n        );\n\n        instance.update();\n\n        instance.get('file.defaults').forEach((defaultObj, index) => {\n          // Ignore index 3 and 4 as they are sorted by the order in which\n          // they are given. They can be in either order depending on what\n          // the _.shuffle operation does.\n          // This is safe to ignore as everything else has a known expected\n          // order.\n          if (index === 3 || index === 4) {\n            return;\n          }\n\n          const expectedObj = _.cloneDeep(expectedFileDefaultsOrder[index]);\n          if (expectedObj.scope.path != null) {\n            expectedObj.scope.path = path.resolve(\n              root,\n              expectedObj.scope.path\n            );\n          }\n\n          assert.deepEqual(\n            defaultObj,\n            expectedObj\n          );\n        });\n      });\n    });\n\n    it('coerces middleware and lifecycle config values to arrays', () => {\n      const instance = new Config('');\n      instance.root = simpleSite.src;\n\n      const rawConfig = {\n        middlewares: 'fake-module',\n        lifecycle: {\n          willUpdate: _.noop,\n          didUpdate: ['my-middleware'],\n        },\n      };\n\n      revert = ConfigRewire.__set__(\n        'loadConfigFile',\n        sinon.stub().returns(rawConfig)\n      );\n\n      instance.update();\n\n      assert(_.isArray(instance.get('middlewares')));\n      assert.equal(typeof instance.get('middlewares[0]'), 'function');\n\n      assert(_.isArray(instance.get('lifecycle.willUpdate')));\n      assert.equal(typeof instance.get('lifecycle.willUpdate[0]'), 'function');\n\n      assert(_.isArray(instance.get('lifecycle.didUpdate')));\n      assert.equal(typeof instance.get('lifecycle.didUpdate[0]'), 'function');\n    });\n\n    describe('asset', () => {\n      let instance;\n\n      beforeEach(() => {\n        instance = new Config('');\n        instance.root = simpleSite.src;\n\n        const rawConfig = {\n          assets: [\n            {\n              test: 'jsx',\n              use: 'browserify',\n            },\n            {\n              test: /\\.js$/,\n              use: 'browserify',\n            },\n            {\n              test: /\\.s[ac]ss$/,\n              use: {\n                calculateDestination: () => {},\n                render: () => {},\n              },\n            },\n            {\n              test: '/abs/pathjs.gif',\n              use: 'browserify',\n            },\n          ],\n        };\n\n        revert = ConfigRewire.__set__(\n          'loadConfigFile',\n          sinon.stub().returns(rawConfig)\n        );\n\n        instance.update();\n      });\n\n      it('coerces asset test values to functions', () => {\n        instance.get('assets').forEach((asset) => {\n          assert(_.isFunction(asset.test));\n        });\n      });\n\n      it('ensures asset.use value is a function', () => {\n        instance.get('assets').forEach((asset) => {\n          assert(_.isObject(asset.use));\n        });\n      });\n\n      it('correctly tests against different file paths', () => {\n        [\n          ['/foo/bar.js', true],\n          ['/foo/bar.min.js', true],\n          ['/foo/bar.jsx', false],\n          ['/js/bar.jsx', false],\n          ['/foo/ternjs.gif', false],\n          ['/abs/pathjs.gif', true],\n          ['/foo/bar.sass', true],\n          ['/foo/bar.css', false],\n        ].forEach(([filePath, expectedValue]) => {\n          const actualValue = instance.get('assets').some(asset =>\n            asset.test(filePath)\n          );\n\n          assert.equal(\n            actualValue,\n            expectedValue,\n            `${filePath} did not test as ${expectedValue}`\n          );\n        });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/config/index.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "testDescribe",
    "name": "describe116",
    "testId": 116,
    "memberof": "test/unit/config/index.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116",
    "access": null,
    "description": "config/index Config",
    "lineNumber": 15
  },
  {
    "__docId__": 414,
    "kind": "testDescribe",
    "name": "describe117",
    "testId": 117,
    "memberof": "test/unit/config/index.spec.js~describe116",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe117",
    "access": null,
    "description": "constructor",
    "lineNumber": 25
  },
  {
    "__docId__": 415,
    "kind": "testIt",
    "name": "it118",
    "testId": 118,
    "memberof": "test/unit/config/index.spec.js~describe116.describe117",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe117.it118",
    "access": null,
    "description": "can create an instance",
    "lineNumber": 26
  },
  {
    "__docId__": 416,
    "kind": "testDescribe",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/unit/config/index.spec.js~describe116",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe119",
    "access": null,
    "description": "update",
    "lineNumber": 38
  },
  {
    "__docId__": 417,
    "kind": "testIt",
    "name": "it120",
    "testId": 120,
    "memberof": "test/unit/config/index.spec.js~describe116.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe119.it120",
    "access": null,
    "description": "can load a config file that exports a function",
    "lineNumber": 71
  },
  {
    "__docId__": 418,
    "kind": "testIt",
    "name": "it121",
    "testId": 121,
    "memberof": "test/unit/config/index.spec.js~describe116.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe119.it121",
    "access": null,
    "description": "calculates paths correctly",
    "lineNumber": 87
  },
  {
    "__docId__": 419,
    "kind": "testIt",
    "name": "it122",
    "testId": 122,
    "memberof": "test/unit/config/index.spec.js~describe116.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe119.it122",
    "access": null,
    "description": "throws when given an invalid config object",
    "lineNumber": 103
  },
  {
    "__docId__": 420,
    "kind": "testIt",
    "name": "it123",
    "testId": 123,
    "memberof": "test/unit/config/index.spec.js~describe116.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe119.it123",
    "access": null,
    "description": "sorts file defaults in correct precedence order",
    "lineNumber": 128
  },
  {
    "__docId__": 421,
    "kind": "testIt",
    "name": "it124",
    "testId": 124,
    "memberof": "test/unit/config/index.spec.js~describe116.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe119.it124",
    "access": null,
    "description": "coerces middleware and lifecycle config values to arrays",
    "lineNumber": 224
  },
  {
    "__docId__": 422,
    "kind": "testDescribe",
    "name": "describe125",
    "testId": 125,
    "memberof": "test/unit/config/index.spec.js~describe116.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe119.describe125",
    "access": null,
    "description": "asset",
    "lineNumber": 253
  },
  {
    "__docId__": 423,
    "kind": "testIt",
    "name": "it126",
    "testId": 126,
    "memberof": "test/unit/config/index.spec.js~describe116.describe119.describe125",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe119.describe125.it126",
    "access": null,
    "description": "coerces asset test values to functions",
    "lineNumber": 292
  },
  {
    "__docId__": 424,
    "kind": "testIt",
    "name": "it127",
    "testId": 127,
    "memberof": "test/unit/config/index.spec.js~describe116.describe119.describe125",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe119.describe125.it127",
    "access": null,
    "description": "ensures asset.use value is a function",
    "lineNumber": 298
  },
  {
    "__docId__": 425,
    "kind": "testIt",
    "name": "it128",
    "testId": 128,
    "memberof": "test/unit/config/index.spec.js~describe116.describe119.describe125",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/config/index.spec.js~describe116.describe119.describe125.it128",
    "access": null,
    "description": "correctly tests against different file paths",
    "lineNumber": 304
  },
  {
    "__docId__": 426,
    "kind": "testFile",
    "name": "test/unit/data-files.spec.js",
    "content": "import assert from 'assert';\nimport path from 'path';\nimport { readDataFiles } from '../../lib/data-files';\n\ndescribe('data-files DataFiles', () => {\n  describe('update', () => {\n    it('returns empty object when no data objects found', async () => {\n      const result = await readDataFiles('foo');\n\n      assert.deepEqual(result, {});\n    });\n\n    it('works', async () => {\n      const dataPath = path.resolve(\n        __dirname,\n        '../fixtures/simple-site/src/_data'\n      );\n      const result = await readDataFiles(dataPath);\n\n      assert.deepEqual(result, {\n        cities: [\n          {\n            name: 'New York City',\n            cuisine: 'bagel',\n          },\n          {\n            name: 'Los Angeles',\n            cuisine: 'kale',\n          },\n          {\n            name: 'New Orleans',\n            cuisine: 'beignets',\n          },\n        ],\n        friends: {\n          'angelica': {\n            name: 'Angelica',\n            birthday: 'May 12, 1988',\n          },\n          chuckie: {\n            name: 'Chuckie',\n            birthday: 'April 15, 1989',\n          },\n          tommy: {\n            name: 'Tommy',\n            birthday: 'June 11th, 1990',\n          },\n        },\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/data-files.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 427,
    "kind": "testDescribe",
    "name": "describe129",
    "testId": 129,
    "memberof": "test/unit/data-files.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data-files.spec.js~describe129",
    "access": null,
    "description": "data-files DataFiles",
    "lineNumber": 5
  },
  {
    "__docId__": 428,
    "kind": "testDescribe",
    "name": "describe130",
    "testId": 130,
    "memberof": "test/unit/data-files.spec.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data-files.spec.js~describe129.describe130",
    "access": null,
    "description": "update",
    "lineNumber": 6
  },
  {
    "__docId__": 429,
    "kind": "testIt",
    "name": "it131",
    "testId": 131,
    "memberof": "test/unit/data-files.spec.js~describe129.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data-files.spec.js~describe129.describe130.it131",
    "access": null,
    "description": "returns empty object when no data objects found",
    "lineNumber": 7
  },
  {
    "__docId__": 430,
    "kind": "testIt",
    "name": "it132",
    "testId": 132,
    "memberof": "test/unit/data-files.spec.js~describe129.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data-files.spec.js~describe129.describe130.it132",
    "access": null,
    "description": "works",
    "lineNumber": 13
  },
  {
    "__docId__": 431,
    "kind": "testFile",
    "name": "test/unit/file.spec.js",
    "content": "import _ from 'lodash';\nimport assert from 'assert';\nimport path from 'path';\nimport sinon from 'sinon';\nimport fs from 'fs-extra';\n\nimport fixture from '../fixture';\nimport {\n  createMockConfig,\n} from '../utils';\n\nimport Url from '../../lib/url';\nimport Parse from '../../lib/parse';\nimport File from '../../lib/file';\n\ndescribe('file File', () => {\n  const filePath = '/fixture/_posts/hello-world.md';\n\n  let config;\n\n  let sandbox;\n  beforeEach(() => {\n    config = createMockConfig();\n\n    sandbox = sinon.sandbox.create();\n\n    const readFileStub = (file, opts, cb) =>\n      cb(null, fixture.frontmatterString);\n\n    sandbox.stub(fs, 'readFile')\n      .callsFake(readFileStub)\n      .withArgs(filePath, 'utf8');\n\n    sandbox.stub(Parse, 'fileHasFrontmatter').returns(true);\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  describe('constructor', () => {\n    it('can create an instance', async () => {\n      const instance = new File(filePath, {\n        config,\n      });\n      await instance.update();\n\n      assert.ok(instance);\n\n      assert.equal(instance.path, filePath);\n      assert.equal(instance.id, filePath);\n      assert.ok(instance.checksum);\n      assert.ok(instance.data, fixture.frontmatterJSON.data);\n      assert.ok(instance.data.content, fixture.frontmatterJSON.content);\n    });\n\n    it('calculates destination path', async () => {\n      sandbox.spy(File.prototype, '_calculateDestination');\n\n      const instance = new File(filePath, {\n        config,\n      });\n      await instance.update();\n\n      assert.ok(instance._calculateDestination.calledOnce);\n      assert.ok(instance.destination);\n    });\n  });\n\n  describe('default values from config', () => {\n    const defaults = [\n      {\n        scope: {\n          path: '',\n        },\n        values: {\n          post: false,\n        },\n      },\n      {\n        scope: {\n          path: '_posts',\n          metadata: {\n            draft: false,\n          },\n        },\n        values: {\n          post: true,\n          layout: 'post',\n        },\n      },\n      {\n        scope: {\n          path: '_posts/2016',\n        },\n        values: {\n          newAge: true,\n        },\n      },\n    ];\n    // eslint-disable-next-line no-shadow\n    const config = createMockConfig({\n      file: {\n        defaults,\n      },\n    });\n\n    function createFile(filePathParts, additionalFrontmatter = {}) {\n      return async () => {\n        sandbox.restore();\n\n        // eslint-disable-next-line no-shadow\n        const filePath = path.join(config.get('path.source'), ...filePathParts);\n\n        const readFileStub = (file, opts, cb) =>\n          cb(null, fixture.frontmatterString);\n\n        sandbox.stub(fs, 'readFile')\n          .callsFake(readFileStub)\n          .withArgs(filePath, 'utf8');\n        sandbox.stub(Parse, 'fileHasFrontmatter').returns(true);\n\n        const instance = new File(filePath, {\n          config,\n        });\n        await instance.update();\n        _.extend(instance.frontmatter, additionalFrontmatter);\n        instance.defaults = instance._gatherDefaults();\n        // Mimic internal File.update behavior to copy over data.\n        _.merge(instance.data, instance.defaults, instance.frontmatter);\n\n        return instance;\n      };\n    }\n\n    it('applies default values that match', () => {\n      const promises = [\n        [\n          createFile(['..', 'test.md']),\n          {},\n        ],\n        [\n          createFile(['_posts', 'hello-world.md'], {\n            draft: true,\n          }),\n          _.defaults(\n            defaults[0].values\n          ),\n        ],\n        [\n          createFile(['_posts', 'hello-world.md'], {\n            draft: false,\n          }),\n          _.defaults(\n            defaults[1].values,\n            defaults[0].values\n          ),\n        ],\n        [\n          createFile(['_posts', '2016', 'its-me-again.md'], {\n            draft: false,\n            pleasant: 'dreams',\n          }),\n          _.defaults(\n            defaults[2].values,\n            defaults[1].values,\n            defaults[0].values\n          ),\n        ],\n      ].map(async ([creator, expectedValue]) => {\n        const instance = await creator();\n        assert.deepEqual(instance.defaults, expectedValue);\n        assert.ok(_.isMatch(instance.data, instance.frontmatter));\n\n        // Make sure that for every expected default it should at least exist\n        // as a property on the data object. The value might be different\n        // depending if it is over-written but it should exist.\n        Object.keys(expectedValue).forEach((expectedKey) => {\n          assert.ok(instance.data[expectedKey] != null);\n        });\n      });\n\n      return Promise.all(promises);\n    });\n  });\n\n  describe('_calculateDestination', () => {\n    it('allows custom file url property', async () => {\n      const permalinkValue = 'whee';\n      const instance = new File(filePath, {\n        config,\n      });\n      await instance.update();\n\n      // Should use filePath when no file url or permalink is et.\n      assert.equal(instance.data.url, Url.makePretty(\n        Url.makeUrlFileSystemSafe(\n          Url.replaceMarkdownExtension(\n            filePath,\n            instance._config.get('markdown.extensions')\n          )\n        )\n      ));\n      assert.equal(instance.url, undefined);\n\n      // Should use permalink value when no url is set.\n      instance.data.permalink = permalinkValue;\n      instance._calculateDestination();\n      assert.equal(instance.data.url, Url.makePretty(\n        Url.makeUrlFileSystemSafe(permalinkValue)\n      ));\n      assert.equal(instance.url, undefined);\n\n      // Should use File url if set.\n      const customPermalinkValue = 'customPermalinkValue';\n      instance.frontmatter.url = customPermalinkValue;\n      instance.data.permalink = permalinkValue;\n      instance._calculateDestination();\n      assert.equal(instance.data.url, Url.makePretty(\n        Url.makeUrlFileSystemSafe(customPermalinkValue)\n      ));\n      assert.equal(instance.frontmatter.url, customPermalinkValue);\n    });\n  });\n\n  it('has all proper values on its data object', async () => {\n    const instance = new File(filePath, {\n      config,\n    });\n    await instance.update();\n\n    assert.strictEqual(instance.url, undefined);\n    assert.equal(instance.data.url, Url.makePretty(\n      Url.makeUrlFileSystemSafe(\n        Url.replaceMarkdownExtension(\n          filePath,\n          instance._config.get('markdown.extensions')\n        )\n      )\n    ));\n\n    const permalink = 'whee';\n    instance.data.permalink = permalink;\n    instance._calculateDestination();\n\n    assert.deepEqual(instance.data, {\n      content: fixture.frontmatterJSON.content,\n      ...fixture.frontmatterJSON.data,\n      permalink,\n      url: Url.makePretty(\n        Url.makeUrlFileSystemSafe(instance.data.permalink)\n      ),\n    });\n  });\n\n  describe('filtered', () => {\n    it('set correctly', async () => {\n      const instance = new File(filePath, {\n        config,\n      });\n\n      await instance.update();\n      assert.equal(instance.filtered, false);\n\n      config._raw.file.filters = {\n        metadata: {\n          draft: false,\n        },\n      };\n      await instance.update();\n      assert.equal(instance.filtered, false);\n\n      config._raw.file.filters = {\n        metadata: {\n          draft: true,\n        },\n      };\n      await instance.update();\n      assert.equal(instance.filtered, true);\n\n      config._raw.file.filters = {\n        futureDate: {\n          key: 'draft',\n        },\n      };\n      await instance.update();\n      assert.equal(instance.filtered, false);\n\n      config._raw.file.filters = {\n        futureDate: {\n          key: 'futureDate',\n        },\n      };\n      await instance.update();\n      assert.equal(instance.filtered, true);\n\n      config._raw.file.filters = {\n        futureDate: {\n          key: 'date',\n        },\n      };\n      await instance.update();\n      assert.equal(instance.filtered, false);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/file.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 432,
    "kind": "testDescribe",
    "name": "describe133",
    "testId": 133,
    "memberof": "test/unit/file.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/file.spec.js~describe133",
    "access": null,
    "description": "file File",
    "lineNumber": 16
  },
  {
    "__docId__": 433,
    "kind": "testDescribe",
    "name": "describe134",
    "testId": 134,
    "memberof": "test/unit/file.spec.js~describe133",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/file.spec.js~describe133.describe134",
    "access": null,
    "description": "constructor",
    "lineNumber": 41
  },
  {
    "__docId__": 434,
    "kind": "testIt",
    "name": "it135",
    "testId": 135,
    "memberof": "test/unit/file.spec.js~describe133.describe134",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/file.spec.js~describe133.describe134.it135",
    "access": null,
    "description": "can create an instance",
    "lineNumber": 42
  },
  {
    "__docId__": 435,
    "kind": "testIt",
    "name": "it136",
    "testId": 136,
    "memberof": "test/unit/file.spec.js~describe133.describe134",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/file.spec.js~describe133.describe134.it136",
    "access": null,
    "description": "calculates destination path",
    "lineNumber": 57
  },
  {
    "__docId__": 436,
    "kind": "testDescribe",
    "name": "describe137",
    "testId": 137,
    "memberof": "test/unit/file.spec.js~describe133",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/file.spec.js~describe133.describe137",
    "access": null,
    "description": "default values from config",
    "lineNumber": 70
  },
  {
    "__docId__": 437,
    "kind": "testIt",
    "name": "it138",
    "testId": 138,
    "memberof": "test/unit/file.spec.js~describe133.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/file.spec.js~describe133.describe137.it138",
    "access": null,
    "description": "applies default values that match",
    "lineNumber": 136
  },
  {
    "__docId__": 438,
    "kind": "testDescribe",
    "name": "describe139",
    "testId": 139,
    "memberof": "test/unit/file.spec.js~describe133",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/file.spec.js~describe133.describe139",
    "access": null,
    "description": "_calculateDestination",
    "lineNumber": 187
  },
  {
    "__docId__": 439,
    "kind": "testIt",
    "name": "it140",
    "testId": 140,
    "memberof": "test/unit/file.spec.js~describe133.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/file.spec.js~describe133.describe139.it140",
    "access": null,
    "description": "allows custom file url property",
    "lineNumber": 188
  },
  {
    "__docId__": 440,
    "kind": "testIt",
    "name": "it141",
    "testId": 141,
    "memberof": "test/unit/file.spec.js~describe133",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/file.spec.js~describe133.it141",
    "access": null,
    "description": "has all proper values on its data object",
    "lineNumber": 226
  },
  {
    "__docId__": 441,
    "kind": "testDescribe",
    "name": "describe142",
    "testId": 142,
    "memberof": "test/unit/file.spec.js~describe133",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/file.spec.js~describe133.describe142",
    "access": null,
    "description": "filtered",
    "lineNumber": 256
  },
  {
    "__docId__": 442,
    "kind": "testIt",
    "name": "it143",
    "testId": 143,
    "memberof": "test/unit/file.spec.js~describe133.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/file.spec.js~describe133.describe142.it143",
    "access": null,
    "description": "set correctly",
    "lineNumber": 257
  },
  {
    "__docId__": 443,
    "kind": "testFile",
    "name": "test/unit/filter/future-date.spec.js",
    "content": "import assert from 'assert';\n\nimport futureDate from '../../../lib/filter/future-date';\n\ndescribe('filter/future-date futureDate', () => {\n  it('should default to use date as key value', () => {\n    assert.equal(futureDate({\n      data: {\n        date: Date.now() - 1000,\n      },\n    }), false);\n\n    assert.equal(futureDate({\n      data: {\n        date: Date.now() + 1000,\n      },\n    }), true);\n\n    assert.equal(futureDate({\n      data: {\n        dateKey: Date.now() + 1000,\n      },\n    }), false);\n  });\n\n  it('should allow setting of what date key to use', () => {\n    assert.equal(futureDate({\n      data: {\n        whee: Date.now() - 1000,\n      },\n    }, { key: 'whee' }), false);\n\n    assert.equal(futureDate({\n      data: {\n        whee: Date.now() + 1000,\n      },\n    }, { key: 'whee' }), true);\n\n    assert.equal(futureDate({\n      data: {\n        date: Date.now() + 1000,\n      },\n    }, { key: 'whee' }), false);\n  });\n});\n",
    "static": true,
    "longname": "test/unit/filter/future-date.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 444,
    "kind": "testDescribe",
    "name": "describe144",
    "testId": 144,
    "memberof": "test/unit/filter/future-date.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/filter/future-date.spec.js~describe144",
    "access": null,
    "description": "filter/future-date futureDate",
    "lineNumber": 5
  },
  {
    "__docId__": 445,
    "kind": "testIt",
    "name": "it145",
    "testId": 145,
    "memberof": "test/unit/filter/future-date.spec.js~describe144",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/filter/future-date.spec.js~describe144.it145",
    "access": null,
    "description": "should default to use date as key value",
    "lineNumber": 6
  },
  {
    "__docId__": 446,
    "kind": "testIt",
    "name": "it146",
    "testId": 146,
    "memberof": "test/unit/filter/future-date.spec.js~describe144",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/filter/future-date.spec.js~describe144.it146",
    "access": null,
    "description": "should allow setting of what date key to use",
    "lineNumber": 26
  },
  {
    "__docId__": 447,
    "kind": "testFile",
    "name": "test/unit/filter/index.spec.js",
    "content": "import assert from 'assert';\n\nimport filter from '../../../lib/filter/index';\n\ndescribe('filter/index', () => {\n  const mockFile = {\n    data: {\n      date: '2027-2-28',\n      foo: 'bar',\n    },\n  };\n\n  it('isFileFiltered', () => {\n    assert.equal(filter.isFileFiltered({}, mockFile), false);\n    assert.equal(filter.isFileFiltered({\n      futureDate: {\n        key: 'foo',\n      },\n    }, mockFile), false);\n    assert.equal(filter.isFileFiltered({\n      futureDate: {\n        key: 'date',\n      },\n    }, mockFile), true);\n    assert.equal(filter.isFileFiltered({\n      metadata: {\n        foo: 'date',\n      },\n    }, mockFile), false);\n    assert.equal(filter.isFileFiltered({\n      metadata: {\n        foo: 'bar',\n      },\n    }, mockFile), true);\n  });\n});\n",
    "static": true,
    "longname": "test/unit/filter/index.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 448,
    "kind": "testDescribe",
    "name": "describe147",
    "testId": 147,
    "memberof": "test/unit/filter/index.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/filter/index.spec.js~describe147",
    "access": null,
    "description": "filter/index",
    "lineNumber": 5
  },
  {
    "__docId__": 449,
    "kind": "testIt",
    "name": "it148",
    "testId": 148,
    "memberof": "test/unit/filter/index.spec.js~describe147",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/filter/index.spec.js~describe147.it148",
    "access": null,
    "description": "isFileFiltered",
    "lineNumber": 13
  },
  {
    "__docId__": 450,
    "kind": "testFile",
    "name": "test/unit/filter/metadata.spec.js",
    "content": "import assert from 'assert';\n\nimport metadata from '../../../lib/filter/metadata';\n\ndescribe('filter/metadata metadata', () => {\n  it('should return true when a match is found', () => {\n    assert.equal(metadata({\n      data: {\n        draft: true,\n        title: 'test',\n      },\n    }, {\n      draft: true,\n    }), true);\n\n    assert.equal(metadata({\n      data: {\n        draft: true,\n        title: 'test',\n      },\n    }, {\n      draft: true,\n      title: 'test',\n    }), true);\n\n    assert.equal(metadata({\n      data: {\n        draft: true,\n        title: 'test',\n        date: 'ok',\n      },\n    }, {\n      draft: true,\n      title: 'test',\n    }), true);\n  });\n\n  it('should return false when a match is not found', () => {\n    assert.equal(metadata({\n      data: {\n        draft: false,\n        title: 'test',\n      },\n    }, {\n      draft: true,\n    }), false);\n\n    assert.equal(metadata({\n      data: {\n        draft: true,\n      },\n    }, {\n      draft: true,\n      title: 'test',\n    }), false);\n\n    assert.equal(metadata({\n      data: {\n        draft: true,\n        title: 'surprise',\n      },\n    }, {\n      draft: true,\n      title: 'test',\n    }), false);\n\n    assert.equal(metadata({\n      data: {\n        draft: true,\n        title: 'surprise',\n        date: 'ok',\n      },\n    }, {\n      draft: true,\n      title: 'test',\n    }), false);\n  });\n});\n",
    "static": true,
    "longname": "test/unit/filter/metadata.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 451,
    "kind": "testDescribe",
    "name": "describe149",
    "testId": 149,
    "memberof": "test/unit/filter/metadata.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/filter/metadata.spec.js~describe149",
    "access": null,
    "description": "filter/metadata metadata",
    "lineNumber": 5
  },
  {
    "__docId__": 452,
    "kind": "testIt",
    "name": "it150",
    "testId": 150,
    "memberof": "test/unit/filter/metadata.spec.js~describe149",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/filter/metadata.spec.js~describe149.it150",
    "access": null,
    "description": "should return true when a match is found",
    "lineNumber": 6
  },
  {
    "__docId__": 453,
    "kind": "testIt",
    "name": "it151",
    "testId": 151,
    "memberof": "test/unit/filter/metadata.spec.js~describe149",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/filter/metadata.spec.js~describe149.it151",
    "access": null,
    "description": "should return false when a match is not found",
    "lineNumber": 38
  },
  {
    "__docId__": 454,
    "kind": "testFile",
    "name": "test/unit/metadata.spec.js",
    "content": "import assert from 'assert';\nimport sinon from 'sinon';\n\nimport { createMockConfig } from '../utils';\n\nimport Metadata from '../../lib/metadata';\n\ndescribe('metadata Metadata', () => {\n  let config;\n  let getConfig;\n\n  let sandbox;\n  beforeEach(() => {\n    config = createMockConfig();\n    getConfig = () => config;\n\n    sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  describe('get', () => {\n    let instance;\n    let testVal;\n\n    beforeEach(() => {\n      instance = new Metadata(getConfig);\n      testVal = { foo: 'bar' };\n      instance.set('test', testVal);\n    });\n\n    it('returns the entire object', async () => {\n      assert.deepEqual(instance.get(), instance.metadata);\n    });\n\n    it('returns the object at a path', async () => {\n      assert.deepEqual(instance.get('test'), testVal);\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/metadata.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 455,
    "kind": "testDescribe",
    "name": "describe152",
    "testId": 152,
    "memberof": "test/unit/metadata.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/metadata.spec.js~describe152",
    "access": null,
    "description": "metadata Metadata",
    "lineNumber": 8
  },
  {
    "__docId__": 456,
    "kind": "testDescribe",
    "name": "describe153",
    "testId": 153,
    "memberof": "test/unit/metadata.spec.js~describe152",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/metadata.spec.js~describe152.describe153",
    "access": null,
    "description": "get",
    "lineNumber": 24
  },
  {
    "__docId__": 457,
    "kind": "testIt",
    "name": "it154",
    "testId": 154,
    "memberof": "test/unit/metadata.spec.js~describe152.describe153",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/metadata.spec.js~describe152.describe153.it154",
    "access": null,
    "description": "returns the entire object",
    "lineNumber": 34
  },
  {
    "__docId__": 458,
    "kind": "testIt",
    "name": "it155",
    "testId": 155,
    "memberof": "test/unit/metadata.spec.js~describe152.describe153",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/metadata.spec.js~describe152.describe153.it155",
    "access": null,
    "description": "returns the object at a path",
    "lineNumber": 38
  },
  {
    "__docId__": 459,
    "kind": "testFile",
    "name": "test/unit/parse/front-matter.spec.js",
    "content": "import assert from 'assert';\nimport * as frontMatter from '../../../lib/parse/front-matter';\n\nimport fixture from '../../fixture';\n\ndescribe('parse/front-matter', () => {\n  describe('parse', () => {\n    it('correctly takes a string and produces a json object', () => {\n      assert.deepEqual(\n        frontMatter.parse(fixture.frontmatterString),\n        fixture.frontmatterJSON\n      );\n    });\n  });\n\n  describe('stringify', () => {\n    it('correctly takes json object and produces a string', () => {\n      assert.equal(\n        frontMatter.stringify(\n          fixture.frontmatterJSON.content,\n          fixture.frontmatterJSON.data\n        ),\n        `${fixture.frontmatterString}\\n`\n      );\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/parse/front-matter.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 460,
    "kind": "testDescribe",
    "name": "describe156",
    "testId": 156,
    "memberof": "test/unit/parse/front-matter.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/parse/front-matter.spec.js~describe156",
    "access": null,
    "description": "parse/front-matter",
    "lineNumber": 6
  },
  {
    "__docId__": 461,
    "kind": "testDescribe",
    "name": "describe157",
    "testId": 157,
    "memberof": "test/unit/parse/front-matter.spec.js~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/parse/front-matter.spec.js~describe156.describe157",
    "access": null,
    "description": "parse",
    "lineNumber": 7
  },
  {
    "__docId__": 462,
    "kind": "testIt",
    "name": "it158",
    "testId": 158,
    "memberof": "test/unit/parse/front-matter.spec.js~describe156.describe157",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/parse/front-matter.spec.js~describe156.describe157.it158",
    "access": null,
    "description": "correctly takes a string and produces a json object",
    "lineNumber": 8
  },
  {
    "__docId__": 463,
    "kind": "testDescribe",
    "name": "describe159",
    "testId": 159,
    "memberof": "test/unit/parse/front-matter.spec.js~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/parse/front-matter.spec.js~describe156.describe159",
    "access": null,
    "description": "stringify",
    "lineNumber": 16
  },
  {
    "__docId__": 464,
    "kind": "testIt",
    "name": "it160",
    "testId": 160,
    "memberof": "test/unit/parse/front-matter.spec.js~describe156.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/parse/front-matter.spec.js~describe156.describe159.it160",
    "access": null,
    "description": "correctly takes json object and produces a string",
    "lineNumber": 17
  },
  {
    "__docId__": 465,
    "kind": "testFile",
    "name": "test/unit/parse/yaml.spec.js",
    "content": "import assert from 'assert';\nimport * as yaml from '../../../lib/parse/yaml';\n\ndescribe('parse/yaml', () => {\n  const yamlString =\n`\nfoo: bar\nfood:\n- pizza\n- bagel\n`;\n\n  const yamlAsObj = {\n    foo: 'bar',\n    food: [\n      'pizza',\n      'bagel',\n    ],\n  };\n\n  describe('parse', () => {\n    it('empty string', () => {\n      assert.deepEqual(\n        yaml.parse(''),\n        undefined\n      );\n    });\n\n    it('undefined', () => {\n      assert.deepEqual(\n        yaml.parse(undefined),\n        'undefined'\n      );\n    });\n\n    it('proper yaml string', () => {\n      assert.deepEqual(\n        yaml.parse(yamlString),\n        yamlAsObj\n      );\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/parse/yaml.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 466,
    "kind": "testDescribe",
    "name": "describe161",
    "testId": 161,
    "memberof": "test/unit/parse/yaml.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/parse/yaml.spec.js~describe161",
    "access": null,
    "description": "parse/yaml",
    "lineNumber": 4
  },
  {
    "__docId__": 467,
    "kind": "testDescribe",
    "name": "describe162",
    "testId": 162,
    "memberof": "test/unit/parse/yaml.spec.js~describe161",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/parse/yaml.spec.js~describe161.describe162",
    "access": null,
    "description": "parse",
    "lineNumber": 21
  },
  {
    "__docId__": 468,
    "kind": "testIt",
    "name": "it163",
    "testId": 163,
    "memberof": "test/unit/parse/yaml.spec.js~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/parse/yaml.spec.js~describe161.describe162.it163",
    "access": null,
    "description": "empty string",
    "lineNumber": 22
  },
  {
    "__docId__": 469,
    "kind": "testIt",
    "name": "it164",
    "testId": 164,
    "memberof": "test/unit/parse/yaml.spec.js~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/parse/yaml.spec.js~describe161.describe162.it164",
    "access": null,
    "description": "undefined",
    "lineNumber": 29
  },
  {
    "__docId__": 470,
    "kind": "testIt",
    "name": "it165",
    "testId": 165,
    "memberof": "test/unit/parse/yaml.spec.js~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/parse/yaml.spec.js~describe161.describe162.it165",
    "access": null,
    "description": "proper yaml string",
    "lineNumber": 36
  },
  {
    "__docId__": 471,
    "kind": "testFile",
    "name": "test/unit/url.spec.js",
    "content": "import assert from 'assert';\nimport Url from '../../lib/url';\n\ndescribe('url Url', () => {\n  Url.setSlugOptions({\n    lower: true,\n  });\n\n  describe('interpolatePermalink', () => {\n    it('handles simple interpolations', () => {\n      assert.equal(Url.interpolatePermalink('/:title/', {\n        title: 'banana',\n      }), '/banana/');\n    });\n\n    it('handles duplicate param interpolations', () => {\n      assert.equal(Url.interpolatePermalink('/:title/:title/', {\n        title: 'banana',\n      }), '/banana/banana/');\n    });\n\n    it('handles permalink with no interpolation', () => {\n      assert.equal(Url.interpolatePermalink('/index.html', {\n        title: 'banana',\n      }), '/index.html');\n    });\n\n    it('throw if it can\\'t find value to interpolate in permalink', () => {\n      assert.throws(() => {\n        Url.interpolatePermalink('/:title/:unknown/', {\n          title: 'banana',\n        });\n      });\n    });\n\n    it('handles special date permalink values', () => {\n      assert.equal(\n        Url.interpolatePermalink('/:date|YYYY/:date|MM/:date|D/:title/', {\n          title: '  In the future, the past will be history.  ',\n          date: new Date('2000-02-28T00:00:00-05:00'),\n        }), '/2000/02/28/in-the-future-the-past-will-be-history/'\n      );\n\n      assert.equal(Url\n        .interpolatePermalink('/:date_future|YYYY/:date|MM/:date|D/:title/', {\n          title: 'Does jello dance, or does it just jiggle?  ',\n          date: new Date('2000-02-28T00:00:00-05:00'),\n          date_future: new Date('2020-10-01T00:00:00-05:00'),\n        }), '/2020/02/28/does-jello-dance-or-does-it-just-jiggle/');\n    });\n  });\n\n  describe('replaceMarkdownExtension', () => {\n    it('replaces known markdown extensions', () => {\n      const markdownExtensions = [\n        'md',\n        'markdown',\n      ];\n\n      assert.equal(\n        Url.replaceMarkdownExtension(\n          '/_posts/hello-world.md',\n          markdownExtensions\n        ),\n        '/_posts/hello-world.html'\n      );\n\n      assert.equal(\n        Url.replaceMarkdownExtension(\n          '/_posts/hello-world.markdown',\n          markdownExtensions\n        ),\n        '/_posts/hello-world.html'\n      );\n\n      assert.equal(\n        Url.replaceMarkdownExtension(\n          '/_posts/hello-world.mkdown',\n          markdownExtensions\n        ),\n        '/_posts/hello-world.mkdown'\n      );\n\n      assert.equal(\n        Url.replaceMarkdownExtension(\n          '/_posts/hello-world.html',\n          markdownExtensions\n        ),\n        '/_posts/hello-world.html'\n      );\n    });\n  });\n\n  describe('makeUrlFileSystemSafe', () => {\n    it('appends index.html to a url that has no file extension', () => {\n      assert.equal(Url.makeUrlFileSystemSafe('/my-beautiful-html-permalink'),\n        '/my-beautiful-html-permalink/index.html'\n      );\n\n      assert.equal(Url.makeUrlFileSystemSafe('/my-beautiful-html-permalink/'),\n        '/my-beautiful-html-permalink/index.html'\n      );\n\n      assert.equal(Url.makeUrlFileSystemSafe('my-beautiful-html-permalink'),\n        '/my-beautiful-html-permalink/index.html'\n      );\n    });\n\n    it('does not append index.html to a url that does not need it', () => {\n      assert.equal(Url.makeUrlFileSystemSafe('/html/goes-here.html'),\n        '/html/goes-here.html'\n      );\n\n      assert.equal(Url.makeUrlFileSystemSafe('/html/image.png'),\n        '/html/image.png'\n      );\n\n      assert.equal(Url.makeUrlFileSystemSafe('/html/index.gif'),\n        '/html/index.gif'\n      );\n    });\n  });\n\n  describe('makePretty', () => {\n    it('works', () => {\n      let url = '/html/goes-here.html';\n      assert.equal(\n        Url.makePretty(url),\n        url\n      );\n\n      url = '/my/beautiful-dream';\n      assert.equal(\n        Url.makePretty(url),\n        url\n      );\n\n      url = '/have-you-got-a-minute/';\n      assert.equal(\n        Url.makePretty(`${url}index.html`),\n        url\n      );\n\n      url = '/no-time-to-wasteindex.html';\n      assert.equal(\n        Url.makePretty(url),\n        url\n      );\n\n      url = '/favicon.ico';\n      assert.equal(\n        Url.makePretty(url),\n        url\n      );\n\n      url = '/images/index.gif';\n      assert.equal(\n        Url.makePretty(url),\n        url\n      );\n    });\n  });\n});\n",
    "static": true,
    "longname": "test/unit/url.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 472,
    "kind": "testDescribe",
    "name": "describe166",
    "testId": 166,
    "memberof": "test/unit/url.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166",
    "access": null,
    "description": "url Url",
    "lineNumber": 4
  },
  {
    "__docId__": 473,
    "kind": "testDescribe",
    "name": "describe167",
    "testId": 167,
    "memberof": "test/unit/url.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe167",
    "access": null,
    "description": "interpolatePermalink",
    "lineNumber": 9
  },
  {
    "__docId__": 474,
    "kind": "testIt",
    "name": "it168",
    "testId": 168,
    "memberof": "test/unit/url.spec.js~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe167.it168",
    "access": null,
    "description": "handles simple interpolations",
    "lineNumber": 10
  },
  {
    "__docId__": 475,
    "kind": "testIt",
    "name": "it169",
    "testId": 169,
    "memberof": "test/unit/url.spec.js~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe167.it169",
    "access": null,
    "description": "handles duplicate param interpolations",
    "lineNumber": 16
  },
  {
    "__docId__": 476,
    "kind": "testIt",
    "name": "it170",
    "testId": 170,
    "memberof": "test/unit/url.spec.js~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe167.it170",
    "access": null,
    "description": "handles permalink with no interpolation",
    "lineNumber": 22
  },
  {
    "__docId__": 477,
    "kind": "testIt",
    "name": "it171",
    "testId": 171,
    "memberof": "test/unit/url.spec.js~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe167.it171",
    "access": null,
    "description": "throw if it can't find value to interpolate in permalink",
    "lineNumber": 28
  },
  {
    "__docId__": 478,
    "kind": "testIt",
    "name": "it172",
    "testId": 172,
    "memberof": "test/unit/url.spec.js~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe167.it172",
    "access": null,
    "description": "handles special date permalink values",
    "lineNumber": 36
  },
  {
    "__docId__": 479,
    "kind": "testDescribe",
    "name": "describe173",
    "testId": 173,
    "memberof": "test/unit/url.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe173",
    "access": null,
    "description": "replaceMarkdownExtension",
    "lineNumber": 53
  },
  {
    "__docId__": 480,
    "kind": "testIt",
    "name": "it174",
    "testId": 174,
    "memberof": "test/unit/url.spec.js~describe166.describe173",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe173.it174",
    "access": null,
    "description": "replaces known markdown extensions",
    "lineNumber": 54
  },
  {
    "__docId__": 481,
    "kind": "testDescribe",
    "name": "describe175",
    "testId": 175,
    "memberof": "test/unit/url.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe175",
    "access": null,
    "description": "makeUrlFileSystemSafe",
    "lineNumber": 94
  },
  {
    "__docId__": 482,
    "kind": "testIt",
    "name": "it176",
    "testId": 176,
    "memberof": "test/unit/url.spec.js~describe166.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe175.it176",
    "access": null,
    "description": "appends index.html to a url that has no file extension",
    "lineNumber": 95
  },
  {
    "__docId__": 483,
    "kind": "testIt",
    "name": "it177",
    "testId": 177,
    "memberof": "test/unit/url.spec.js~describe166.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe175.it177",
    "access": null,
    "description": "does not append index.html to a url that does not need it",
    "lineNumber": 109
  },
  {
    "__docId__": 484,
    "kind": "testDescribe",
    "name": "describe178",
    "testId": 178,
    "memberof": "test/unit/url.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe178",
    "access": null,
    "description": "makePretty",
    "lineNumber": 124
  },
  {
    "__docId__": 485,
    "kind": "testIt",
    "name": "it179",
    "testId": 179,
    "memberof": "test/unit/url.spec.js~describe166.describe178",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/url.spec.js~describe166.describe178.it179",
    "access": null,
    "description": "works",
    "lineNumber": 125
  }
]